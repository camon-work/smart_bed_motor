
EVSPIN32G4_SmartBed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006b78  08006b78  00007b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bec  08006bec  000082f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006bec  08006bec  000082f8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006bec  08006bec  000082f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bec  08006bec  00007bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bf0  08006bf0  00007bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  08006bf4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200002f8  08006eec  000082f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08006eec  000085d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000082f8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004a450  00000000  00000000  00008328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000072  00000000  00000000  00052778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00044db6  00000000  00000000  000527ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008f1d  00000000  00000000  000975a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f50  00000000  00000000  000a04c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fcb4b  00000000  00000000  000a2410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003e5c  00000000  00000000  0019ef5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001e301  00000000  00000000  001a2db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002de2f  00000000  00000000  001c10b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001eeee7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053b0  00000000  00000000  001eef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f8 	.word	0x200002f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b60 	.word	0x08006b60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002fc 	.word	0x200002fc
 8000214:	08006b60 	.word	0x08006b60

08000218 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800021a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800021c:	f003 f9ae 	bl	800357c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000220:	480c      	ldr	r0, [pc, #48]	@ (8000254 <LoopForever+0x6>)
  ldr r1, =_edata
 8000222:	490d      	ldr	r1, [pc, #52]	@ (8000258 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000224:	4a0d      	ldr	r2, [pc, #52]	@ (800025c <LoopForever+0xe>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000228:	e002      	b.n	8000230 <LoopCopyDataInit>

0800022a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800022c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022e:	3304      	adds	r3, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000234:	d3f9      	bcc.n	800022a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000236:	4a0a      	ldr	r2, [pc, #40]	@ (8000260 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000238:	4c0a      	ldr	r4, [pc, #40]	@ (8000264 <LoopForever+0x16>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800023c:	e001      	b.n	8000242 <LoopFillZerobss>

0800023e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000240:	3204      	adds	r2, #4

08000242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000244:	d3fb      	bcc.n	800023e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000246:	f006 fc67 	bl	8006b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800024a:	f000 fe45 	bl	8000ed8 <main>

0800024e <LoopForever>:

LoopForever:
    b LoopForever
 800024e:	e7fe      	b.n	800024e <LoopForever>
  ldr   r0, =_estack
 8000250:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000258:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 800025c:	08006bf4 	.word	0x08006bf4
  ldr r2, =_sbss
 8000260:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8000264:	200005d0 	.word	0x200005d0

08000268 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000268:	e7fe      	b.n	8000268 <BusFault_Handler>
	...

0800026c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800026c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800026e:	2400      	movs	r4, #0
{
 8000270:	b092      	sub	sp, #72	@ 0x48
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000272:	223c      	movs	r2, #60	@ 0x3c
 8000274:	4621      	mov	r1, r4
 8000276:	a803      	add	r0, sp, #12
  ADC_MultiModeTypeDef multimode = {0};
 8000278:	e9cd 4400 	strd	r4, r4, [sp]
 800027c:	9402      	str	r4, [sp, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800027e:	f006 fc43 	bl	8006b08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000282:	482b      	ldr	r0, [pc, #172]	@ (8000330 <MX_ADC1_Init+0xc4>)
 8000284:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000288:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800028a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800028e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000290:	2301      	movs	r3, #1
 8000292:	e9c0 4304 	strd	r4, r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000296:	6203      	str	r3, [r0, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000298:	2304      	movs	r3, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800029a:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800029e:	8384      	strh	r4, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002a4:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80002a8:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80002aa:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002ae:	6183      	str	r3, [r0, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	f003 f9be 	bl	8003630 <HAL_ADC_Init>
 80002b4:	bb70      	cbnz	r0, 8000314 <MX_ADC1_Init+0xa8>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b8:	481d      	ldr	r0, [pc, #116]	@ (8000330 <MX_ADC1_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002ba:	9300      	str	r3, [sp, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002bc:	4669      	mov	r1, sp
 80002be:	f003 fda9 	bl	8003e14 <HAL_ADCEx_MultiModeConfigChannel>
 80002c2:	bb88      	cbnz	r0, 8000328 <MX_ADC1_Init+0xbc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 80002c4:	491b      	ldr	r1, [pc, #108]	@ (8000334 <MX_ADC1_Init+0xc8>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80002c6:	2209      	movs	r2, #9
 80002c8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80002cc:	2001      	movs	r0, #1
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80002ce:	227f      	movs	r2, #127	@ 0x7f
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  sConfigInjected.InjectedOffset = 0;
 80002d0:	2300      	movs	r3, #0
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80002d2:	e9cd 0205 	strd	r0, r2, [sp, #20]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80002d6:	2104      	movs	r1, #4
  sConfigInjected.InjectedNbrOfConversion = 2;
 80002d8:	2202      	movs	r2, #2
  sConfigInjected.InjectedOffset = 0;
 80002da:	e9cd 1307 	strd	r1, r3, [sp, #28]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80002de:	2480      	movs	r4, #128	@ 0x80
  sConfigInjected.InjectedNbrOfConversion = 2;
 80002e0:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING;
  sConfigInjected.InjecOversamplingMode = DISABLE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002e2:	4813      	ldr	r0, [pc, #76]	@ (8000330 <MX_ADC1_Init+0xc4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80002e4:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING;
 80002e8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002ec:	a903      	add	r1, sp, #12
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISINGFALLING;
 80002ee:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 80002f2:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80002f6:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80002fa:	f003 fa8d 	bl	8003818 <HAL_ADCEx_InjectedConfigChannel>
 80002fe:	b980      	cbnz	r0, 8000322 <MX_ADC1_Init+0xb6>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000300:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000304:	480a      	ldr	r0, [pc, #40]	@ (8000330 <MX_ADC1_Init+0xc4>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000306:	9304      	str	r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000308:	a903      	add	r1, sp, #12
 800030a:	f003 fa85 	bl	8003818 <HAL_ADCEx_InjectedConfigChannel>
 800030e:	b920      	cbnz	r0, 800031a <MX_ADC1_Init+0xae>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000310:	b012      	add	sp, #72	@ 0x48
 8000312:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000314:	f000 fe3a 	bl	8000f8c <Error_Handler>
 8000318:	e7cd      	b.n	80002b6 <MX_ADC1_Init+0x4a>
    Error_Handler();
 800031a:	f000 fe37 	bl	8000f8c <Error_Handler>
}
 800031e:	b012      	add	sp, #72	@ 0x48
 8000320:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000322:	f000 fe33 	bl	8000f8c <Error_Handler>
 8000326:	e7eb      	b.n	8000300 <MX_ADC1_Init+0x94>
    Error_Handler();
 8000328:	f000 fe30 	bl	8000f8c <Error_Handler>
 800032c:	e7ca      	b.n	80002c4 <MX_ADC1_Init+0x58>
 800032e:	bf00      	nop
 8000330:	20000314 	.word	0x20000314
 8000334:	b6902000 	.word	0xb6902000

08000338 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000338:	b510      	push	{r4, lr}
 800033a:	4604      	mov	r4, r0
 800033c:	b092      	sub	sp, #72	@ 0x48

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033e:	2244      	movs	r2, #68	@ 0x44
 8000340:	2100      	movs	r1, #0
 8000342:	a801      	add	r0, sp, #4
 8000344:	f006 fbe0 	bl	8006b08 <memset>
  if(adcHandle->Instance==ADC1)
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800034e:	d001      	beq.n	8000354 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC12_CLK_ENABLE();
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000350:	b012      	add	sp, #72	@ 0x48
 8000352:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000354:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000358:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035c:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800035e:	9201      	str	r2, [sp, #4]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000360:	9310      	str	r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000362:	f004 fde7 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8000366:	b958      	cbnz	r0, 8000380 <HAL_ADC_MspInit+0x48>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <HAL_ADC_MspInit+0x50>)
 800036a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800036c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000370:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000378:	9300      	str	r3, [sp, #0]
 800037a:	9b00      	ldr	r3, [sp, #0]
}
 800037c:	b012      	add	sp, #72	@ 0x48
 800037e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000380:	f000 fe04 	bl	8000f8c <Error_Handler>
 8000384:	e7f0      	b.n	8000368 <HAL_ADC_MspInit+0x30>
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <MX_CORDIC_Init>:
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800038c:	4805      	ldr	r0, [pc, #20]	@ (80003a4 <MX_CORDIC_Init+0x18>)
{
 800038e:	b508      	push	{r3, lr}
  hcordic.Instance = CORDIC;
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <MX_CORDIC_Init+0x1c>)
 8000392:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000394:	f003 fda2 	bl	8003edc <HAL_CORDIC_Init>
 8000398:	b900      	cbnz	r0, 800039c <MX_CORDIC_Init+0x10>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800039a:	bd08      	pop	{r3, pc}
 800039c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80003a0:	f000 bdf4 	b.w	8000f8c <Error_Handler>
 80003a4:	20000380 	.word	0x20000380
 80003a8:	40020c00 	.word	0x40020c00

080003ac <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{

  if(cordicHandle->Instance==CORDIC)
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <HAL_CORDIC_MspInit+0x28>)
 80003ae:	6802      	ldr	r2, [r0, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d000      	beq.n	80003b6 <HAL_CORDIC_MspInit+0xa>
 80003b4:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80003b6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80003ba:	f042 0208 	orr.w	r2, r2, #8
{
 80003be:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80003c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80003c4:	649a      	str	r2, [r3, #72]	@ 0x48
 80003c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80003d0:	b002      	add	sp, #8
 80003d2:	4770      	bx	lr
 80003d4:	40020c00 	.word	0x40020c00

080003d8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_DMA_Init+0x2c>)
 80003da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80003dc:	f042 0204 	orr.w	r2, r2, #4
{
 80003e0:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80003e2:	649a      	str	r2, [r3, #72]	@ 0x48
 80003e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80003e6:	f002 0204 	and.w	r2, r2, #4
 80003ea:	9200      	str	r2, [sp, #0]
 80003ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80003f0:	f042 0201 	orr.w	r2, r2, #1
 80003f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80003f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	9b01      	ldr	r3, [sp, #4]

}
 8000400:	b002      	add	sp, #8
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	2400      	movs	r4, #0
{
 800040c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000412:	e9cd 4408 	strd	r4, r4, [sp, #32]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b46      	ldr	r3, [pc, #280]	@ (8000530 <MX_GPIO_Init+0x128>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	940a      	str	r4, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800041c:	4e45      	ldr	r6, [pc, #276]	@ (8000534 <MX_GPIO_Init+0x12c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 800041e:	4f46      	ldr	r7, [pc, #280]	@ (8000538 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	f042 0204 	orr.w	r2, r2, #4
 8000424:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000428:	f002 0204 	and.w	r2, r2, #4
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000430:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000432:	f042 0220 	orr.w	r2, r2, #32
 8000436:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000438:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800043a:	f002 0220 	and.w	r2, r2, #32
 800043e:	9202      	str	r2, [sp, #8]
 8000440:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000444:	f042 0201 	orr.w	r2, r2, #1
 8000448:	64da      	str	r2, [r3, #76]	@ 0x4c
 800044a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800044c:	f002 0201 	and.w	r2, r2, #1
 8000450:	9203      	str	r2, [sp, #12]
 8000452:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000456:	f042 0210 	orr.w	r2, r2, #16
 800045a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800045c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800045e:	f002 0210 	and.w	r2, r2, #16
 8000462:	9204      	str	r2, [sp, #16]
 8000464:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000468:	f042 0202 	orr.w	r2, r2, #2
 800046c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000470:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000474:	4622      	mov	r2, r4
 8000476:	4630      	mov	r0, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800047a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000480:	f004 f812 	bl	80044a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000484:	4622      	mov	r2, r4
 8000486:	f641 6172 	movw	r1, #7794	@ 0x1e72
 800048a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048e:	f004 f80b 	bl	80044a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GD_WAKE_GPIO_Port, GD_WAKE_Pin, GPIO_PIN_SET);
 8000492:	4638      	mov	r0, r7
 8000494:	2201      	movs	r2, #1
 8000496:	2180      	movs	r1, #128	@ 0x80
 8000498:	f004 f806 	bl	80044a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800049c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80004a4:	a906      	add	r1, sp, #24
 80004a6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80004a8:	e9cd 2306 	strd	r2, r3, [sp, #24]

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f003 fe3c 	bl	800412c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b8:	a906      	add	r1, sp, #24
 80004ba:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c4:	f003 fe32 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80004c8:	220f      	movs	r2, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ca:	4630      	mov	r0, r6
 80004cc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80004ce:	2300      	movs	r3, #0
 80004d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d6:	f003 fe29 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004da:	f641 6372 	movw	r3, #7794	@ 0x1e72
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	a906      	add	r1, sp, #24
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f003 fe1e 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : GD_WAKE_Pin */
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80004f0:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 80004f2:	a906      	add	r1, sp, #24
 80004f4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GD_WAKE_Pin;
 80004f6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GD_WAKE_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f003 fe15 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : GD_READY_Pin GD_NFAULT_Pin */
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000502:	a906      	add	r1, sp, #24
 8000504:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GD_READY_Pin|GD_NFAULT_Pin;
 8000506:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800050a:	2300      	movs	r3, #0
 800050c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000510:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000512:	f003 fe0b 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800051a:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000520:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000522:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	f003 fe00 	bl	800412c <HAL_GPIO_Init>

}
 800052c:	b00d      	add	sp, #52	@ 0x34
 800052e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	48000800 	.word	0x48000800
 8000538:	48001000 	.word	0x48001000

0800053c <HALL_Init>:
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 800053c:	7843      	ldrb	r3, [r0, #1]
 800053e:	f8b0 c016 	ldrh.w	ip, [r0, #22]

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000542:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8000544:	b530      	push	{r4, r5, lr}
    hMaxReliableElSpeedUnit *= 2U;
 8000546:	8a84      	ldrh	r4, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000548:	fb1c fc03 	smulbb	ip, ip, r3
    hMaxReliableElSpeedUnit *= 2U;
 800054c:	fb14 f403 	smulbb	r4, r4, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000550:	fa1f fc8c 	uxth.w	ip, ip
    hMaxReliableElSpeedUnit *= 2U;
 8000554:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000556:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8000558:	f1bc 0f03 	cmp.w	ip, #3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800055c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 800055e:	f8a0 10c6 	strh.w	r1, [r0, #198]	@ 0xc6
    hMaxReliableElSpeedUnit *= 2U;
 8000562:	b2a4      	uxth	r4, r4
    if (0U == hMinReliableElSpeedUnit)
 8000564:	d96b      	bls.n	800063e <HALL_Init+0x102>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000566:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800056a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800056e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000572:	f242 7e10 	movw	lr, #10000	@ 0x2710
 8000576:	fbbe fcfc 	udiv	ip, lr, ip
 800057a:	fa1f f58c 	uxth.w	r5, ip
 800057e:	f8a0 50c4 	strh.w	r5, [r0, #196]	@ 0xc4
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000582:	4d31      	ldr	r5, [pc, #196]	@ (8000648 <HALL_Init+0x10c>)
    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000584:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000588:	f8a0 40b6 	strh.w	r4, [r0, #182]	@ 0xb6
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 800058c:	fb0c f101 	mul.w	r1, ip, r1
 8000590:	fba5 5101 	umull	r5, r1, r5, r1
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000594:	4d2d      	ldr	r5, [pc, #180]	@ (800064c <HALL_Init+0x110>)
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000596:	0989      	lsrs	r1, r1, #6
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000598:	fba5 5202 	umull	r5, r2, r5, r2
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 800059c:	040d      	lsls	r5, r1, #16
 800059e:	f8c0 50bc 	str.w	r5, [r0, #188]	@ 0xbc
                              * pHandle->_Super.DPPConvFactor;
 80005a2:	69c5      	ldr	r5, [r0, #28]
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 80005a4:	f8a0 10b4 	strh.w	r1, [r0, #180]	@ 0xb4
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80005a8:	0892      	lsrs	r2, r2, #2

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 80005aa:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80005ae:	fbb2 f2fe 	udiv	r2, r2, lr
                              * pHandle->_Super.DPPConvFactor;
 80005b2:	fb05 f202 	mul.w	r2, r5, r2
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80005b6:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
    if (0U == hMaxReliableElSpeedUnit)
 80005ba:	b289      	uxth	r1, r1
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 80005bc:	ea4f 024c 	mov.w	r2, ip, lsl #1
    if (0U == hMaxReliableElSpeedUnit)
 80005c0:	b10c      	cbz	r4, 80005c6 <HALL_Init+0x8a>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 80005c2:	fbb2 f2f4 	udiv	r2, r2, r4
 80005c6:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80005ca:	f890 20ca 	ldrb.w	r2, [r0, #202]	@ 0xca
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80005ce:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80005d0:	fb0e f202 	mul.w	r2, lr, r2
 80005d4:	fbb2 f2f4 	udiv	r2, r2, r4
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80005d8:	699c      	ldr	r4, [r3, #24]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80005da:	3a01      	subs	r2, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80005dc:	f8a0 20c8 	strh.w	r2, [r0, #200]	@ 0xc8
 80005e0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
 80005e4:	f024 04f0 	bic.w	r4, r4, #240	@ 0xf0

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 80005e8:	2501      	movs	r5, #1
 80005ea:	4322      	orrs	r2, r4
 80005ec:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
 80005f0:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80005f2:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005f4:	695a      	ldr	r2, [r3, #20]
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 80005f6:	2100      	movs	r1, #0
 80005f8:	432a      	orrs	r2, r5
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	f042 0204 	orr.w	r2, r2, #4
 8000604:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	f042 0202 	orr.w	r2, r2, #2
 800060c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800060e:	68da      	ldr	r2, [r3, #12]
 8000610:	432a      	orrs	r2, r5
 8000612:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000614:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000616:	6a1a      	ldr	r2, [r3, #32]
 8000618:	432a      	orrs	r2, r5
 800061a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	432a      	orrs	r2, r5
 8000620:	601a      	str	r2, [r3, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000622:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000626:	b14a      	cbz	r2, 800063c <HALL_Init+0x100>
 8000628:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 800062c:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8000630:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000634:	f843 1f04 	str.w	r1, [r3, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000638:	4293      	cmp	r3, r2
 800063a:	d1fb      	bne.n	8000634 <HALL_Init+0xf8>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f04f 0c96 	mov.w	ip, #150	@ 0x96
      pHandle->HallTimeout = 150U;
 8000642:	4665      	mov	r5, ip
 8000644:	e79b      	b.n	800057e <HALL_Init+0x42>
 8000646:	bf00      	nop
 8000648:	10624dd3 	.word	0x10624dd3
 800064c:	aaaaaaab 	.word	0xaaaaaaab

08000650 <HALL_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000650:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000652:	68d1      	ldr	r1, [r2, #12]
 8000654:	f021 0102 	bic.w	r1, r1, #2
{
 8000658:	b4f0      	push	{r4, r5, r6, r7}

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 800065a:	2300      	movs	r3, #0

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 800065c:	f8b0 40b4 	ldrh.w	r4, [r0, #180]	@ 0xb4
 8000660:	60d1      	str	r1, [r2, #12]
    pHandle->SensorIsReliable = true;
 8000662:	2101      	movs	r1, #1
    pHandle->RatioDec = false;
 8000664:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    pHandle->Direction = POSITIVE;
 8000668:	f880 10a6 	strb.w	r1, [r0, #166]	@ 0xa6
    pHandle->RatioInc = false;
 800066c:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
    pHandle->SpeedFIFOIdx = 0U;
 8000670:	f880 309c 	strb.w	r3, [r0, #156]	@ 0x9c
    pHandle->FirstCapt = 0U;
 8000674:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
    pHandle->_Super.bSpeedErrorNumber = 0;
 8000678:	7003      	strb	r3, [r0, #0]
    pHandle->BufferFilled = 0U;
 800067a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    pHandle->SensorIsReliable = true;
 800067e:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
    pHandle->OVFCounter = 0U;
 8000682:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    pHandle->_Super.hMecAccelUnitP = 0;
 8000686:	8243      	strh	r3, [r0, #18]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000688:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800068a:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800068c:	6813      	ldr	r3, [r2, #0]
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800068e:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8000690:	430b      	orrs	r3, r1
 8000692:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000694:	68d3      	ldr	r3, [r2, #12]
 8000696:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	60d3      	str	r3, [r2, #12]
    if (DEGREES_120 == pHandle->SensorPlacement)
 800069e:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80006a2:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	@ 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80006a6:	e9d0 420c 	ldrd	r4, r2, [r0, #48]	@ 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 80006aa:	b9ef      	cbnz	r7, 80006e8 <HALL_Clear+0x98>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80006ac:	692d      	ldr	r5, [r5, #16]
 80006ae:	43ab      	bics	r3, r5
 80006b0:	6933      	ldr	r3, [r6, #16]
 80006b2:	6924      	ldr	r4, [r4, #16]
 80006b4:	bf0c      	ite	eq
 80006b6:	2501      	moveq	r5, #1
 80006b8:	2500      	movne	r5, #0
 80006ba:	ea31 0303 	bics.w	r3, r1, r3
 80006be:	bf0c      	ite	eq
 80006c0:	2301      	moveq	r3, #1
 80006c2:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 80006ca:	ea32 0404 	bics.w	r4, r2, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80006ce:	bf08      	it	eq
 80006d0:	f043 0301 	orreq.w	r3, r3, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 80006d4:	1e5a      	subs	r2, r3, #1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80006d6:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 80006da:	2a05      	cmp	r2, #5
 80006dc:	d84c      	bhi.n	8000778 <HALL_Clear+0x128>
 80006de:	e8df f002 	tbb	[pc, r2]
 80006e2:	2f28      	.short	0x2f28
 80006e4:	1b443d36 	.word	0x1b443d36
 80006e8:	6936      	ldr	r6, [r6, #16]
 80006ea:	692d      	ldr	r5, [r5, #16]
 80006ec:	43ab      	bics	r3, r5
 80006ee:	6923      	ldr	r3, [r4, #16]
 80006f0:	bf0c      	ite	eq
 80006f2:	2401      	moveq	r4, #1
 80006f4:	2400      	movne	r4, #0
 80006f6:	ea32 0303 	bics.w	r3, r2, r3
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	ea31 0606 	bics.w	r6, r1, r6
 8000704:	bf0c      	ite	eq
 8000706:	2201      	moveq	r2, #1
 8000708:	2200      	movne	r2, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 800070a:	0092      	lsls	r2, r2, #2
 800070c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8000710:	f082 0204 	eor.w	r2, r2, #4
 8000714:	4313      	orrs	r3, r2
 8000716:	e7dd      	b.n	80006d4 <HALL_Clear+0x84>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000718:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800071a:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 800071e:	3b3f      	subs	r3, #63	@ 0x3f
 8000720:	b21b      	sxth	r3, r3
 8000722:	8083      	strh	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
        break;
      }
    }
    /* Reset incremental value */
    pHandle->IncrementElAngle = 0;
 8000724:	2200      	movs	r2, #0
}
 8000726:	bcf0      	pop	{r4, r5, r6, r7}

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000728:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    pHandle->IncrementElAngle = 0;
 800072c:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
}
 8000730:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000732:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000734:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8000738:	333f      	adds	r3, #63	@ 0x3f
 800073a:	b21b      	sxth	r3, r3
 800073c:	8083      	strh	r3, [r0, #4]
        break;
 800073e:	e7f1      	b.n	8000724 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000740:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000742:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8000746:	3b2a      	subs	r3, #42	@ 0x2a
 8000748:	b21b      	sxth	r3, r3
 800074a:	8083      	strh	r3, [r0, #4]
        break;
 800074c:	e7ea      	b.n	8000724 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 800074e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000750:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8000754:	332a      	adds	r3, #42	@ 0x2a
 8000756:	b21b      	sxth	r3, r3
 8000758:	8083      	strh	r3, [r0, #4]
        break;
 800075a:	e7e3      	b.n	8000724 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 800075c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800075e:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8000762:	3b15      	subs	r3, #21
 8000764:	b21b      	sxth	r3, r3
 8000766:	8083      	strh	r3, [r0, #4]
        break;
 8000768:	e7dc      	b.n	8000724 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 800076a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800076c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8000770:	3315      	adds	r3, #21
 8000772:	b21b      	sxth	r3, r3
 8000774:	8083      	strh	r3, [r0, #4]
        break;
 8000776:	e7d5      	b.n	8000724 <HALL_Clear+0xd4>
        pHandle->SensorIsReliable = false;
 8000778:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800077a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 800077e:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
        break;
 8000782:	e7cf      	b.n	8000724 <HALL_Clear+0xd4>

08000784 <HALL_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000784:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8000788:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800078c:	428a      	cmp	r2, r1
{
 800078e:	4603      	mov	r3, r0
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 8000790:	8880      	ldrh	r0, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000792:	d02b      	beq.n	80007ec <HALL_CalcElAngle+0x68>
{
 8000794:	b530      	push	{r4, r5, lr}
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000796:	fa1f fe82 	uxth.w	lr, r2
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800079a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800079e:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 80007a2:	f8b3 40b0 	ldrh.w	r4, [r3, #176]	@ 0xb0
 80007a6:	4472      	add	r2, lr
 80007a8:	b292      	uxth	r2, r2
 80007aa:	18a1      	adds	r1, r4, r2
 80007ac:	b209      	sxth	r1, r1
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 80007ae:	f642 2ca9 	movw	ip, #10921	@ 0x2aa9
 80007b2:	4561      	cmp	r1, ip
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80007b4:	f8a3 10b0 	strh.w	r1, [r3, #176]	@ 0xb0
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 80007b8:	dd0a      	ble.n	80007d0 <HALL_CalcElAngle+0x4c>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 80007ba:	4484      	add	ip, r0
 80007bc:	ebac 0c04 	sub.w	ip, ip, r4
 80007c0:	fa0f f08c 	sxth.w	r0, ip
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80007c4:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 80007c8:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80007ca:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
}
 80007ce:	bd30      	pop	{r4, r5, pc}
      else if (pHandle->IncrementElAngle <= -S16_60_PHASE_SHIFT)
 80007d0:	4d0e      	ldr	r5, [pc, #56]	@ (800080c <HALL_CalcElAngle+0x88>)
 80007d2:	42a9      	cmp	r1, r5
 80007d4:	da10      	bge.n	80007f8 <HALL_CalcElAngle+0x74>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80007d6:	f5a0 502a 	sub.w	r0, r0, #10880	@ 0x2a80
 80007da:	3829      	subs	r0, #41	@ 0x29
 80007dc:	1b00      	subs	r0, r0, r4
 80007de:	b200      	sxth	r0, r0
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80007e0:	f24d 5256 	movw	r2, #54614	@ 0xd556
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80007e4:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80007e6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
}
 80007ea:	bd30      	pop	{r4, r5, pc}
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80007ec:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 80007f0:	4410      	add	r0, r2
 80007f2:	b200      	sxth	r0, r0
 80007f4:	8098      	strh	r0, [r3, #4]
}
 80007f6:	4770      	bx	lr
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80007f8:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	@ 0xae
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80007fc:	4402      	add	r2, r0
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80007fe:	448e      	add	lr, r1
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000800:	b210      	sxth	r0, r2
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000802:	f8a3 e0ae 	strh.w	lr, [r3, #174]	@ 0xae
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000806:	8098      	strh	r0, [r3, #4]
}
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	bf00      	nop
 800080c:	ffffd557 	.word	0xffffd557

08000810 <HALL_CalcAvrgMecSpeedUnit>:
{
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4604      	mov	r4, r0
    if (pHandle->SensorIsReliable)
 8000814:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000818:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 800081a:	460d      	mov	r5, r1
    if (pHandle->SensorIsReliable)
 800081c:	b180      	cbz	r0, 8000840 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800081e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8000820:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	@ 0xb4
 8000824:	429a      	cmp	r2, r3
 8000826:	d812      	bhi.n	800084e <HALL_CalcAvrgMecSpeedUnit+0x3e>
        pHandle->_Super.hElSpeedDpp = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	81e3      	strh	r3, [r4, #14]
              pHandle->CompSpeed = 0;
 800082c:	2300      	movs	r3, #0
        *hMecSpeedUnit = 0;
 800082e:	802b      	strh	r3, [r5, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8000830:	4629      	mov	r1, r5
 8000832:	4620      	mov	r0, r4
 8000834:	f005 fdba 	bl	80063ac <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000838:	f9b5 3000 	ldrsh.w	r3, [r5]
 800083c:	81a3      	strh	r3, [r4, #12]
}
 800083e:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8000840:	78e3      	ldrb	r3, [r4, #3]
 8000842:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8000844:	4603      	mov	r3, r0
      pHandle->_Super.hElSpeedDpp = 0;
 8000846:	81e0      	strh	r0, [r4, #14]
      *hMecSpeedUnit = 0;
 8000848:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800084a:	81a3      	strh	r3, [r4, #12]
}
 800084c:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800084e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	@ 0xa8
 8000852:	81e2      	strh	r2, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8000854:	2a00      	cmp	r2, #0
 8000856:	d0e9      	beq.n	800082c <HALL_CalcAvrgMecSpeedUnit+0x1c>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000858:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800085c:	429a      	cmp	r2, r3
 800085e:	d01f      	beq.n	80008a0 <HALL_CalcAvrgMecSpeedUnit+0x90>
            if (true == pHandle->HallMtpa)
 8000860:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8000864:	b9d3      	cbnz	r3, 800089c <HALL_CalcAvrgMecSpeedUnit+0x8c>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000866:	88a3      	ldrh	r3, [r4, #4]
 8000868:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	@ 0xae
 800086c:	1ac9      	subs	r1, r1, r3
 800086e:	b209      	sxth	r1, r1
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000870:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	@ 0xc8
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000874:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000878:	fb91 f1f3 	sdiv	r1, r1, r3
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800087c:	8b63      	ldrh	r3, [r4, #26]
 800087e:	f8a4 10b2 	strh.w	r1, [r4, #178]	@ 0xb2
 8000882:	fb02 f303 	mul.w	r3, r2, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000886:	69e1      	ldr	r1, [r4, #28]
 8000888:	7862      	ldrb	r2, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 800088a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800088e:	005b      	lsls	r3, r3, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000890:	fb01 f202 	mul.w	r2, r1, r2
 8000894:	fb93 f3f2 	sdiv	r3, r3, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8000898:	b21b      	sxth	r3, r3
 800089a:	e7c8      	b.n	800082e <HALL_CalcAvrgMecSpeedUnit+0x1e>
              pHandle->CompSpeed = 0;
 800089c:	2100      	movs	r1, #0
 800089e:	e7ed      	b.n	800087c <HALL_CalcAvrgMecSpeedUnit+0x6c>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 80008a0:	f9b4 30b6 	ldrsh.w	r3, [r4, #182]	@ 0xb6
 80008a4:	e7c3      	b.n	800082e <HALL_CalcAvrgMecSpeedUnit+0x1e>
 80008a6:	bf00      	nop

080008a8 <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 80008a8:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d04f      	beq.n	8000950 <HALL_TIMx_CC_IRQHandler+0xa8>
{
 80008b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (DEGREES_120 == pHandle->SensorPlacement)
 80008b4:	f890 8020 	ldrb.w	r8, [r0, #32]
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80008b8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
    bPrevHallState = pHandle->HallState;
 80008ba:	f890 20aa 	ldrb.w	r2, [r0, #170]	@ 0xaa
    PrevDirection = pHandle->Direction;
 80008be:	f990 c0a6 	ldrsb.w	ip, [r0, #166]	@ 0xa6
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80008c2:	f8d0 e038 	ldr.w	lr, [r0, #56]	@ 0x38
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80008c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80008c8:	e9d0 470f 	ldrd	r4, r7, [r0, #60]	@ 0x3c
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80008cc:	e9d0 650c 	ldrd	r6, r5, [r0, #48]	@ 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 80008d0:	f1b8 0f00 	cmp.w	r8, #0
 80008d4:	d026      	beq.n	8000924 <HALL_TIMx_CC_IRQHandler+0x7c>
 80008d6:	f8de e010 	ldr.w	lr, [lr, #16]
 80008da:	693f      	ldr	r7, [r7, #16]
 80008dc:	43bb      	bics	r3, r7
 80008de:	6933      	ldr	r3, [r6, #16]
 80008e0:	bf0c      	ite	eq
 80008e2:	2601      	moveq	r6, #1
 80008e4:	2600      	movne	r6, #0
 80008e6:	ea35 0303 	bics.w	r3, r5, r3
 80008ea:	bf0c      	ite	eq
 80008ec:	2301      	moveq	r3, #1
 80008ee:	2300      	movne	r3, #0
 80008f0:	ea34 0e0e 	bics.w	lr, r4, lr
 80008f4:	bf0c      	ite	eq
 80008f6:	f04f 0e01 	moveq.w	lr, #1
 80008fa:	f04f 0e00 	movne.w	lr, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80008fe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000902:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 8000906:	f08e 0e04 	eor.w	lr, lr, #4
 800090a:	ea43 030e 	orr.w	r3, r3, lr
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800090e:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 8000912:	3b01      	subs	r3, #1
 8000914:	2b05      	cmp	r3, #5
 8000916:	f200 815d 	bhi.w	8000bd4 <HALL_TIMx_CC_IRQHandler+0x32c>
 800091a:	e8df f003 	tbb	[pc, r3]
 800091e:	556e      	.short	0x556e
 8000920:	1b2b3a46 	.word	0x1b2b3a46
 8000924:	693f      	ldr	r7, [r7, #16]
 8000926:	43bb      	bics	r3, r7
 8000928:	f8de 3010 	ldr.w	r3, [lr, #16]
 800092c:	6936      	ldr	r6, [r6, #16]
 800092e:	bf0c      	ite	eq
 8000930:	2701      	moveq	r7, #1
 8000932:	2700      	movne	r7, #0
 8000934:	ea34 0303 	bics.w	r3, r4, r3
 8000938:	bf0c      	ite	eq
 800093a:	2301      	moveq	r3, #1
 800093c:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	ea35 0606 	bics.w	r6, r5, r6
 8000944:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000948:	bf08      	it	eq
 800094a:	f043 0301 	orreq.w	r3, r3, #1
 800094e:	e7de      	b.n	800090e <HALL_TIMx_CC_IRQHandler+0x66>
}
 8000950:	2000      	movs	r0, #0
 8000952:	4770      	bx	lr
        if (STATE_2 == bPrevHallState)
 8000954:	2a02      	cmp	r2, #2
 8000956:	f000 808f 	beq.w	8000a78 <HALL_TIMx_CC_IRQHandler+0x1d0>
        else if (STATE_4 == bPrevHallState)
 800095a:	2a04      	cmp	r2, #4
 800095c:	d152      	bne.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800095e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000960:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8000964:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8000966:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8000968:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800096c:	b21b      	sxth	r3, r3
 800096e:	f04f 32ff 	mov.w	r2, #4294967295
 8000972:	e037      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_4 == bPrevHallState)
 8000974:	2a04      	cmp	r2, #4
 8000976:	d079      	beq.n	8000a6c <HALL_TIMx_CC_IRQHandler+0x1c4>
        else if (STATE_1 == bPrevHallState)
 8000978:	2a01      	cmp	r2, #1
 800097a:	d143      	bne.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800097c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800097e:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8000982:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8000984:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8000986:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800098a:	b21b      	sxth	r3, r3
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	e028      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_6 == bPrevHallState)
 8000992:	2a06      	cmp	r2, #6
 8000994:	d061      	beq.n	8000a5a <HALL_TIMx_CC_IRQHandler+0x1b2>
        else if (STATE_5 == bPrevHallState)
 8000996:	2a05      	cmp	r2, #5
 8000998:	d134      	bne.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->Direction = NEGATIVE;
 800099a:	22ff      	movs	r2, #255	@ 0xff
 800099c:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 80009a0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	e01c      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_1 == bPrevHallState)
 80009aa:	2a01      	cmp	r2, #1
 80009ac:	d04d      	beq.n	8000a4a <HALL_TIMx_CC_IRQHandler+0x1a2>
        else if (STATE_2 == bPrevHallState)
 80009ae:	2a02      	cmp	r2, #2
 80009b0:	d128      	bne.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80009b2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80009b4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 80009b8:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80009ba:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 80009bc:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	e00d      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_3 == bPrevHallState)
 80009c8:	2a03      	cmp	r2, #3
 80009ca:	d035      	beq.n	8000a38 <HALL_TIMx_CC_IRQHandler+0x190>
        else if (STATE_6 == bPrevHallState)
 80009cc:	2a06      	cmp	r2, #6
 80009ce:	d119      	bne.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80009d0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80009d2:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 80009d6:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80009d8:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 80009da:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80009de:	b21b      	sxth	r3, r3
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
    if (pHandle->Direction != PrevDirection)
 80009e4:	4594      	cmp	ip, r2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80009e6:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    if (pHandle->Direction != PrevDirection)
 80009ea:	d004      	beq.n	80009f6 <HALL_TIMx_CC_IRQHandler+0x14e>
      pHandle->BufferFilled = 0U ;
 80009ec:	2400      	movs	r4, #0
 80009ee:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
      pHandle->SpeedFIFOIdx = 0U;
 80009f2:	f880 409c 	strb.w	r4, [r0, #156]	@ 0x9c
 80009f6:	4694      	mov	ip, r2
 80009f8:	e006      	b.n	8000a08 <HALL_TIMx_CC_IRQHandler+0x160>
        if (STATE_5 == bPrevHallState)
 80009fa:	2a05      	cmp	r2, #5
 80009fc:	d045      	beq.n	8000a8a <HALL_TIMx_CC_IRQHandler+0x1e2>
        else if (STATE_3 == bPrevHallState)
 80009fe:	2a03      	cmp	r2, #3
 8000a00:	f000 80dd 	beq.w	8000bbe <HALL_TIMx_CC_IRQHandler+0x316>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8000a04:	f9b0 30ae 	ldrsh.w	r3, [r0, #174]	@ 0xae
    if (true == pHandle->HallMtpa)
 8000a08:	f890 20cb 	ldrb.w	r2, [r0, #203]	@ 0xcb
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	f040 80a1 	bne.w	8000b54 <HALL_TIMx_CC_IRQHandler+0x2ac>
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 8000a12:	8882      	ldrh	r2, [r0, #4]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b21b      	sxth	r3, r3
    if (0U == pHandle->FirstCapt)
 8000a18:	f890 204f 	ldrb.w	r2, [r0, #79]	@ 0x4f
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 8000a1c:	f8a0 30b0 	strh.w	r3, [r0, #176]	@ 0xb0
    if (0U == pHandle->FirstCapt)
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d13b      	bne.n	8000a9c <HALL_TIMx_CC_IRQHandler+0x1f4>
      pHandle->FirstCapt++;
 8000a24:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 8000a28:	3301      	adds	r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8000a30:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
}
 8000a32:	2000      	movs	r0, #0
 8000a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8000a38:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000a3a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 8000a3e:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8000a40:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 8000a42:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	e7cc      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8000a4a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8000a4c:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8000a50:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8000a54:	3355      	adds	r3, #85	@ 0x55
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	e7c4      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8000a5a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000a5c:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8000a60:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8000a62:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8000a64:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	e7bb      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->Direction = POSITIVE;
 8000a6c:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8000a6e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8000a72:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8000a76:	e7b5      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8000a78:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000a7a:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 8000a7e:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8000a80:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 8000a82:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	e7ac      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8000a8a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000a8c:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8000a90:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8000a92:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8000a94:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	e7a3      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8000a9c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8000aa0:	f890 e026 	ldrb.w	lr, [r0, #38]	@ 0x26
 8000aa4:	4573      	cmp	r3, lr
 8000aa6:	d205      	bcs.n	8000ab4 <HALL_TIMx_CC_IRQHandler+0x20c>
        pHandle->BufferFilled++;
 8000aa8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8000aac:	3301      	adds	r3, #1
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 8000ab4:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000ab6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8000ab8:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
      if (pHandle->OVFCounter != 0U)
 8000abc:	f890 4051 	ldrb.w	r4, [r0, #81]	@ 0x51
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8000ac0:	041b      	lsls	r3, r3, #16
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 8000ac2:	b292      	uxth	r2, r2
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 8000ac4:	fa13 f385 	uxtah	r3, r3, r5
      if (pHandle->OVFCounter != 0U)
 8000ac8:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d044      	beq.n	8000b5a <HALL_TIMx_CC_IRQHandler+0x2b2>
        hAux = hPrscBuf + 1U;
 8000ad0:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
        if (pHandle->RatioInc)
 8000ad8:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
 8000adc:	2a00      	cmp	r2, #0
 8000ade:	d046      	beq.n	8000b6e <HALL_TIMx_CC_IRQHandler+0x2c6>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
      if (wCaptBuf < pHandle->MinPeriod)
 8000ae6:	f8d0 20c0 	ldr.w	r2, [r0, #192]	@ 0xc0
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d82c      	bhi.n	8000b48 <HALL_TIMx_CC_IRQHandler+0x2a0>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8000aee:	f890 209c 	ldrb.w	r2, [r0, #156]	@ 0x9c
        if (wCaptBuf >= pHandle->MaxPeriod)
 8000af2:	f8d0 40bc 	ldr.w	r4, [r0, #188]	@ 0xbc
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8000af6:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 8000afa:	eb00 0682 	add.w	r6, r0, r2, lsl #2
        if (wCaptBuf >= pHandle->MaxPeriod)
 8000afe:	429c      	cmp	r4, r3
        pHandle->SpeedFIFOIdx++;
 8000b00:	f102 0201 	add.w	r2, r2, #1
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8000b04:	6d75      	ldr	r5, [r6, #84]	@ 0x54
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8000b06:	bf94      	ite	ls
 8000b08:	fb0c f404 	mulls.w	r4, ip, r4
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8000b0c:	fb0c f403 	mulhi.w	r4, ip, r3
        pHandle->SpeedFIFOIdx++;
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	6574      	str	r4, [r6, #84]	@ 0x54
          pHandle->SpeedFIFOIdx = 0U;
 8000b14:	4596      	cmp	lr, r2
 8000b16:	bf08      	it	eq
 8000b18:	2200      	moveq	r2, #0
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8000b1a:	1b49      	subs	r1, r1, r5
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8000b1c:	f880 209c 	strb.w	r2, [r0, #156]	@ 0x9c
        if (pHandle->SensorIsReliable)
 8000b20:	f890 204c 	ldrb.w	r2, [r0, #76]	@ 0x4c
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8000b24:	4421      	add	r1, r4
 8000b26:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
        if (pHandle->SensorIsReliable)
 8000b2a:	b362      	cbz	r2, 8000b86 <HALL_TIMx_CC_IRQHandler+0x2de>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8000b2c:	f890 4050 	ldrb.w	r4, [r0, #80]	@ 0x50
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8000b30:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d93b      	bls.n	8000bb0 <HALL_TIMx_CC_IRQHandler+0x308>
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d039      	beq.n	8000bb0 <HALL_TIMx_CC_IRQHandler+0x308>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	fb0c f303 	mul.w	r3, ip, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8000b44:	f8a0 30a8 	strh.w	r3, [r0, #168]	@ 0xa8
      pHandle->OVFCounter = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8000b54:	8083      	strh	r3, [r0, #4]
 8000b56:	2300      	movs	r3, #0
 8000b58:	e75e      	b.n	8000a18 <HALL_TIMx_CC_IRQHandler+0x170>
        if (pHandle->RatioDec) /* and don't decrease it again */
 8000b5a:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
 8000b5e:	b1ac      	cbz	r4, 8000b8c <HALL_TIMx_CC_IRQHandler+0x2e4>
          hAux = hPrscBuf + 2U;
 8000b60:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8000b62:	b292      	uxth	r2, r2
          pHandle->RatioDec = false;
 8000b64:	f880 604d 	strb.w	r6, [r0, #77]	@ 0x4d
          wCaptBuf *= hAux;
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
          pHandle->RatioDec = false;
 8000b6c:	e7bb      	b.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
 8000b6e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 8000b70:	f8b0 40b4 	ldrh.w	r4, [r0, #180]	@ 0xb4
 8000b74:	4294      	cmp	r4, r2
 8000b76:	d9b6      	bls.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
 8000b78:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8000b7a:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8000b7c:	628a      	str	r2, [r1, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 8000b84:	e7af      	b.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
          pHandle->AvrElSpeedDpp = 0;
 8000b86:	f8a0 20a8 	strh.w	r2, [r0, #168]	@ 0xa8
 8000b8a:	e7dd      	b.n	8000b48 <HALL_TIMx_CC_IRQHandler+0x2a0>
          uint16_t hAux = hPrscBuf + 1U;
 8000b8c:	3201      	adds	r2, #1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8000b8e:	b2ad      	uxth	r5, r5
          wCaptBuf *= hAux;
 8000b90:	b292      	uxth	r2, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8000b92:	f5b5 4faa 	cmp.w	r5, #21760	@ 0x5500
          wCaptBuf *= hAux;
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8000b9a:	d2a4      	bcs.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000b9c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d0a1      	beq.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
 8000ba2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 8000ba4:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8000ba6:	628a      	str	r2, [r1, #40]	@ 0x28
              pHandle->RatioDec = true;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f880 204d 	strb.w	r2, [r0, #77]	@ 0x4d
 8000bae:	e79a      	b.n	8000ae6 <HALL_TIMx_CC_IRQHandler+0x23e>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 8000bb0:	fb91 f1fe 	sdiv	r1, r1, lr
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 8000bb4:	fb92 f2f1 	sdiv	r2, r2, r1
 8000bb8:	f8a0 20a8 	strh.w	r2, [r0, #168]	@ 0xa8
 8000bbc:	e7c4      	b.n	8000b48 <HALL_TIMx_CC_IRQHandler+0x2a0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8000bbe:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000bc0:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 8000bc4:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8000bc6:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 8000bc8:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	e707      	b.n	80009e4 <HALL_TIMx_CC_IRQHandler+0x13c>
        pHandle->SensorIsReliable = false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        break;
 8000bda:	e713      	b.n	8000a04 <HALL_TIMx_CC_IRQHandler+0x15c>

08000bdc <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8000bdc:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8000be0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if (pHandle->SensorIsReliable)
 8000be2:	b1db      	cbz	r3, 8000c1c <HALL_TIMx_UP_IRQHandler+0x40>
{
 8000be4:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 8000be6:	f890 2051 	ldrb.w	r2, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8000bea:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	@ 0xc4
    pHandle->OVFCounter++;
 8000bee:	3201      	adds	r2, #1
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	f880 2051 	strb.w	r2, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8000bf6:	f8b0 20c6 	ldrh.w	r2, [r0, #198]	@ 0xc6
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000bfa:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8000bfc:	f890 1051 	ldrb.w	r1, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 8000c00:	fb02 f303 	mul.w	r3, r2, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 8000c04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c08:	fb04 2202 	mla	r2, r4, r2, r2
 8000c0c:	fbb3 f3f2 	udiv	r3, r3, r2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d204      	bcs.n	8000c20 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8000c16:	2000      	movs	r0, #0
 8000c18:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	4770      	bx	lr
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000c20:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000c24:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	81c3      	strh	r3, [r0, #14]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000c2a:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	@ 0x38
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000c2e:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	@ 0x30
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000c32:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000c34:	b9ef      	cbnz	r7, 8000c72 <HALL_TIMx_UP_IRQHandler+0x96>
 8000c36:	692d      	ldr	r5, [r5, #16]
 8000c38:	43ab      	bics	r3, r5
 8000c3a:	6933      	ldr	r3, [r6, #16]
 8000c3c:	6924      	ldr	r4, [r4, #16]
 8000c3e:	bf0c      	ite	eq
 8000c40:	2501      	moveq	r5, #1
 8000c42:	2500      	movne	r5, #0
 8000c44:	ea32 0303 	bics.w	r3, r2, r3
 8000c48:	bf0c      	ite	eq
 8000c4a:	2301      	moveq	r3, #1
 8000c4c:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8000c54:	ea31 0404 	bics.w	r4, r1, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000c58:	bf08      	it	eq
 8000c5a:	f043 0301 	orreq.w	r3, r3, #1
    switch (pHandle->HallState)
 8000c5e:	1e5a      	subs	r2, r3, #1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000c60:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 8000c64:	2a05      	cmp	r2, #5
 8000c66:	d869      	bhi.n	8000d3c <HALL_TIMx_UP_IRQHandler+0x160>
 8000c68:	e8df f002 	tbb	[pc, r2]
 8000c6c:	4c535a61 	.word	0x4c535a61
 8000c70:	1b45      	.short	0x1b45
 8000c72:	6936      	ldr	r6, [r6, #16]
 8000c74:	692d      	ldr	r5, [r5, #16]
 8000c76:	43ab      	bics	r3, r5
 8000c78:	6923      	ldr	r3, [r4, #16]
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2401      	moveq	r4, #1
 8000c7e:	2400      	movne	r4, #0
 8000c80:	ea31 0303 	bics.w	r3, r1, r3
 8000c84:	bf0c      	ite	eq
 8000c86:	2301      	moveq	r3, #1
 8000c88:	2300      	movne	r3, #0
 8000c8a:	ea32 0606 	bics.w	r6, r2, r6
 8000c8e:	bf0c      	ite	eq
 8000c90:	2201      	moveq	r2, #1
 8000c92:	2200      	movne	r2, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8000c9a:	f082 0204 	eor.w	r2, r2, #4
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	e7dd      	b.n	8000c5e <HALL_TIMx_UP_IRQHandler+0x82>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000ca2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000ca4:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8000ca8:	3b3f      	subs	r3, #63	@ 0x3f
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	8083      	strh	r3, [r0, #4]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8000cae:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8000cb2:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000cb6:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    pHandle->IncrementElAngle = 0;
 8000cba:	2100      	movs	r1, #0
      pHandle->OVFCounter = 0U;
 8000cbc:	f880 1051 	strb.w	r1, [r0, #81]	@ 0x51
    pHandle->IncrementElAngle = 0;
 8000cc0:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
      pHandle->FirstCapt = 0U;
 8000cc4:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8000cc8:	b14c      	cbz	r4, 8000cde <HALL_TIMx_UP_IRQHandler+0x102>
 8000cca:	f100 0350 	add.w	r3, r0, #80	@ 0x50
 8000cce:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000cd2:	f843 2f04 	str.w	r2, [r3, #4]!
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d1fb      	bne.n	8000cd2 <HALL_TIMx_UP_IRQHandler+0xf6>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8000cda:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0U ;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      pHandle->SpeedFIFOIdx = 0U;
 8000ce4:	f880 309c 	strb.w	r3, [r0, #156]	@ 0x9c
      pHandle->ElPeriodSum = (int32_t)tempReg;
 8000ce8:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
      pHandle->AvrElSpeedDpp = 0;
 8000cec:	f8a0 30a8 	strh.w	r3, [r0, #168]	@ 0xa8
}
 8000cf0:	bcf0      	pop	{r4, r5, r6, r7}
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000cf6:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000cf8:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8000cfc:	3315      	adds	r3, #21
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	8083      	strh	r3, [r0, #4]
        break;
 8000d02:	e7d4      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000d04:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000d06:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8000d0a:	3b15      	subs	r3, #21
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	8083      	strh	r3, [r0, #4]
        break;
 8000d10:	e7cd      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000d12:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000d14:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8000d18:	332a      	adds	r3, #42	@ 0x2a
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	8083      	strh	r3, [r0, #4]
        break;
 8000d1e:	e7c6      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000d20:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000d22:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8000d26:	3b2a      	subs	r3, #42	@ 0x2a
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	8083      	strh	r3, [r0, #4]
        break;
 8000d2c:	e7bf      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000d2e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000d30:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8000d34:	333f      	adds	r3, #63	@ 0x3f
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	8083      	strh	r3, [r0, #4]
        break;
 8000d3a:	e7b8      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->SensorIsReliable = false;
 8000d3c:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000d3e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8000d42:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
        break;
 8000d46:	e7b2      	b.n	8000cae <HALL_TIMx_UP_IRQHandler+0xd2>

08000d48 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000d48:	b510      	push	{r4, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d4a:	481c      	ldr	r0, [pc, #112]	@ (8000dbc <MX_I2C3_Init+0x74>)
 8000d4c:	4c1c      	ldr	r4, [pc, #112]	@ (8000dc0 <MX_I2C3_Init+0x78>)
  hi2c3.Init.Timing = 0x00C20F26;
 8000d4e:	491d      	ldr	r1, [pc, #116]	@ (8000dc4 <MX_I2C3_Init+0x7c>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	2201      	movs	r2, #1
 8000d54:	e9c0 4100 	strd	r4, r1, [r0]
 8000d58:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8000d5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d60:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8000d64:	6203      	str	r3, [r0, #32]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d66:	f003 fba5 	bl	80044b4 <HAL_I2C_Init>
 8000d6a:	b978      	cbnz	r0, 8000d8c <MX_I2C3_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <MX_I2C3_Init+0x74>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f003 fbfa 	bl	8004568 <HAL_I2CEx_ConfigAnalogFilter>
 8000d74:	b990      	cbnz	r0, 8000d9c <MX_I2C3_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d76:	4811      	ldr	r0, [pc, #68]	@ (8000dbc <MX_I2C3_Init+0x74>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	f003 fc1f 	bl	80045bc <HAL_I2CEx_ConfigDigitalFilter>
 8000d7e:	b9a8      	cbnz	r0, 8000dac <MX_I2C3_Init+0x64>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8000d84:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000d88:	f003 bc44 	b.w	8004614 <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
 8000d8c:	f000 f8fe 	bl	8000f8c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d90:	480a      	ldr	r0, [pc, #40]	@ (8000dbc <MX_I2C3_Init+0x74>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	f003 fbe8 	bl	8004568 <HAL_I2CEx_ConfigAnalogFilter>
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d0ec      	beq.n	8000d76 <MX_I2C3_Init+0x2e>
    Error_Handler();
 8000d9c:	f000 f8f6 	bl	8000f8c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000da0:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_I2C3_Init+0x74>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	f003 fc0a 	bl	80045bc <HAL_I2CEx_ConfigDigitalFilter>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d0e9      	beq.n	8000d80 <MX_I2C3_Init+0x38>
    Error_Handler();
 8000dac:	f000 f8ee 	bl	8000f8c <Error_Handler>
}
 8000db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8000db4:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000db8:	f003 bc2c 	b.w	8004614 <HAL_I2CEx_EnableFastModePlus>
 8000dbc:	200003a8 	.word	0x200003a8
 8000dc0:	40007800 	.word	0x40007800
 8000dc4:	00c20f26 	.word	0x00c20f26

08000dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000dc8:	b510      	push	{r4, lr}
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b098      	sub	sp, #96	@ 0x60

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	2244      	movs	r2, #68	@ 0x44
 8000dd2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000dd8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000ddc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dde:	f005 fe93 	bl	8006b08 <memset>
  if(i2cHandle->Instance==I2C3)
 8000de2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e50 <HAL_I2C_MspInit+0x88>)
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d001      	beq.n	8000dee <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000dea:	b018      	add	sp, #96	@ 0x60
 8000dec:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000df4:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df6:	f004 f89d 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	bb10      	cbnz	r0, 8000e42 <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4c15      	ldr	r4, [pc, #84]	@ (8000e54 <HAL_I2C_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	4816      	ldr	r0, [pc, #88]	@ (8000e58 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000e08:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8000e0a:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8000e48 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000e14:	2308      	movs	r3, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000e18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GD_SCL_Pin|GD_SDA_Pin;
 8000e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000e24:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f003 f980 	bl	800412c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000e32:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000e36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	9b01      	ldr	r3, [sp, #4]
}
 8000e3e:	b018      	add	sp, #96	@ 0x60
 8000e40:	bd10      	pop	{r4, pc}
      Error_Handler();
 8000e42:	f000 f8a3 	bl	8000f8c <Error_Handler>
 8000e46:	e7d9      	b.n	8000dfc <HAL_I2C_MspInit+0x34>
 8000e48:	00000300 	.word	0x00000300
 8000e4c:	00000012 	.word	0x00000012
 8000e50:	40007800 	.word	0x40007800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000800 	.word	0x48000800
 8000e5c:	00000000 	.word	0x00000000

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b510      	push	{r4, lr}
 8000e62:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e64:	2238      	movs	r2, #56	@ 0x38
 8000e66:	2100      	movs	r1, #0
 8000e68:	a806      	add	r0, sp, #24
 8000e6a:	f005 fe4d 	bl	8006b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6e:	2000      	movs	r0, #0
 8000e70:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000e74:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000e78:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e7a:	f003 fc59 	bl	8004730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e7e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000ed0 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 28;
 8000e84:	221c      	movs	r2, #28
 8000e86:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e8a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000e8c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e90:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e94:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000e98:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e9c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f003 fcc1 	bl	8004824 <HAL_RCC_OscConfig>
 8000ea2:	b108      	cbz	r0, 8000ea8 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eac:	e9cd 1401 	strd	r1, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb4:	a801      	add	r0, sp, #4
 8000eb6:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ebe:	f003 ff2f 	bl	8004d20 <HAL_RCC_ClockConfig>
 8000ec2:	b108      	cbz	r0, 8000ec8 <SystemClock_Config+0x68>
 8000ec4:	b672      	cpsid	i
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <SystemClock_Config+0x66>
}
 8000ec8:	b014      	add	sp, #80	@ 0x50
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	00000001 	.word	0x00000001
 8000ed4:	00010000 	.word	0x00010000

08000ed8 <main>:
{
 8000ed8:	b508      	push	{r3, lr}
  HAL_Init();
 8000eda:	f002 fb7f 	bl	80035dc <HAL_Init>
  SystemClock_Config();
 8000ede:	f7ff ffbf 	bl	8000e60 <SystemClock_Config>
  MX_GPIO_Init();
 8000ee2:	f7ff fa91 	bl	8000408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee6:	f7ff fa77 	bl	80003d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eea:	f7ff f9bf 	bl	800026c <MX_ADC1_Init>
  MX_CORDIC_Init();
 8000eee:	f7ff fa4d 	bl	800038c <MX_CORDIC_Init>
  MX_I2C3_Init();
 8000ef2:	f7ff ff29 	bl	8000d48 <MX_I2C3_Init>
  MX_OPAMP1_Init();
 8000ef6:	f000 fd1f 	bl	8001938 <MX_OPAMP1_Init>
  MX_TIM1_Init();
 8000efa:	f002 f87b 	bl	8002ff4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000efe:	f002 f94d 	bl	800319c <MX_TIM4_Init>
  MX_MotorControl_Init();
 8000f02:	f000 fcfb 	bl	80018fc <MX_MotorControl_Init>
  MX_USART3_UART_Init();
 8000f06:	f002 faa3 	bl	8003450 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000f0a:	f002 fa03 	bl	8003314 <MX_USART2_UART_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4611      	mov	r1, r2
 8000f12:	200b      	movs	r0, #11
 8000f14:	f003 f80e 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f18:	200b      	movs	r0, #11
 8000f1a:	f003 f847 	bl	8003fac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	2012      	movs	r0, #18
 8000f24:	f003 f806 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f28:	2012      	movs	r0, #18
 8000f2a:	f003 f83f 	bl	8003fac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2104      	movs	r1, #4
 8000f32:	2018      	movs	r0, #24
 8000f34:	f002 fffe 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f38:	2018      	movs	r0, #24
 8000f3a:	f003 f837 	bl	8003fac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4611      	mov	r1, r2
 8000f42:	2019      	movs	r0, #25
 8000f44:	f002 fff6 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f48:	2019      	movs	r0, #25
 8000f4a:	f003 f82f 	bl	8003fac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2103      	movs	r1, #3
 8000f52:	201e      	movs	r0, #30
 8000f54:	f002 ffee 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f58:	201e      	movs	r0, #30
 8000f5a:	f003 f827 	bl	8003fac <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2103      	movs	r1, #3
 8000f62:	2028      	movs	r0, #40	@ 0x28
 8000f64:	f002 ffe6 	bl	8003f34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f68:	2028      	movs	r0, #40	@ 0x28
 8000f6a:	f003 f81f 	bl	8003fac <HAL_NVIC_EnableIRQ>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f6e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8000f72:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8000f76:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8000f7a:	f043 0320 	orr.w	r3, r3, #32
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f7e:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8000f82:	e840 3100 	strex	r1, r3, [r0]
 8000f86:	2900      	cmp	r1, #0
 8000f88:	d1f3      	bne.n	8000f72 <main+0x9a>
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <main+0xb2>

08000f8c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <Error_Handler+0x2>

08000f90 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8000f90:	4b01      	ldr	r3, [pc, #4]	@ (8000f98 <MC_StartMotor1+0x8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f000 b86a 	b.w	800106c <MCI_StartMotor>
 8000f98:	20000438 	.word	0x20000438

08000f9c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8000f9c:	4b01      	ldr	r3, [pc, #4]	@ (8000fa4 <MC_StopMotor1+0x8>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f000 b87a 	b.w	8001098 <MCI_StopMotor>
 8000fa4:	20000438 	.word	0x20000438

08000fa8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8000fa8:	4b01      	ldr	r3, [pc, #4]	@ (8000fb0 <MC_GetSTMStateMotor1+0x8>)
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f000 b858 	b.w	8001060 <MCI_GetSTMState>
 8000fb0:	20000438 	.word	0x20000438

08000fb4 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000fbc:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000fc0:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8000fc4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8000fc8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8000fca:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000fcc:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000fce:	4770      	bx	lr

08000fd0 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000fd0:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8000fd2:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8000fdc:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8000fe0:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8000fe2:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000fe8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d000      	beq.n	8000ff2 <MCI_ExecBufferedCommands+0xa>
 8000ff0:	4770      	bx	lr
{
 8000ff2:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8000ff4:	7b02      	ldrb	r2, [r0, #12]
 8000ff6:	2a02      	cmp	r2, #2
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	d021      	beq.n	8001040 <MCI_ExecBufferedCommands+0x58>
 8000ffc:	2a03      	cmp	r2, #3
 8000ffe:	d014      	beq.n	800102a <MCI_ExecBufferedCommands+0x42>
 8001000:	2a01      	cmp	r2, #1
 8001002:	d119      	bne.n	8001038 <MCI_ExecBufferedCommands+0x50>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001004:	6843      	ldr	r3, [r0, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800100c:	6800      	ldr	r0, [r0, #0]
 800100e:	2103      	movs	r1, #3
 8001010:	f005 fa20 	bl	8006454 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001014:	8ba2      	ldrh	r2, [r4, #28]
 8001016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	f005 fa1e 	bl	800645c <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8001020:	b150      	cbz	r0, 8001038 <MCI_ExecBufferedCommands+0x50>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001022:	2302      	movs	r3, #2
 8001024:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001028:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800102a:	6842      	ldr	r2, [r0, #4]
 800102c:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001030:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001034:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001036:	e7f4      	b.n	8001022 <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001038:	2303      	movs	r3, #3
 800103a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800103e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001040:	6843      	ldr	r3, [r0, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001048:	6800      	ldr	r0, [r0, #0]
 800104a:	2104      	movs	r1, #4
 800104c:	f005 fa02 	bl	8006454 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001050:	8ba2      	ldrh	r2, [r4, #28]
 8001052:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	f005 fa00 	bl	800645c <STC_ExecRamp>
          break;
 800105c:	e7e0      	b.n	8001020 <MCI_ExecBufferedCommands+0x38>
 800105e:	bf00      	nop

08001060 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001060:	7fc0      	ldrb	r0, [r0, #31]
 8001062:	4770      	bx	lr

08001064 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001064:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001066:	4770      	bx	lr

08001068 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001068:	8c00      	ldrh	r0, [r0, #32]
 800106a:	4770      	bx	lr

0800106c <MCI_StartMotor>:
{
 800106c:	b510      	push	{r4, lr}
 800106e:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001070:	f7ff fff6 	bl	8001060 <MCI_GetSTMState>
 8001074:	b108      	cbz	r0, 800107a <MCI_StartMotor+0xe>
  bool retVal = false;
 8001076:	2000      	movs	r0, #0
}
 8001078:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fff2 	bl	8001064 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001080:	2800      	cmp	r0, #0
 8001082:	d1f8      	bne.n	8001076 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001084:	4620      	mov	r0, r4
 8001086:	f7ff ffef 	bl	8001068 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800108a:	2800      	cmp	r0, #0
 800108c:	d1f3      	bne.n	8001076 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 800108e:	2001      	movs	r0, #1
 8001090:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001092:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8001096:	bd10      	pop	{r4, pc}

08001098 <MCI_StopMotor>:
{
 8001098:	b538      	push	{r3, r4, r5, lr}
 800109a:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 800109c:	f7ff ffe0 	bl	8001060 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80010a0:	4604      	mov	r4, r0
 80010a2:	b118      	cbz	r0, 80010ac <MCI_StopMotor+0x14>
 80010a4:	f1b0 040c 	subs.w	r4, r0, #12
 80010a8:	bf18      	it	ne
 80010aa:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff ffd9 	bl	8001064 <MCI_GetOccurredFaults>
 80010b2:	b110      	cbz	r0, 80010ba <MCI_StopMotor+0x22>
  bool retVal = false;
 80010b4:	2400      	movs	r4, #0
}
 80010b6:	4620      	mov	r0, r4
 80010b8:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff ffd4 	bl	8001068 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d1f7      	bne.n	80010b4 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80010c4:	2c00      	cmp	r4, #0
 80010c6:	d0f5      	beq.n	80010b4 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 80010c8:	2305      	movs	r3, #5
 80010ca:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 80010cc:	e7f3      	b.n	80010b6 <MCI_StopMotor+0x1e>
 80010ce:	bf00      	nop

080010d0 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80010d0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80010d2:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80010d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80010dc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80010e0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80010e4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80010e8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80010ec:	fb10 f202 	smulbb	r2, r0, r2
 80010f0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80010f4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80010f8:	b084      	sub	sp, #16
 80010fa:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80010fc:	da05      	bge.n	800110a <MCM_Clarke+0x2e>
 80010fe:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001100:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001104:	da0c      	bge.n	8001120 <MCM_Clarke+0x44>
 8001106:	4a09      	ldr	r2, [pc, #36]	@ (800112c <MCM_Clarke+0x50>)
 8001108:	e001      	b.n	800110e <MCM_Clarke+0x32>
 800110a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800110e:	b29b      	uxth	r3, r3
 8001110:	2000      	movs	r0, #0
 8001112:	f363 000f 	bfi	r0, r3, #0, #16
 8001116:	b293      	uxth	r3, r2
 8001118:	f363 401f 	bfi	r0, r3, #16, #16
}
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <MCM_Clarke+0x50>)
 8001122:	b20a      	sxth	r2, r1
 8001124:	4282      	cmp	r2, r0
 8001126:	bfb8      	it	lt
 8001128:	4602      	movlt	r2, r0
 800112a:	e7f0      	b.n	800110e <MCM_Clarke+0x32>
 800112c:	ffff8001 	.word	0xffff8001

08001130 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001132:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001136:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800113a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 800113e:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001140:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001142:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001144:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8001146:	b002      	add	sp, #8
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40020c00 	.word	0x40020c00

08001150 <MCM_Park>:
{
 8001150:	b530      	push	{r4, r5, lr}
 8001152:	4605      	mov	r5, r0
 8001154:	4604      	mov	r4, r0
 8001156:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001158:	4608      	mov	r0, r1
 800115a:	f7ff ffe9 	bl	8001130 <MCM_Trig_Functions>
 800115e:	b22d      	sxth	r5, r5
 8001160:	b201      	sxth	r1, r0
 8001162:	1424      	asrs	r4, r4, #16
 8001164:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001166:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800116a:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800116e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001172:	da05      	bge.n	8001180 <MCM_Park+0x30>
 8001174:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001176:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800117a:	da22      	bge.n	80011c2 <MCM_Park+0x72>
 800117c:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <MCM_Park+0x80>)
 800117e:	e001      	b.n	8001184 <MCM_Park+0x34>
 8001180:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001184:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001188:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 800118c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001190:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001194:	da04      	bge.n	80011a0 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8001196:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800119a:	da0c      	bge.n	80011b6 <MCM_Park+0x66>
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MCM_Park+0x80>)
 800119e:	e001      	b.n	80011a4 <MCM_Park+0x54>
 80011a0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80011a4:	b292      	uxth	r2, r2
 80011a6:	2000      	movs	r0, #0
 80011a8:	f362 000f 	bfi	r0, r2, #0, #16
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	f363 401f 	bfi	r0, r3, #16, #16
}
 80011b2:	b005      	add	sp, #20
 80011b4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80011b6:	4906      	ldr	r1, [pc, #24]	@ (80011d0 <MCM_Park+0x80>)
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	428b      	cmp	r3, r1
 80011bc:	bfb8      	it	lt
 80011be:	460b      	movlt	r3, r1
 80011c0:	e7f0      	b.n	80011a4 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80011c2:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <MCM_Park+0x80>)
 80011c4:	b212      	sxth	r2, r2
 80011c6:	429a      	cmp	r2, r3
 80011c8:	bfb8      	it	lt
 80011ca:	461a      	movlt	r2, r3
 80011cc:	e7da      	b.n	8001184 <MCM_Park+0x34>
 80011ce:	bf00      	nop
 80011d0:	ffff8001 	.word	0xffff8001

080011d4 <MCM_Rev_Park>:
{
 80011d4:	b530      	push	{r4, r5, lr}
 80011d6:	4605      	mov	r5, r0
 80011d8:	b085      	sub	sp, #20
 80011da:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80011dc:	4608      	mov	r0, r1
 80011de:	f7ff ffa7 	bl	8001130 <MCM_Trig_Functions>
 80011e2:	1424      	asrs	r4, r4, #16
 80011e4:	1402      	asrs	r2, r0, #16
 80011e6:	b22d      	sxth	r5, r5
 80011e8:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80011ea:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80011ee:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80011f2:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80011f6:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80011fa:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80011fe:	2000      	movs	r0, #0
 8001200:	f363 000f 	bfi	r0, r3, #0, #16
 8001204:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001208:	f364 401f 	bfi	r0, r4, #16, #16
}
 800120c:	b005      	add	sp, #20
 800120e:	bd30      	pop	{r4, r5, pc}

08001210 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001210:	2800      	cmp	r0, #0
 8001212:	dd09      	ble.n	8001228 <MCM_Sqrt+0x18>
 8001214:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001216:	4b05      	ldr	r3, [pc, #20]	@ (800122c <MCM_Sqrt+0x1c>)
 8001218:	f240 1269 	movw	r2, #361	@ 0x169
 800121c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800121e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001220:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001222:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001224:	b662      	cpsie	i
}
 8001226:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001228:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800122a:	4770      	bx	lr
 800122c:	40020c00 	.word	0x40020c00

08001230 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8001230:	2800      	cmp	r0, #0
 8001232:	d032      	beq.n	800129a <MCboot+0x6a>
{
 8001234:	b530      	push	{r4, r5, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <MCboot+0x6c>)
    bMCBootCompleted = (uint8_t )0;
 8001238:	4c19      	ldr	r4, [pc, #100]	@ (80012a0 <MCboot+0x70>)
{
 800123a:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 800123c:	2500      	movs	r5, #0
    pMCIList[M1] = &Mci[M1];
 800123e:	6003      	str	r3, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8001240:	7025      	strb	r5, [r4, #0]
    FOC_Init();
 8001242:	f000 f985 	bl	8001550 <FOC_Init>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001246:	4817      	ldr	r0, [pc, #92]	@ (80012a4 <MCboot+0x74>)
 8001248:	f005 f83e 	bl	80062c8 <PID_HandleInit>

    /**********************************************************/
    /*   Virtual bus voltage sensor component initialization  */
    /**********************************************************/
    VVBS_Init(&BusVoltageSensor_M1);
 800124c:	4816      	ldr	r0, [pc, #88]	@ (80012a8 <MCboot+0x78>)
 800124e:	f005 fc51 	bl	8006af4 <VVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    NTC_Init(&TempSensor_M1);
 8001252:	4816      	ldr	r0, [pc, #88]	@ (80012ac <MCboot+0x7c>)
 8001254:	f005 f826 	bl	80062a4 <NTC_Init>

    /*************************************************/
    /*   STSPIN32G4 driver component initialization  */
    /*************************************************/
    STSPIN32G4_init(&HdlSTSPING4);
 8001258:	4815      	ldr	r0, [pc, #84]	@ (80012b0 <MCboot+0x80>)
 800125a:	f005 fa9d 	bl	8006798 <STSPIN32G4_init>
    STSPIN32G4_reset(&HdlSTSPING4);
 800125e:	4814      	ldr	r0, [pc, #80]	@ (80012b0 <MCboot+0x80>)
 8001260:	f005 fc22 	bl	8006aa8 <STSPIN32G4_reset>
    STSPIN32G4_setVCC(&HdlSTSPING4, (STSPIN32G4_confVCC){.voltage = _12V,
 8001264:	f240 1303 	movw	r3, #259	@ 0x103
 8001268:	f8ad 3004 	strh.w	r3, [sp, #4]
 800126c:	f88d 5006 	strb.w	r5, [sp, #6]
 8001270:	9901      	ldr	r1, [sp, #4]
 8001272:	480f      	ldr	r0, [pc, #60]	@ (80012b0 <MCboot+0x80>)
 8001274:	f005 fa9a 	bl	80067ac <STSPIN32G4_setVCC>
                                                         .useNFAULT = true,
                                                         .useREADY = false });
    STSPIN32G4_setVDSP(&HdlSTSPING4, (STSPIN32G4_confVDSP){.deglitchTime = _4us,
 8001278:	f240 1301 	movw	r3, #257	@ 0x101
 800127c:	f8ad 3000 	strh.w	r3, [sp]
 8001280:	9900      	ldr	r1, [sp, #0]
 8001282:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <MCboot+0x80>)
 8001284:	f005 fb64 	bl	8006950 <STSPIN32G4_setVDSP>
                                                           .useNFAULT = true });
    STSPIN32G4_clearFaults(&HdlSTSPING4);
 8001288:	4809      	ldr	r0, [pc, #36]	@ (80012b0 <MCboot+0x80>)
 800128a:	f005 fc03 	bl	8006a94 <STSPIN32G4_clearFaults>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 800128e:	f7ff fe91 	bl	8000fb4 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8001292:	2301      	movs	r3, #1
 8001294:	7023      	strb	r3, [r4, #0]
  }
}
 8001296:	b003      	add	sp, #12
 8001298:	bd30      	pop	{r4, r5, pc}
 800129a:	4770      	bx	lr
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000430 	.word	0x20000430
 80012a4:	20000274 	.word	0x20000274
 80012a8:	200002b0 	.word	0x200002b0
 80012ac:	200002bc 	.word	0x200002bc
 80012b0:	2000042c 	.word	0x2000042c

080012b4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80012b4:	4b01      	ldr	r3, [pc, #4]	@ (80012bc <TSK_SetChargeBootCapDelayM1+0x8>)
 80012b6:	8018      	strh	r0, [r3, #0]
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000434 	.word	0x20000434

080012c0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80012c2:	8818      	ldrh	r0, [r3, #0]
 80012c4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80012c6:	fab0 f080 	clz	r0, r0
 80012ca:	0940      	lsrs	r0, r0, #5
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000434 	.word	0x20000434

080012d4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80012d4:	4b01      	ldr	r3, [pc, #4]	@ (80012dc <TSK_SetStopPermanencyTimeM1+0x8>)
 80012d6:	8018      	strh	r0, [r3, #0]
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000432 	.word	0x20000432

080012e0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80012e2:	8818      	ldrh	r0, [r3, #0]
 80012e4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80012e6:	fab0 f080 	clz	r0, r0
 80012ea:	0940      	lsrs	r0, r0, #5
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000432 	.word	0x20000432

080012f4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80012f4:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 fa8a 	bl	8001810 <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 80012fc:	2000      	movs	r0, #0
 80012fe:	bd08      	pop	{r3, pc}

08001300 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001300:	b570      	push	{r4, r5, r6, lr}
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001302:	4e0f      	ldr	r6, [pc, #60]	@ (8001340 <TSK_SafetyTask_PWMOFF+0x40>)
                                                     (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001304:	4d0f      	ldr	r5, [pc, #60]	@ (8001344 <TSK_SafetyTask_PWMOFF+0x44>)
{
 8001306:	4604      	mov	r4, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001308:	6830      	ldr	r0, [r6, #0]
 800130a:	f000 fd7b 	bl	8001e04 <PWMC_IsFaultOccurred>
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 800130e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001312:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8001316:	43c2      	mvns	r2, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001318:	4601      	mov	r1, r0
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 800131a:	b292      	uxth	r2, r2
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff fe57 	bl	8000fd0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff fed4 	bl	80010d0 <MCI_GetFaultState>
 8001328:	b900      	cbnz	r0, 800132c <TSK_SafetyTask_PWMOFF+0x2c>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800132a:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800132c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001330:	f000 fd04 	bl	8001d3c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001334:	4620      	mov	r0, r4
}
 8001336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FOC_Clear(bMotor);
 800133a:	f000 b8cf 	b.w	80014dc <FOC_Clear>
 800133e:	bf00      	nop
 8001340:	20000428 	.word	0x20000428
 8001344:	20000000 	.word	0x20000000

08001348 <TSK_SafetyTask>:
{
 8001348:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <TSK_SafetyTask+0x1c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d000      	beq.n	8001354 <TSK_SafetyTask+0xc>
}
 8001352:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffd3 	bl	8001300 <TSK_SafetyTask_PWMOFF>
}
 800135a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800135e:	f001 bcef 	b.w	8002d40 <RCM_ExecUserConv>
 8001362:	bf00      	nop
 8001364:	20000430 	.word	0x20000430

08001368 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MC_RunMotorControlTasks+0x48>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	b1cb      	cbz	r3, 80013a2 <MC_RunMotorControlTasks+0x3a>
{
 800136e:	b510      	push	{r4, lr}
    if(hMFTaskCounterM1 > 0u)
 8001370:	4c10      	ldr	r4, [pc, #64]	@ (80013b4 <MC_RunMotorControlTasks+0x4c>)
 8001372:	8823      	ldrh	r3, [r4, #0]
 8001374:	b1b3      	cbz	r3, 80013a4 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8001376:	3b01      	subs	r3, #1
 8001378:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 800137a:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <MC_RunMotorControlTasks+0x50>)
      hMFTaskCounterM1--;
 800137c:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800137e:	8813      	ldrh	r3, [r2, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	b11b      	cbz	r3, 800138c <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8001384:	8813      	ldrh	r3, [r2, #0]
 8001386:	3b01      	subs	r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800138c:	4a0b      	ldr	r2, [pc, #44]	@ (80013bc <MC_RunMotorControlTasks+0x54>)
 800138e:	8813      	ldrh	r3, [r2, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	b11b      	cbz	r3, 800139c <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8001394:	8813      	ldrh	r3, [r2, #0]
 8001396:	3b01      	subs	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 800139c:	f7ff ffd4 	bl	8001348 <TSK_SafetyTask>
}
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	4770      	bx	lr
      TSK_MediumFrequencyTaskM1();
 80013a4:	f000 f95a 	bl	800165c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80013a8:	f7ff fe06 	bl	8000fb8 <MC_APP_PostMediumFrequencyHook_M1>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e7e4      	b.n	800137a <MC_RunMotorControlTasks+0x12>
 80013b0:	20000430 	.word	0x20000430
 80013b4:	20000436 	.word	0x20000436
 80013b8:	20000434 	.word	0x20000434
 80013bc:	20000432 	.word	0x20000432

080013c0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80013c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f88a 	bl	80014dc <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80013c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <TSK_HardwareFaultTask+0x18>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	f7ff bdfd 	b.w	8000fd0 <MCI_FaultProcessing>
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000

080013dc <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80013dc:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80013de:	f7ff fde3 	bl	8000fa8 <MC_GetSTMStateMotor1>
 80013e2:	b918      	cbnz	r0, 80013ec <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80013e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80013e8:	f7ff bdd2 	b.w	8000f90 <MC_StartMotor1>
}
 80013ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80013f0:	f7ff bdd4 	b.w	8000f9c <MC_StopMotor1>

080013f4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80013f4:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80013f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <mc_lock_pins+0xd8>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	b08a      	sub	sp, #40	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001400:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001402:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001404:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001406:	69d0      	ldr	r0, [r2, #28]
 8001408:	9009      	str	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 800140a:	2440      	movs	r4, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800140c:	4830      	ldr	r0, [pc, #192]	@ (80014d0 <mc_lock_pins+0xdc>)
  (void) temp;
 800140e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001410:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001414:	f8c2 441c 	str.w	r4, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001418:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  temp = READ_REG(GPIOx->LCKR);
 800141c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8001420:	9008      	str	r0, [sp, #32]
  (void) temp;
 8001422:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001424:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001428:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800142c:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
  temp = READ_REG(GPIOx->LCKR);
 8001430:	f8d2 341c 	ldr.w	r3, [r2, #1052]	@ 0x41c
 8001434:	9307      	str	r3, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001436:	4927      	ldr	r1, [pc, #156]	@ (80014d4 <mc_lock_pins+0xe0>)
  (void) temp;
 8001438:	9b07      	ldr	r3, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800143a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800143e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001442:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001446:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800144a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8001450:	69d2      	ldr	r2, [r2, #28]
 8001452:	9206      	str	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001454:	f44f 7400 	mov.w	r4, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001458:	f44f 3281 	mov.w	r2, #66048	@ 0x10200
  (void) temp;
 800145c:	9d06      	ldr	r5, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800145e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001460:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001462:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	9205      	str	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001468:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146c:	f44f 3284 	mov.w	r2, #67584	@ 0x10800
  (void) temp;
 8001470:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001472:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001474:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001476:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	9204      	str	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800147c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001480:	f44f 3282 	mov.w	r2, #66560	@ 0x10400
  (void) temp;
 8001484:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001486:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001488:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800148a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800148c:	69da      	ldr	r2, [r3, #28]
 800148e:	9203      	str	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001490:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001494:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8001498:	9d03      	ldr	r5, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149e:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a4:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a8:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
  (void) temp;
 80014ac:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ae:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	9201      	str	r2, [sp, #4]
  (void) temp;
 80014b8:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ba:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014bc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014be:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	9300      	str	r3, [sp, #0]
  (void) temp;
 80014c4:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 80014c6:	b00a      	add	sp, #40	@ 0x28
 80014c8:	bc30      	pop	{r4, r5}
 80014ca:	4770      	bx	lr
 80014cc:	00010080 	.word	0x00010080
 80014d0:	00010040 	.word	0x00010040
 80014d4:	00010100 	.word	0x00010100
 80014d8:	48001000 	.word	0x48001000

080014dc <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	2326      	movs	r3, #38	@ 0x26
 80014e0:	4916      	ldr	r1, [pc, #88]	@ (800153c <FOC_Clear+0x60>)
 80014e2:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 80014e6:	2400      	movs	r4, #0
 80014e8:	50cc      	str	r4, [r1, r3]
{
 80014ea:	4605      	mov	r5, r0
 80014ec:	f103 0208 	add.w	r2, r3, #8
 80014f0:	1858      	adds	r0, r3, r1
 80014f2:	3310      	adds	r3, #16
 80014f4:	440a      	add	r2, r1
 80014f6:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014f8:	4911      	ldr	r1, [pc, #68]	@ (8001540 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80014fa:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80014fc:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001500:	6054      	str	r4, [r2, #4]
 8001502:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001504:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8001506:	f8c3 4006 	str.w	r4, [r3, #6]
 800150a:	f8c3 400a 	str.w	r4, [r3, #10]
 800150e:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001512:	f004 fee1 	bl	80062d8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <FOC_Clear+0x68>)
 8001518:	4621      	mov	r1, r4
 800151a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800151e:	f004 fedb 	bl	80062d8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <FOC_Clear+0x6c>)
 8001524:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001528:	f004 ff8c 	bl	8006444 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <FOC_Clear+0x70>)
 800152e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001536:	f000 bc01 	b.w	8001d3c <PWMC_SwitchOffPWM>
 800153a:	bf00      	nop
 800153c:	20000400 	.word	0x20000400
 8001540:	20000030 	.word	0x20000030
 8001544:	2000002c 	.word	0x2000002c
 8001548:	20000034 	.word	0x20000034
 800154c:	20000428 	.word	0x20000428

08001550 <FOC_Init>:
{
 8001550:	b570      	push	{r4, r5, r6, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <FOC_Init+0x90>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001554:	4c23      	ldr	r4, [pc, #140]	@ (80015e4 <FOC_Init+0x94>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001556:	4824      	ldr	r0, [pc, #144]	@ (80015e8 <FOC_Init+0x98>)
    HALL_Init (&HALL_M1);
 8001558:	4e24      	ldr	r6, [pc, #144]	@ (80015ec <FOC_Init+0x9c>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 800155a:	4d25      	ldr	r5, [pc, #148]	@ (80015f0 <FOC_Init+0xa0>)
{
 800155c:	b082      	sub	sp, #8
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800155e:	6018      	str	r0, [r3, #0]
    R1_Init(&PWM_Handle_M1);
 8001560:	f000 ff8e 	bl	8002480 <R1_Init>
    startTimers();
 8001564:	f000 fa36 	bl	80019d4 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001568:	4620      	mov	r0, r4
 800156a:	f004 fead 	bl	80062c8 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 800156e:	4630      	mov	r0, r6
 8001570:	f7fe ffe4 	bl	800053c <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001574:	4621      	mov	r1, r4
 8001576:	4632      	mov	r2, r6
 8001578:	6828      	ldr	r0, [r5, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800157a:	4c1e      	ldr	r4, [pc, #120]	@ (80015f4 <FOC_Init+0xa4>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 800157c:	f004 ff4c 	bl	8006418 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001580:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <FOC_Init+0xa8>)
 8001582:	f004 fea1 	bl	80062c8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001586:	481d      	ldr	r0, [pc, #116]	@ (80015fc <FOC_Init+0xac>)
 8001588:	f004 fe9e 	bl	80062c8 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <FOC_Init+0xb0>)
 800158e:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <FOC_Init+0xb4>)
 8001590:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001592:	481d      	ldr	r0, [pc, #116]	@ (8001608 <FOC_Init+0xb8>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001594:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <FOC_Init+0xbc>)
 800159a:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800159c:	f004 fefa 	bl	8006394 <REMNG_Init>
    FOC_Clear(M1);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff ff9b 	bl	80014dc <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015a6:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015a8:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80015aa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015ae:	f004 ffd7 	bl	8006560 <STC_GetDefaultIqdref>
 80015b2:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80015b6:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015b8:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80015ba:	8262      	strh	r2, [r4, #18]
 80015bc:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015be:	f004 ffcf 	bl	8006560 <STC_GetDefaultIqdref>
 80015c2:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 80015c6:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80015c8:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 80015ca:	f004 ffc5 	bl	8006558 <STC_GetMecSpeedRefUnitDefault>
 80015ce:	4601      	mov	r1, r0
 80015d0:	480f      	ldr	r0, [pc, #60]	@ (8001610 <FOC_Init+0xc0>)
 80015d2:	2200      	movs	r2, #0
}
 80015d4:	b002      	add	sp, #8
 80015d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 80015da:	f7ff bcef 	b.w	8000fbc <MCI_ExecSpeedRamp>
 80015de:	bf00      	nop
 80015e0:	20000428 	.word	0x20000428
 80015e4:	20000274 	.word	0x20000274
 80015e8:	20000120 	.word	0x20000120
 80015ec:	20000054 	.word	0x20000054
 80015f0:	20000034 	.word	0x20000034
 80015f4:	20000400 	.word	0x20000400
 80015f8:	20000248 	.word	0x20000248
 80015fc:	2000021c 	.word	0x2000021c
 8001600:	20000028 	.word	0x20000028
 8001604:	200002b0 	.word	0x200002b0
 8001608:	2000003c 	.word	0x2000003c
 800160c:	200003fc 	.word	0x200003fc
 8001610:	20000000 	.word	0x20000000

08001614 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 800161e:	4d0d      	ldr	r5, [pc, #52]	@ (8001654 <FOC_CalcCurrRef+0x3c>)
 8001620:	2426      	movs	r4, #38	@ 0x26
 8001622:	fb04 5400 	mla	r4, r4, r0, r5
 8001626:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 800162a:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 800162e:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001630:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001634:	b13b      	cbz	r3, 8001646 <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001636:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8001638:	2326      	movs	r3, #38	@ 0x26
 800163a:	fb03 5506 	mla	r5, r3, r6, r5
 800163e:	8228      	strh	r0, [r5, #16]
 8001640:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8001642:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <FOC_CalcCurrRef+0x40>)
 8001648:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800164c:	f004 ff4e 	bl	80064ec <STC_CalcTorqueReference>
 8001650:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8001652:	e7f0      	b.n	8001636 <FOC_CalcCurrRef+0x1e>
 8001654:	20000400 	.word	0x20000400
 8001658:	20000034 	.word	0x20000034

0800165c <TSK_MediumFrequencyTaskM1>:
{
 800165c:	b530      	push	{r4, r5, lr}
 800165e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001660:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001662:	f10d 0106 	add.w	r1, sp, #6
 8001666:	4865      	ldr	r0, [pc, #404]	@ (80017fc <TSK_MediumFrequencyTaskM1+0x1a0>)
  int16_t wAux = 0;
 8001668:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800166c:	f7ff f8d0 	bl	8000810 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001670:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <TSK_MediumFrequencyTaskM1+0x1a4>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001672:	4c64      	ldr	r4, [pc, #400]	@ (8001804 <TSK_MediumFrequencyTaskM1+0x1a8>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8001674:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f004 fe70 	bl	800635c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fcf3 	bl	8001068 <MCI_GetCurrentFaults>
 8001682:	b118      	cbz	r0, 800168c <TSK_MediumFrequencyTaskM1+0x30>
    Mci[M1].State = FAULT_NOW;
 8001684:	230a      	movs	r3, #10
 8001686:	77e3      	strb	r3, [r4, #31]
}
 8001688:	b003      	add	sp, #12
 800168a:	bd30      	pop	{r4, r5, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800168c:	4620      	mov	r0, r4
 800168e:	f7ff fce9 	bl	8001064 <MCI_GetOccurredFaults>
 8001692:	bb48      	cbnz	r0, 80016e8 <TSK_MediumFrequencyTaskM1+0x8c>
      switch (Mci[M1].State)
 8001694:	7fe3      	ldrb	r3, [r4, #31]
 8001696:	2b11      	cmp	r3, #17
 8001698:	d8f6      	bhi.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
 800169a:	a201      	add	r2, pc, #4	@ (adr r2, 80016a0 <TSK_MediumFrequencyTaskM1+0x44>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	08001797 	.word	0x08001797
 80016a4:	08001689 	.word	0x08001689
 80016a8:	08001689 	.word	0x08001689
 80016ac:	08001689 	.word	0x08001689
 80016b0:	08001689 	.word	0x08001689
 80016b4:	08001689 	.word	0x08001689
 80016b8:	08001773 	.word	0x08001773
 80016bc:	08001689 	.word	0x08001689
 80016c0:	080017b7 	.word	0x080017b7
 80016c4:	08001689 	.word	0x08001689
 80016c8:	080016e9 	.word	0x080016e9
 80016cc:	08001767 	.word	0x08001767
 80016d0:	08001689 	.word	0x08001689
 80016d4:	08001689 	.word	0x08001689
 80016d8:	08001689 	.word	0x08001689
 80016dc:	08001689 	.word	0x08001689
 80016e0:	0800171f 	.word	0x0800171f
 80016e4:	080016f1 	.word	0x080016f1
      Mci[M1].State = FAULT_OVER;
 80016e8:	230b      	movs	r3, #11
 80016ea:	77e3      	strb	r3, [r4, #31]
}
 80016ec:	b003      	add	sp, #12
 80016ee:	bd30      	pop	{r4, r5, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80016f0:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80016f2:	4d45      	ldr	r5, [pc, #276]	@ (8001808 <TSK_MediumFrequencyTaskM1+0x1ac>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80016f4:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80016f6:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80016f8:	d065      	beq.n	80017c6 <TSK_MediumFrequencyTaskM1+0x16a>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80016fa:	2101      	movs	r1, #1
 80016fc:	f000 fb22 	bl	8001d44 <PWMC_CurrentReadingCalibr>
 8001700:	2800      	cmp	r0, #0
 8001702:	d0c1      	beq.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001704:	7fa3      	ldrb	r3, [r4, #30]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d071      	beq.n	80017ee <TSK_MediumFrequencyTaskM1+0x192>
                R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800170a:	6828      	ldr	r0, [r5, #0]
 800170c:	2100      	movs	r1, #0
 800170e:	f001 f825 	bl	800275c <R1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001712:	2014      	movs	r0, #20
 8001714:	f7ff fdce 	bl	80012b4 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001718:	2310      	movs	r3, #16
 800171a:	77e3      	strb	r3, [r4, #31]
 800171c:	e7b4      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800171e:	7fa3      	ldrb	r3, [r4, #30]
 8001720:	2b05      	cmp	r3, #5
 8001722:	d04e      	beq.n	80017c2 <TSK_MediumFrequencyTaskM1+0x166>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001724:	f7ff fdcc 	bl	80012c0 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001728:	2800      	cmp	r0, #0
 800172a:	d0ad      	beq.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
              R1_SwitchOffPWM(pwmcHandle[M1]);
 800172c:	4d36      	ldr	r5, [pc, #216]	@ (8001808 <TSK_MediumFrequencyTaskM1+0x1ac>)
 800172e:	6828      	ldr	r0, [r5, #0]
 8001730:	f001 f8da 	bl	80028e8 <R1_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 8001734:	4831      	ldr	r0, [pc, #196]	@ (80017fc <TSK_MediumFrequencyTaskM1+0x1a0>)
 8001736:	f7fe ff8b 	bl	8000650 <HALL_Clear>
              FOC_Clear( M1 );
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff fece 	bl	80014dc <FOC_Clear>
                FOC_InitAdditionalMethods(M1);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff ff67 	bl	8001614 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff ff66 	bl	8001618 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <TSK_MediumFrequencyTaskM1+0x1b0>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	f004 ff0c 	bl	800656c <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001754:	482b      	ldr	r0, [pc, #172]	@ (8001804 <TSK_MediumFrequencyTaskM1+0x1a8>)
 8001756:	f7ff fc47 	bl	8000fe8 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 800175a:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800175c:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 800175e:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001760:	f000 faee 	bl	8001d40 <PWMC_SwitchOnPWM>
 8001764:	e790      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001766:	7fa3      	ldrb	r3, [r4, #30]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d18d      	bne.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800176c:	2300      	movs	r3, #0
 800176e:	83e3      	strh	r3, [r4, #30]
 8001770:	e78a      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001772:	7fa3      	ldrb	r3, [r4, #30]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d024      	beq.n	80017c2 <TSK_MediumFrequencyTaskM1+0x166>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001778:	4822      	ldr	r0, [pc, #136]	@ (8001804 <TSK_MediumFrequencyTaskM1+0x1a8>)
 800177a:	f7ff fc35 	bl	8000fe8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff ff4a 	bl	8001618 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001784:	2d00      	cmp	r5, #0
 8001786:	f47f af7f 	bne.w	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 800178a:	481e      	ldr	r0, [pc, #120]	@ (8001804 <TSK_MediumFrequencyTaskM1+0x1a8>)
 800178c:	462a      	mov	r2, r5
 800178e:	2120      	movs	r1, #32
 8001790:	f7ff fc1e 	bl	8000fd0 <MCI_FaultProcessing>
 8001794:	e778      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001796:	7fa3      	ldrb	r3, [r4, #30]
 8001798:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 800179c:	2b01      	cmp	r3, #1
 800179e:	f47f af73 	bne.w	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80017a2:	4d19      	ldr	r5, [pc, #100]	@ (8001808 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80017a4:	6828      	ldr	r0, [r5, #0]
 80017a6:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 80017aa:	b9c1      	cbnz	r1, 80017de <TSK_MediumFrequencyTaskM1+0x182>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80017ac:	f000 faca 	bl	8001d44 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 80017b0:	2311      	movs	r3, #17
 80017b2:	77e3      	strb	r3, [r4, #31]
 80017b4:	e768      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80017b6:	f7ff fd93 	bl	80012e0 <TSK_StopPermanencyTimeHasElapsedM1>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	f43f af64 	beq.w	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
 80017c0:	e7d4      	b.n	800176c <TSK_MediumFrequencyTaskM1+0x110>
    R1_SwitchOffPWM(pwmcHandle[motor]);
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	f001 f88f 	bl	80028e8 <R1_SwitchOffPWM>
  FOC_Clear(motor);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fe86 	bl	80014dc <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80017d0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80017d4:	f7ff fd7e 	bl	80012d4 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80017d8:	2308      	movs	r3, #8
 80017da:	77e3      	strb	r3, [r4, #31]
}
 80017dc:	e754      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80017de:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80017e0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80017e4:	f000 faae 	bl	8001d44 <PWMC_CurrentReadingCalibr>
              R1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80017e8:	6828      	ldr	r0, [r5, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	e78f      	b.n	800170e <TSK_MediumFrequencyTaskM1+0xb2>
                FOC_Clear(M1);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff fe74 	bl	80014dc <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80017f4:	2300      	movs	r3, #0
 80017f6:	83e3      	strh	r3, [r4, #30]
 80017f8:	e746      	b.n	8001688 <TSK_MediumFrequencyTaskM1+0x2c>
 80017fa:	bf00      	nop
 80017fc:	20000054 	.word	0x20000054
 8001800:	20000028 	.word	0x20000028
 8001804:	20000000 	.word	0x20000000
 8001808:	20000428 	.word	0x20000428
 800180c:	20000034 	.word	0x20000034

08001810 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8001810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001814:	4606      	mov	r6, r0
 8001816:	b087      	sub	sp, #28
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)HALL_CalcElAngle(&HALL_M1);
 8001818:	4830      	ldr	r0, [pc, #192]	@ (80018dc <FOC_HighFrequencyTask+0xcc>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800181a:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 80018f8 <FOC_HighFrequencyTask+0xe8>
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800181e:	4c30      	ldr	r4, [pc, #192]	@ (80018e0 <FOC_HighFrequencyTask+0xd0>)
  (void)HALL_CalcElAngle(&HALL_M1);
 8001820:	f7fe ffb0 	bl	8000784 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001824:	4b2f      	ldr	r3, [pc, #188]	@ (80018e4 <FOC_HighFrequencyTask+0xd4>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001826:	f8d8 0000 	ldr.w	r0, [r8]
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 800182a:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 800182c:	695a      	ldr	r2, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800182e:	6803      	ldr	r3, [r0, #0]
 8001830:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8001834:	a903      	add	r1, sp, #12
 8001836:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8001838:	f001 fafa 	bl	8002e30 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800183c:	f001 fab4 	bl	8002da8 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001840:	9803      	ldr	r0, [sp, #12]
 8001842:	f7ff fc4b 	bl	80010dc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001846:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001848:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800184a:	f7ff fc81 	bl	8001150 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800184e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001852:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001854:	b201      	sxth	r1, r0
 8001856:	1a59      	subs	r1, r3, r1
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <FOC_HighFrequencyTask+0xd8>)
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	f004 fd3e 	bl	80062dc <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001860:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001864:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001868:	1ac9      	subs	r1, r1, r3
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <FOC_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800186c:	4607      	mov	r7, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f004 fd34 	bl	80062dc <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001874:	f8ad 7008 	strh.w	r7, [sp, #8]
 8001878:	f8ad 000a 	strh.w	r0, [sp, #10]
 800187c:	9902      	ldr	r1, [sp, #8]
 800187e:	481c      	ldr	r0, [pc, #112]	@ (80018f0 <FOC_HighFrequencyTask+0xe0>)
 8001880:	f004 fce2 	bl	8006248 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001884:	4629      	mov	r1, r5
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001886:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001888:	f7ff fca4 	bl	80011d4 <MCM_Rev_Park>
 800188c:	4601      	mov	r1, r0
 800188e:	9005      	str	r0, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001890:	f8d8 0000 	ldr.w	r0, [r8]
 8001894:	f000 f90a 	bl	8001aac <PWMC_SetPhaseVoltage>
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 8001898:	9901      	ldr	r1, [sp, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800189a:	4607      	mov	r7, r0
  PWMC_CalcPhaseCurrentsEst(pwmcHandle[M1],Iqd, hElAngle);
 800189c:	462a      	mov	r2, r5
 800189e:	f8d8 0000 	ldr.w	r0, [r8]
 80018a2:	f000 fa69 	bl	8001d78 <PWMC_CalcPhaseCurrentsEst>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80018a6:	9803      	ldr	r0, [sp, #12]
 80018a8:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80018aa:	9804      	ldr	r0, [sp, #16]
 80018ac:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80018ae:	9801      	ldr	r0, [sp, #4]
 80018b0:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 80018b2:	2f01      	cmp	r7, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80018b4:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80018b6:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].Valphabeta = Valphabeta;
 80018ba:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80018be:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80018c0:	d003      	beq.n	80018ca <FOC_HighFrequencyTask+0xba>
}
 80018c2:	4630      	mov	r0, r6
 80018c4:	b007      	add	sp, #28
 80018c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80018ca:	480a      	ldr	r0, [pc, #40]	@ (80018f4 <FOC_HighFrequencyTask+0xe4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	4639      	mov	r1, r7
 80018d0:	f7ff fb7e 	bl	8000fd0 <MCI_FaultProcessing>
}
 80018d4:	4630      	mov	r0, r6
 80018d6:	b007      	add	sp, #28
 80018d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018dc:	20000054 	.word	0x20000054
 80018e0:	20000400 	.word	0x20000400
 80018e4:	20000034 	.word	0x20000034
 80018e8:	20000030 	.word	0x20000030
 80018ec:	2000002c 	.word	0x2000002c
 80018f0:	20000038 	.word	0x20000038
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000428 	.word	0x20000428

080018fc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80018fc:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80018fe:	f003 fb13 	bl	8004f28 <HAL_RCC_GetHCLKFreq>
 8001902:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_MotorControl_Init+0x30>)
 8001904:	fba3 3000 	umull	r3, r0, r3, r0
 8001908:	09c0      	lsrs	r0, r0, #7
 800190a:	f002 fb5d 	bl	8003fc8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <MX_MotorControl_Init+0x34>)
 8001910:	2200      	movs	r2, #0
 8001912:	6819      	ldr	r1, [r3, #0]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f002 fb0c 	bl	8003f34 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800191c:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_MotorControl_Init+0x38>)
 800191e:	f7ff fc87 	bl	8001230 <MCboot>
  mc_lock_pins();
}
 8001922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001926:	f7ff bd65 	b.w	80013f4 <mc_lock_pins>
 800192a:	bf00      	nop
 800192c:	10624dd3 	.word	0x10624dd3
 8001930:	200002f4 	.word	0x200002f4
 8001934:	20000438 	.word	0x20000438

08001938 <MX_OPAMP1_Init>:
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001938:	480c      	ldr	r0, [pc, #48]	@ (800196c <MX_OPAMP1_Init+0x34>)
 800193a:	490d      	ldr	r1, [pc, #52]	@ (8001970 <MX_OPAMP1_Init+0x38>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800193c:	2300      	movs	r3, #0
 800193e:	2240      	movs	r2, #64	@ 0x40
{
 8001940:	b510      	push	{r4, lr}
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001942:	e9c0 1300 	strd	r1, r3, [r0]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001946:	2408      	movs	r4, #8
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001948:	6082      	str	r2, [r0, #8]
  hopamp1.Init.InternalOutput = ENABLE;
 800194a:	2101      	movs	r1, #1
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_NO;
 800194c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001950:	e9c0 3209 	strd	r3, r2, [r0, #36]	@ 0x24
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO2;
 8001954:	6104      	str	r4, [r0, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8001956:	7501      	strb	r1, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001958:	6183      	str	r3, [r0, #24]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_8_OR_MINUS_7;
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800195a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800195c:	f002 fe70 	bl	8004640 <HAL_OPAMP_Init>
 8001960:	b900      	cbnz	r0, 8001964 <MX_OPAMP1_Init+0x2c>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001962:	bd10      	pop	{r4, pc}
 8001964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001968:	f7ff bb10 	b.w	8000f8c <Error_Handler>
 800196c:	20000440 	.word	0x20000440
 8001970:	40010300 	.word	0x40010300
 8001974:	00000000 	.word	0x00000000

08001978 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001978:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(opampHandle->Instance==OPAMP1)
 800197a:	4a15      	ldr	r2, [pc, #84]	@ (80019d0 <HAL_OPAMP_MspInit+0x58>)
 800197c:	6801      	ldr	r1, [r0, #0]
{
 800197e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	2300      	movs	r3, #0
  if(opampHandle->Instance==OPAMP1)
 8001982:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001988:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800198c:	9306      	str	r3, [sp, #24]
  if(opampHandle->Instance==OPAMP1)
 800198e:	d002      	beq.n	8001996 <HAL_OPAMP_MspInit+0x1e>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8001990:	b009      	add	sp, #36	@ 0x24
 8001992:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800199a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_Pin;
 800199e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80019c8 <HAL_OPAMP_MspInit+0x50>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_GPIO_Port, &GPIO_InitStruct);
 80019b2:	a902      	add	r1, sp, #8
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_Pin;
 80019b8:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_GPIO_Port, &GPIO_InitStruct);
 80019be:	f002 fbb5 	bl	800412c <HAL_GPIO_Init>
}
 80019c2:	b009      	add	sp, #36	@ 0x24
 80019c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019c8:	00000080 	.word	0x00000080
 80019cc:	00000003 	.word	0x00000003
 80019d0:	40010300 	.word	0x40010300

080019d4 <startTimers>:
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80019d4:	4922      	ldr	r1, [pc, #136]	@ (8001a60 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80019d6:	4a23      	ldr	r2, [pc, #140]	@ (8001a64 <startTimers+0x90>)
 80019d8:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 80019da:	b410      	push	{r4}
 80019dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80019e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	b083      	sub	sp, #12
 80019ea:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80019ec:	688b      	ldr	r3, [r1, #8]
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f2:	f023 0307 	bic.w	r3, r3, #7
 80019f6:	f043 0306 	orr.w	r3, r3, #6
 80019fa:	608b      	str	r3, [r1, #8]
 80019fc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80019fe:	07db      	lsls	r3, r3, #31
 8001a00:	d416      	bmi.n	8001a30 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a0a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a16:	9b01      	ldr	r3, [sp, #4]
 8001a18:	694b      	ldr	r3, [r1, #20]
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001a20:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8001a28:	b003      	add	sp, #12
 8001a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a2e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8001a30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a34:	480c      	ldr	r0, [pc, #48]	@ (8001a68 <startTimers+0x94>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8001a6c <startTimers+0x98>)
 8001a3c:	4001      	ands	r1, r0
 8001a3e:	f041 0120 	orr.w	r1, r1, #32
 8001a42:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a44:	6959      	ldr	r1, [r3, #20]
 8001a46:	f041 0101 	orr.w	r1, r1, #1
 8001a4a:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	4022      	ands	r2, r4
 8001a50:	4001      	ands	r1, r0
 8001a52:	430a      	orrs	r2, r1
 8001a54:	605a      	str	r2, [r3, #4]
}
 8001a56:	b003      	add	sp, #12
 8001a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40012c00 	.word	0x40012c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	fdffff8f 	.word	0xfdffff8f
 8001a6c:	02000070 	.word	0x02000070

08001a70 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8001a70:	3201      	adds	r2, #1
{
 8001a72:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8001a74:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001a76:	f06f 0602 	mvn.w	r6, #2
 8001a7a:	0155      	lsls	r5, r2, #5
 8001a7c:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8001a7e:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8001a80:	f893 c000 	ldrb.w	ip, [r3]
 8001a84:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8001a88:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8001a8c:	d80c      	bhi.n	8001aa8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001a8e:	6904      	ldr	r4, [r0, #16]
 8001a90:	07a4      	lsls	r4, r4, #30
 8001a92:	d5f5      	bpl.n	8001a80 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8001a94:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8001a98:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001a9a:	6106      	str	r6, [r0, #16]
 8001a9c:	d8f0      	bhi.n	8001a80 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8001a9e:	781c      	ldrb	r4, [r3, #0]
 8001aa0:	2c0f      	cmp	r4, #15
 8001aa2:	d8ed      	bhi.n	8001a80 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
 8001aaa:	bf00      	nop

08001aac <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8001aac:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001aae:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001ab2:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001ab6:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001aba:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001abc:	fb04 fc0c 	mul.w	ip, r4, ip
 8001ac0:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8001ac8:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001acc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001ad0:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001ad4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8001ad8:	1c55      	adds	r5, r2, #1
{
 8001ada:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001adc:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001ae0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001ae4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001ae8:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8001aec:	db6b      	blt.n	8001bc6 <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8001aee:	1c5d      	adds	r5, r3, #1
 8001af0:	db3d      	blt.n	8001b6e <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001af2:	ebbe 0e01 	subs.w	lr, lr, r1
 8001af6:	bf44      	itt	mi
 8001af8:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8001afc:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bfbc      	itt	lt
 8001b04:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8001b08:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	bfb8      	it	lt
 8001b10:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8001b14:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001b18:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8001b1c:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8001b20:	bfb8      	it	lt
 8001b22:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8001b26:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8001b2a:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8001b2e:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8001b32:	2900      	cmp	r1, #0
 8001b34:	d16e      	bne.n	8001c14 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8001b36:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8001b3a:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 8001b3e:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8001b40:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001b44:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8001b46:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001b4a:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001b4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001b52:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8001b56:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8001b5a:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8001b5e:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8001b62:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8001b66:	b003      	add	sp, #12
 8001b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8001b6c:	4708      	bx	r1
        if ( wX <= 0 )
 8001b6e:	f1bc 0f00 	cmp.w	ip, #0
 8001b72:	dd7b      	ble.n	8001c6c <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bfb8      	it	lt
 8001b78:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001b7c:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 8001b80:	bfb8      	it	lt
 8001b82:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8001b86:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8001b8a:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001b8e:	bfb8      	it	lt
 8001b90:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001b94:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 8001b98:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8001b9c:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001ba0:	bfb8      	it	lt
 8001ba2:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8001ba6:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8001baa:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8001bae:	2900      	cmp	r1, #0
 8001bb0:	f040 80ae 	bne.w	8001d10 <PWMC_SetPhaseVoltage+0x264>
 8001bb4:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	f000 80b9 	beq.w	8001d30 <PWMC_SetPhaseVoltage+0x284>
 8001bbe:	f04f 0c02 	mov.w	ip, #2
 8001bc2:	2401      	movs	r4, #1
 8001bc4:	e7bc      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 8001bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8001bca:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 8001bce:	db70      	blt.n	8001cb2 <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 8001bd0:	f1bc 0f00 	cmp.w	ip, #0
 8001bd4:	dd23      	ble.n	8001c1e <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001bd6:	ebbe 0e0c 	subs.w	lr, lr, ip
 8001bda:	bf44      	itt	mi
 8001bdc:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8001be0:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8001be4:	2a00      	cmp	r2, #0
 8001be6:	bfb8      	it	lt
 8001be8:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8001bec:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8001bf0:	bfb8      	it	lt
 8001bf2:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8001bf6:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8001bf8:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8001bfc:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8001c00:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8001c04:	2d00      	cmp	r5, #0
 8001c06:	d17e      	bne.n	8001d06 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8001c08:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8001c0c:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8001c0e:	fa1f f18e 	uxth.w	r1, lr
 8001c12:	e795      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
 8001c14:	f04f 0c02 	mov.w	ip, #2
 8001c18:	2400      	movs	r4, #0
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	e790      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001c1e:	ebbc 0101 	subs.w	r1, ip, r1
 8001c22:	bf44      	itt	mi
 8001c24:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8001c28:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bfb8      	it	lt
 8001c30:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8001c34:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8001c38:	bfb8      	it	lt
 8001c3a:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8001c3e:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8001c42:	f1bc 0200 	subs.w	r2, ip, #0
 8001c46:	bfb8      	it	lt
 8001c48:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8001c4c:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8001c50:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8001c54:	bfb8      	it	lt
 8001c56:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8001c5a:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8001c5e:	2d00      	cmp	r5, #0
 8001c60:	d060      	beq.n	8001d24 <PWMC_SetPhaseVoltage+0x278>
 8001c62:	f04f 0c00 	mov.w	ip, #0
 8001c66:	2401      	movs	r4, #1
 8001c68:	2102      	movs	r1, #2
 8001c6a:	e769      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	bfb8      	it	lt
 8001c70:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8001c74:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8001c78:	bfb8      	it	lt
 8001c7a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001c7e:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 8001c82:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8001c86:	f1bc 0300 	subs.w	r3, ip, #0
 8001c8a:	bfb8      	it	lt
 8001c8c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8001c90:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 8001c94:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8001c98:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8001c9c:	bfb8      	it	lt
 8001c9e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8001ca2:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8001ca6:	b3c1      	cbz	r1, 8001d1a <PWMC_SetPhaseVoltage+0x26e>
 8001ca8:	f04f 0c01 	mov.w	ip, #1
 8001cac:	2402      	movs	r4, #2
 8001cae:	2100      	movs	r1, #0
 8001cb0:	e746      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001cb2:	ebbe 0e01 	subs.w	lr, lr, r1
 8001cb6:	bf44      	itt	mi
 8001cb8:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8001cbc:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bfbc      	itt	lt
 8001cc4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8001cc8:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	bfb8      	it	lt
 8001cd0:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8001cd4:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 8001cd8:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001cdc:	bfb8      	it	lt
 8001cde:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8001ce2:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8001ce6:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8001cea:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8001cee:	b92d      	cbnz	r5, 8001cfc <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8001cf0:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8001cf4:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8001cf8:	b299      	uxth	r1, r3
 8001cfa:	e721      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
 8001cfc:	f04f 0c01 	mov.w	ip, #1
 8001d00:	2400      	movs	r4, #0
 8001d02:	2102      	movs	r1, #2
 8001d04:	e71c      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
 8001d06:	f04f 0c00 	mov.w	ip, #0
 8001d0a:	2402      	movs	r4, #2
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	e717      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
 8001d10:	f04f 0c02 	mov.w	ip, #2
 8001d14:	2401      	movs	r4, #1
 8001d16:	2100      	movs	r1, #0
 8001d18:	e712      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8001d1a:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8001d1e:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8001d20:	b299      	uxth	r1, r3
 8001d22:	e70d      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8001d24:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8001d28:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8001d2a:	fa1f f18e 	uxth.w	r1, lr
 8001d2e:	e707      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8001d30:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8001d34:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8001d36:	b291      	uxth	r1, r2
 8001d38:	e702      	b.n	8001b40 <PWMC_SetPhaseVoltage+0x94>
 8001d3a:	bf00      	nop

08001d3c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8001d3c:	6843      	ldr	r3, [r0, #4]
 8001d3e:	4718      	bx	r3

08001d40 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8001d40:	6883      	ldr	r3, [r0, #8]
 8001d42:	4718      	bx	r3

08001d44 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8001d44:	b510      	push	{r4, lr}
 8001d46:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8001d48:	b179      	cbz	r1, 8001d6a <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8001d4a:	2901      	cmp	r1, #1
 8001d4c:	d001      	beq.n	8001d52 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8001d4e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8001d50:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8001d52:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8001d56:	b16b      	cbz	r3, 8001d74 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f4      	bne.n	8001d4e <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8001d64:	68c3      	ldr	r3, [r0, #12]
 8001d66:	4798      	blx	r3
          retVal = true;
 8001d68:	e004      	b.n	8001d74 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8001d6a:	f7ff ffe7 	bl	8001d3c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8001d6e:	68e3      	ldr	r3, [r4, #12]
 8001d70:	4620      	mov	r0, r4
 8001d72:	4798      	blx	r3
      retVal = true;
 8001d74:	2001      	movs	r0, #1
}
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <PWMC_CalcPhaseCurrentsEst>:
  * @param  pHandle: Handler of the current instance of the PWM component.
  * @param  Iqd: Structure that will receive Iq and Id currents.
  * @param  hElAngledpp: Electrical angle.
  */
void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp)
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	468e      	mov	lr, r1
#endif
    qd_t idq_ave;
    alphabeta_t ialpha_beta;
    int32_t temp1, temp2;

    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001d7e:	b208      	sxth	r0, r1
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);

    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001d80:	4611      	mov	r1, r2
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001d82:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001d86:	f9b4 c06e 	ldrsh.w	ip, [r4, #110]	@ 0x6e
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001d8a:	eba0 30e3 	sub.w	r0, r0, r3, asr #15
{
 8001d8e:	b084      	sub	sp, #16
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001d90:	fb0c 3300 	mla	r3, ip, r0, r3
 8001d94:	6363      	str	r3, [r4, #52]	@ 0x34
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001d96:	13db      	asrs	r3, r3, #15
    idq_ave.q = (int16_t)PWMC_LowPassFilter(Iqd.q, &(pHandle->LPFIqBuf), pHandle->LPFIqd_const);
 8001d98:	f8ad 3008 	strh.w	r3, [sp, #8]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001d9c:	13d3      	asrs	r3, r2, #15
 8001d9e:	ebc3 432e 	rsb	r3, r3, lr, asr #16
 8001da2:	fb0c 2303 	mla	r3, ip, r3, r2
    x = (*out_buf) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001da6:	13da      	asrs	r2, r3, #15
    idq_ave.d = (int16_t)PWMC_LowPassFilter(Iqd.d, &(pHandle->LPFIdBuf), pHandle->LPFIqd_const);
 8001da8:	f8ad 200a 	strh.w	r2, [sp, #10]
    *out_buf = (*out_buf) + ((in - ((*out_buf) >> 15)) * t);
 8001dac:	63a3      	str	r3, [r4, #56]	@ 0x38
    ialpha_beta = MCM_Rev_Park(idq_ave, hElAngledpp);
 8001dae:	9802      	ldr	r0, [sp, #8]
 8001db0:	f7ff fa10 	bl	80011d4 <MCM_Rev_Park>
 8001db4:	b201      	sxth	r1, r0
    /* Reverse Clarke */

    /*Ia*/
    pHandle->IaEst = ialpha_beta.alpha;

    temp1 = - ialpha_beta.alpha;
 8001db6:	424b      	negs	r3, r1
#else
    temp2 = (int32_t)(ialpha_beta.beta) * (int32_t)SQRT3FACTOR / 32768;
#endif

    /* Ib */
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	eba3 4210 	sub.w	r2, r3, r0, lsr #16

    /* Ic */
    pHandle->IcEst = (int16_t)(temp1 + temp2)/2;
 8001dbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8001dc2:	f3c3 30c0 	ubfx	r0, r3, #15, #1
 8001dc6:	fa00 f383 	sxtah	r3, r0, r3
 8001dca:	105b      	asrs	r3, r3, #1
 8001dcc:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001dd0:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 8001dd4:	fa03 f282 	sxtah	r2, r3, r2
 8001dd8:	1052      	asrs	r2, r2, #1
    pHandle->IaEst = ialpha_beta.alpha;
 8001dda:	f8a4 1068 	strh.w	r1, [r4, #104]	@ 0x68
    pHandle->IbEst = (int16_t)(temp1 - temp2)/2;
 8001dde:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
}
 8001de2:	b004      	add	sp, #16
 8001de4:	bd10      	pop	{r4, pc}
 8001de6:	bf00      	nop

08001de8 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8001de8:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8001dea:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8001dec:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8001df0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001df4:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8001df6:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8001df8:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8001dfc:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8001e04:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8001e06:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8001e0a:	b1a8      	cbz	r0, 8001e38 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8001e12:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8001e14:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8001e16:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8001e1a:	b11a      	cbz	r2, 8001e24 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8001e22:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8001e24:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8001e28:	b12a      	cbz	r2, 8001e36 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8001e2a:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8001e2e:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8001e30:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8001e32:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8001e36:	4770      	bx	lr
 8001e38:	2140      	movs	r1, #64	@ 0x40
 8001e3a:	e7ec      	b.n	8001e16 <PWMC_IsFaultOccurred+0x12>

08001e3c <R1_GetPhaseCurrents>:
  *
  */
__weak void R1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8001e3c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
{
 8001e40:	b430      	push	{r4, r5}
  const ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8001e42:	e9d2 5300 	ldrd	r5, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e46:	f06f 0201 	mvn.w	r2, #1
 8001e4a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001e4c:	685a      	ldr	r2, [r3, #4]
  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput2(TIMx, LL_TIM_TRGO_RESET);

  /* First sampling point */
  wAux1 = (int32_t)(ADCx->JDR1 );
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001e4e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	@ 0xa8
 8001e52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e56:	605a      	str	r2, [r3, #4]
  wAux1 = (int32_t)(ADCx->JDR1 );
 8001e58:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
  else
  {
    wAux1 = (-INT16_MAX);
  }
   /* Second sampling point */
  wAux2 = (int32_t)(ADCx->JDR2 );
 8001e5c:	f8d5 2084 	ldr.w	r2, [r5, #132]	@ 0x84
 8001e60:	4d91      	ldr	r5, [pc, #580]	@ (80020a8 <R1_GetPhaseCurrents+0x26c>)
  wAux1 -= (int32_t)(pHandle->PhaseOffset);
 8001e62:	1b1b      	subs	r3, r3, r4
    if (wAux1 < INT16_MAX)
 8001e64:	f647 7cff 	movw	ip, #32767	@ 0x7fff
  wAux2 -= (int32_t)(pHandle->PhaseOffset);
 8001e68:	1b12      	subs	r2, r2, r4
    if (wAux1 < INT16_MAX)
 8001e6a:	4563      	cmp	r3, ip
 8001e6c:	bfa8      	it	ge
 8001e6e:	4663      	movge	r3, ip

  /* Check saturation */
  if (wAux2 > (-INT16_MAX))
  {
    if (wAux2 < INT16_MAX)
 8001e70:	4562      	cmp	r2, ip
 8001e72:	bfa8      	it	ge
 8001e74:	4662      	movge	r2, ip
  else
  {
    wAux2 = (-INT16_MAX);
  }

  switch (pHandle->_Super.Sector)
 8001e76:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
 8001e7a:	42ab      	cmp	r3, r5
 8001e7c:	bfb8      	it	lt
 8001e7e:	462b      	movlt	r3, r5
  if (wAux2 > (-INT16_MAX))
 8001e80:	42aa      	cmp	r2, r5
 8001e82:	bfb8      	it	lt
 8001e84:	462a      	movlt	r2, r5
  switch (pHandle->_Super.Sector)
 8001e86:	2c05      	cmp	r4, #5
 8001e88:	f200 810b 	bhi.w	80020a2 <R1_GetPhaseCurrents+0x266>
 8001e8c:	e8df f004 	tbb	[pc, r4]
 8001e90:	485e301a 	.word	0x485e301a
 8001e94:	0371      	.short	0x0371
      break;
    }

    case SECTOR_6:
    {
      if ((IA_OK | IB_OK) == (pHandle->iflag & (IA_OK | IB_OK))) /* iA,-iB are available to be sampled */
 8001e96:	f890 40bf 	ldrb.w	r4, [r0, #191]	@ 0xbf
 8001e9a:	f004 0403 	and.w	r4, r4, #3
 8001e9e:	2c03      	cmp	r4, #3
 8001ea0:	f000 80a8 	beq.w	8001ff4 <R1_GetPhaseCurrents+0x1b8>
        wAux1 = -wAux1;
        hCurrB = (int16_t) wAux1;
      }
      else
      {
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0U) /* iA, or -iB is available to be sampled */
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	f000 8090 	beq.w	8001fca <R1_GetPhaseCurrents+0x18e>
        {
          if (1U == pHandle->_Super.AlignFlag) /* START Position     Aligning_angle=330 degree */
 8001eaa:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8001eae:	2d01      	cmp	r5, #1
 8001eb0:	f000 80e9 	beq.w	8002086 <R1_GetPhaseCurrents+0x24a>
              hCurrA = -hCurrB;
            }
          }
          else  /* Not START Position */
          {
            if (IA_OK == (pHandle->iflag & (IA_OK | IB_OK))) /* iA, is available to be sampled */
 8001eb4:	2c01      	cmp	r4, #1
 8001eb6:	f000 80be 	beq.w	8002036 <R1_GetPhaseCurrents+0x1fa>
              hCurrA = (int16_t)wAux2;
              hCurrB = pHandle->_Super.IbEst;
            }
            else  /* 0x02 -ib */
            {
              wAux1 = -wAux1;
 8001eba:	425b      	negs	r3, r3
              hCurrB = (int16_t)wAux1;
              hCurrA = pHandle->_Super.IaEst;
 8001ebc:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
              hCurrB = (int16_t)wAux1;
 8001ec0:	b21d      	sxth	r5, r3
              hCurrA = pHandle->_Super.IaEst;
 8001ec2:	e024      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
      if ((IA_OK | IC_OK) == (pHandle->iflag & (IA_OK | IC_OK))) /* iA and -iC are available to be sampled */
 8001ec4:	f890 40bf 	ldrb.w	r4, [r0, #191]	@ 0xbf
 8001ec8:	f004 0405 	and.w	r4, r4, #5
 8001ecc:	2c05      	cmp	r4, #5
 8001ece:	f000 8081 	beq.w	8001fd4 <R1_GetPhaseCurrents+0x198>
        if ((pHandle->iflag & (IA_OK | IC_OK)) != 0U) /* iA or -iC is available to be sampled */
 8001ed2:	2c00      	cmp	r4, #0
 8001ed4:	d062      	beq.n	8001f9c <R1_GetPhaseCurrents+0x160>
          if (1U == pHandle->_Super.AlignFlag) /* START Position     Aligning_angle=30 degree */
 8001ed6:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8001eda:	2d01      	cmp	r5, #1
 8001edc:	f000 80c0 	beq.w	8002060 <R1_GetPhaseCurrents+0x224>
            if (IA_OK == (pHandle->iflag & (IA_OK | IC_OK))) /* iA, is available to be sampled */
 8001ee0:	2c01      	cmp	r4, #1
              hCurrB = pHandle->_Super.IbEst;
 8001ee2:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
            if (IA_OK == (pHandle->iflag & (IA_OK | IC_OK))) /* iA, is available to be sampled */
 8001ee6:	f000 80a8 	beq.w	800203a <R1_GetPhaseCurrents+0x1fe>
              hCurrA = -hCurrB-hCurrC;
 8001eea:	1b5c      	subs	r4, r3, r5
 8001eec:	b224      	sxth	r4, r4
 8001eee:	e00e      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
      if ((IB_OK | IC_OK) == (pHandle->iflag & (IB_OK | IC_OK))) /* iB,-iC are available to be sampled */
 8001ef0:	f890 50bf 	ldrb.w	r5, [r0, #191]	@ 0xbf
 8001ef4:	f005 0506 	and.w	r5, r5, #6
 8001ef8:	2d06      	cmp	r5, #6
 8001efa:	d07f      	beq.n	8001ffc <R1_GetPhaseCurrents+0x1c0>
        if((pHandle->iflag & (IB_OK | IC_OK)) != 0U) /* iB, or -iC is available to be sampled */
 8001efc:	2d00      	cmp	r5, #0
 8001efe:	d15a      	bne.n	8001fb6 <R1_GetPhaseCurrents+0x17a>
          hCurrB = pHandle->_Super.IbEst;
 8001f00:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
          hCurrA = -hCurrB-hCurrC;
 8001f04:	f8b0 406c 	ldrh.w	r4, [r0, #108]	@ 0x6c
 8001f08:	442c      	add	r4, r5
 8001f0a:	4264      	negs	r4, r4
 8001f0c:	b224      	sxth	r4, r4

    default:
      break;
  }

  pHandle->CurrAOld = hCurrA;
 8001f0e:	f8a0 40ba 	strh.w	r4, [r0, #186]	@ 0xba
  pHandle->CurrBOld = hCurrB;
 8001f12:	f8a0 50bc 	strh.w	r5, [r0, #188]	@ 0xbc

  if (NULL == pStator_Currents)
 8001f16:	b109      	cbz	r1, 8001f1c <R1_GetPhaseCurrents+0xe0>
  {
    /* Nothing to do */
  }
  else
  {
    pStator_Currents->a = hCurrA;
 8001f18:	800c      	strh	r4, [r1, #0]
    pStator_Currents->b = hCurrB;
 8001f1a:	804d      	strh	r5, [r1, #2]
  }
}
 8001f1c:	bc30      	pop	{r4, r5}
 8001f1e:	4770      	bx	lr
      if ((IA_OK | IC_OK) == (pHandle->iflag & (IA_OK | IC_OK))) /* iC,-iA are available to be sampled */
 8001f20:	f890 40bf 	ldrb.w	r4, [r0, #191]	@ 0xbf
 8001f24:	f004 0405 	and.w	r4, r4, #5
 8001f28:	2c05      	cmp	r4, #5
 8001f2a:	d07c      	beq.n	8002026 <R1_GetPhaseCurrents+0x1ea>
        if((pHandle->iflag & (IA_OK | IC_OK)) != 0U) /* iC, or -iA is available to be sampled */
 8001f2c:	2c00      	cmp	r4, #0
 8001f2e:	d035      	beq.n	8001f9c <R1_GetPhaseCurrents+0x160>
          if (1U == pHandle->_Super.AlignFlag) /* START Position     Aligning_angle=210 degree */
 8001f30:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8001f34:	2d01      	cmp	r5, #1
 8001f36:	f000 809f 	beq.w	8002078 <R1_GetPhaseCurrents+0x23c>
              hCurrB = pHandle->_Super.IbEst;
 8001f3a:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
            if (IC_OK == (pHandle->iflag & (IA_OK | IC_OK))) /* iC, is available to be sampled */
 8001f3e:	2c04      	cmp	r4, #4
              hCurrA = -hCurrB-hCurrC;
 8001f40:	bf06      	itte	eq
 8001f42:	18ac      	addeq	r4, r5, r2
 8001f44:	4264      	negeq	r4, r4
              wAux1 = -wAux1;
 8001f46:	425c      	negne	r4, r3
              hCurrA = (int16_t)wAux1;
 8001f48:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8001f4a:	e7e0      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
      if ((IA_OK | IB_OK) == (pHandle->iflag & (IA_OK | IB_OK))) /* iB,-iA are available to be sampled */
 8001f4c:	f890 40bf 	ldrb.w	r4, [r0, #191]	@ 0xbf
 8001f50:	f004 0403 	and.w	r4, r4, #3
 8001f54:	2c03      	cmp	r4, #3
 8001f56:	d049      	beq.n	8001fec <R1_GetPhaseCurrents+0x1b0>
        if((pHandle->iflag & (IA_OK | IB_OK)) != 0U) /* iB, or -iA is available to be sampled */
 8001f58:	b344      	cbz	r4, 8001fac <R1_GetPhaseCurrents+0x170>
          if (1U == pHandle->_Super.AlignFlag) /* START Position    Aligning_angle=150 degree */
 8001f5a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8001f5e:	2d01      	cmp	r5, #1
 8001f60:	f000 8084 	beq.w	800206c <R1_GetPhaseCurrents+0x230>
            if (IB_OK == (pHandle->iflag & (IA_OK | IB_OK))) /* iB, is available to be sampled */
 8001f64:	2c02      	cmp	r4, #2
 8001f66:	d06a      	beq.n	800203e <R1_GetPhaseCurrents+0x202>
              wAux1 = -wAux1;
 8001f68:	425c      	negs	r4, r3
              hCurrB = pHandle->_Super.IbEst;
 8001f6a:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
              hCurrA = (int16_t)wAux1;
 8001f6e:	b224      	sxth	r4, r4
              hCurrB = pHandle->_Super.IbEst;
 8001f70:	e7cd      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
      if ((IB_OK | IC_OK) == (pHandle->iflag & (IB_OK | IC_OK))) /* iC,-iB are available to be sampled */
 8001f72:	f890 50bf 	ldrb.w	r5, [r0, #191]	@ 0xbf
 8001f76:	f005 0506 	and.w	r5, r5, #6
 8001f7a:	2d06      	cmp	r5, #6
 8001f7c:	d04b      	beq.n	8002016 <R1_GetPhaseCurrents+0x1da>
        if ((pHandle->iflag & (IB_OK | IC_OK)) != 0U) /* iC, or -iB is available to be sampled */
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d0be      	beq.n	8001f00 <R1_GetPhaseCurrents+0xc4>
          if (1U == pHandle->_Super.AlignFlag) /* START Position     Aligning_angle=270 degree */
 8001f82:	f890 4079 	ldrb.w	r4, [r0, #121]	@ 0x79
 8001f86:	2c01      	cmp	r4, #1
 8001f88:	d063      	beq.n	8002052 <R1_GetPhaseCurrents+0x216>
          hCurrA = pHandle->_Super.IaEst;
 8001f8a:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
            if (IC_OK == (pHandle->iflag & (IB_OK | IC_OK))) /* iC, is available to be sampled */
 8001f8e:	2d04      	cmp	r5, #4
              hCurrB = -hCurrA-hCurrC;
 8001f90:	bf06      	itte	eq
 8001f92:	18a5      	addeq	r5, r4, r2
 8001f94:	426d      	negeq	r5, r5
              wAux1 = -wAux1;
 8001f96:	425d      	negne	r5, r3
              hCurrB = (int16_t)wAux1;
 8001f98:	b22d      	sxth	r5, r5
              hCurrA = pHandle->_Super.IaEst;
 8001f9a:	e7b8      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
          hCurrA = pHandle->_Super.IaEst;
 8001f9c:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
          hCurrB = -hCurrA-hCurrC;
 8001fa0:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8001fa4:	4425      	add	r5, r4
 8001fa6:	426d      	negs	r5, r5
 8001fa8:	b22d      	sxth	r5, r5
 8001faa:	e7b0      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
          hCurrB = pHandle->_Super.IbEst;
 8001fac:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
          hCurrA = pHandle->_Super.IaEst;
 8001fb0:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
 8001fb4:	e7ab      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
          if (1U == pHandle->_Super.AlignFlag) /* START Position     Aligning_angle=90 degree */
 8001fb6:	f890 4079 	ldrb.w	r4, [r0, #121]	@ 0x79
 8001fba:	2c01      	cmp	r4, #1
 8001fbc:	d043      	beq.n	8002046 <R1_GetPhaseCurrents+0x20a>
            if (IB_OK == (pHandle->iflag & (IB_OK | IC_OK))) /* iB, is available to be sampled */
 8001fbe:	2d02      	cmp	r5, #2
          hCurrA = pHandle->_Super.IaEst;
 8001fc0:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
            if (IB_OK == (pHandle->iflag & (IB_OK | IC_OK))) /* iB, is available to be sampled */
 8001fc4:	d03d      	beq.n	8002042 <R1_GetPhaseCurrents+0x206>
              hCurrB = -hCurrA-hCurrC;
 8001fc6:	1b1d      	subs	r5, r3, r4
 8001fc8:	e7ee      	b.n	8001fa8 <R1_GetPhaseCurrents+0x16c>
          hCurrA = pHandle->_Super.IaEst;
 8001fca:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
          hCurrB = pHandle->_Super.IbEst;
 8001fce:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
 8001fd2:	e79c      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        hCurrA = (int16_t)wAux2;
 8001fd4:	1a9d      	subs	r5, r3, r2
        hCurrB = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <R1_GetPhaseCurrents+0x270>)
 8001fd8:	429d      	cmp	r5, r3
        hCurrA = (int16_t)wAux2;
 8001fda:	b214      	sxth	r4, r2
        hCurrB = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8001fdc:	db29      	blt.n	8002032 <R1_GetPhaseCurrents+0x1f6>
        hCurrB = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8001fde:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8001fe2:	429d      	cmp	r5, r3
 8001fe4:	dde0      	ble.n	8001fa8 <R1_GetPhaseCurrents+0x16c>
 8001fe6:	f647 75ff 	movw	r5, #32767	@ 0x7fff
 8001fea:	e790      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        wAux1 = -wAux1;
 8001fec:	425c      	negs	r4, r3
        hCurrB = (int16_t)wAux2;
 8001fee:	b215      	sxth	r5, r2
        hCurrA = (int16_t)wAux1;
 8001ff0:	b224      	sxth	r4, r4
 8001ff2:	e78c      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        wAux1 = -wAux1;
 8001ff4:	425d      	negs	r5, r3
        hCurrA = (int16_t) wAux2;
 8001ff6:	b214      	sxth	r4, r2
        hCurrB = (int16_t) wAux1;
 8001ff8:	b22d      	sxth	r5, r5
 8001ffa:	e788      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        hCurrB = (int16_t)wAux2;
 8001ffc:	1a9c      	subs	r4, r3, r2
        hCurrA = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <R1_GetPhaseCurrents+0x270>)
 8002000:	429c      	cmp	r4, r3
        hCurrB = (int16_t)wAux2;
 8002002:	b215      	sxth	r5, r2
        hCurrA = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8002004:	db0d      	blt.n	8002022 <R1_GetPhaseCurrents+0x1e6>
        hCurrA = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8002006:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 800200a:	429c      	cmp	r4, r3
 800200c:	f77f af7e 	ble.w	8001f0c <R1_GetPhaseCurrents+0xd0>
 8002010:	f647 74ff 	movw	r4, #32767	@ 0x7fff
 8002014:	e77b      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        wAux1 = -wAux1;
 8002016:	425d      	negs	r5, r3
        tempCurent = (-wAux1 - wAux2);  /* (-hCurrB - hCurrC) */
 8002018:	1a9c      	subs	r4, r3, r2
        hCurrA = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <R1_GetPhaseCurrents+0x270>)
 800201c:	429c      	cmp	r4, r3
        hCurrB = (int16_t)wAux1;
 800201e:	b22d      	sxth	r5, r5
        hCurrA = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8002020:	daf1      	bge.n	8002006 <R1_GetPhaseCurrents+0x1ca>
 8002022:	4c21      	ldr	r4, [pc, #132]	@ (80020a8 <R1_GetPhaseCurrents+0x26c>)
 8002024:	e773      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
        wAux1 = -wAux1;
 8002026:	425c      	negs	r4, r3
        tempCurent = (-wAux1 - wAux2);  /* (-hCurrA - hCurrC) */
 8002028:	1a9d      	subs	r5, r3, r2
        hCurrB = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <R1_GetPhaseCurrents+0x270>)
 800202c:	429d      	cmp	r5, r3
        hCurrA = (int16_t)wAux1;
 800202e:	b224      	sxth	r4, r4
        hCurrB = (int16_t)((tempCurent <= (-INT16_MAX)) ? (-INT16_MAX) :
 8002030:	dad5      	bge.n	8001fde <R1_GetPhaseCurrents+0x1a2>
 8002032:	4d1d      	ldr	r5, [pc, #116]	@ (80020a8 <R1_GetPhaseCurrents+0x26c>)
 8002034:	e76b      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
              hCurrB = pHandle->_Super.IbEst;
 8002036:	f9b0 506a 	ldrsh.w	r5, [r0, #106]	@ 0x6a
              hCurrA = (int16_t)wAux2;
 800203a:	b214      	sxth	r4, r2
              hCurrB = pHandle->_Super.IbEst;
 800203c:	e767      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
              hCurrA = pHandle->_Super.IaEst;
 800203e:	f9b0 4068 	ldrsh.w	r4, [r0, #104]	@ 0x68
              hCurrB = (int16_t)wAux2;
 8002042:	b215      	sxth	r5, r2
              hCurrA = pHandle->_Super.IaEst;
 8002044:	e763      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IB_OK == (pHandle->iflag & (IB_OK | IC_OK))) /* iB, is available to be sampled */
 8002046:	2d02      	cmp	r5, #2
              hCurrB = (int16_t)wAux2;
 8002048:	bf0c      	ite	eq
 800204a:	b215      	sxtheq	r5, r2
              hCurrB = -hCurrC;
 800204c:	b21d      	sxthne	r5, r3
              hCurrA = 0;
 800204e:	2400      	movs	r4, #0
 8002050:	e75d      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IC_OK == (pHandle->iflag & (IB_OK | IC_OK))) /* iC, is available to be sampled */
 8002052:	2d04      	cmp	r5, #4
              hCurrB = -hCurrC;
 8002054:	bf0c      	ite	eq
 8002056:	4255      	negeq	r5, r2
              wAux1 = -wAux1;
 8002058:	425d      	negne	r5, r3
              hCurrB = (int16_t)wAux1;
 800205a:	b22d      	sxth	r5, r5
              hCurrA = 0;
 800205c:	2400      	movs	r4, #0
 800205e:	e756      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IA_OK == (pHandle->iflag & (IA_OK | IC_OK))) /* iA is available to be sampled and not iC */
 8002060:	2c01      	cmp	r4, #1
              hCurrA = (int16_t)wAux2;
 8002062:	bf0c      	ite	eq
 8002064:	b214      	sxtheq	r4, r2
              hCurrA = -hCurrC;
 8002066:	b21c      	sxthne	r4, r3
              hCurrB = 0;
 8002068:	2500      	movs	r5, #0
 800206a:	e750      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IB_OK == (pHandle->iflag & (IA_OK | IB_OK))) /* iB, is available to be sampled */
 800206c:	2c02      	cmp	r4, #2
 800206e:	d014      	beq.n	800209a <R1_GetPhaseCurrents+0x25e>
              wAux1 = -wAux1;
 8002070:	425c      	negs	r4, r3
              hCurrA = (int16_t)wAux1;
 8002072:	b224      	sxth	r4, r4
              hCurrB = -hCurrA;
 8002074:	b21d      	sxth	r5, r3
 8002076:	e74a      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IC_OK == (pHandle->iflag & (IA_OK | IC_OK))) /* iC, is available to be sampled */
 8002078:	2c04      	cmp	r4, #4
              hCurrA = -hCurrC;
 800207a:	bf0c      	ite	eq
 800207c:	4254      	negeq	r4, r2
              wAux1 = -wAux1;
 800207e:	425c      	negne	r4, r3
              hCurrA = (int16_t)wAux1;
 8002080:	b224      	sxth	r4, r4
              hCurrB = 0;
 8002082:	2500      	movs	r5, #0
 8002084:	e743      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
            if (IA_OK == (pHandle->iflag & (IA_OK | IB_OK))) /* iA, is available to be sampled */
 8002086:	2c01      	cmp	r4, #1
 8002088:	d003      	beq.n	8002092 <R1_GetPhaseCurrents+0x256>
              wAux1 = -wAux1;
 800208a:	425d      	negs	r5, r3
              hCurrB = (int16_t)wAux1;
 800208c:	b22d      	sxth	r5, r5
              hCurrA = -hCurrB;
 800208e:	b21c      	sxth	r4, r3
 8002090:	e73d      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
              hCurrB = -hCurrA;
 8002092:	4255      	negs	r5, r2
              hCurrA = (int16_t)wAux2;
 8002094:	b214      	sxth	r4, r2
              hCurrB = -hCurrA;
 8002096:	b22d      	sxth	r5, r5
 8002098:	e739      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
              hCurrA = -hCurrB;
 800209a:	4254      	negs	r4, r2
              hCurrB = (int16_t)wAux2;
 800209c:	b215      	sxth	r5, r2
              hCurrA = -hCurrB;
 800209e:	b224      	sxth	r4, r4
 80020a0:	e735      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
  switch (pHandle->_Super.Sector)
 80020a2:	2500      	movs	r5, #0
 80020a4:	462c      	mov	r4, r5
 80020a6:	e732      	b.n	8001f0e <R1_GetPhaseCurrents+0xd2>
 80020a8:	ffff8001 	.word	0xffff8001
 80020ac:	ffff8002 	.word	0xffff8002

080020b0 <R1_HFCurrentsCalibration>:
  */
static void R1_HFCurrentsCalibration(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020b0:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
{
 80020b4:	b410      	push	{r4}
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80020b6:	e9d2 4300 	ldrd	r4, r3, [r2]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80020ba:	f06f 0201 	mvn.w	r2, #1
 80020be:	611a      	str	r2, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020c6:	605a      	str	r2, [r3, #4]
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Disabling the External triggering for ADCx */
  LL_TIM_SetTriggerOutput2(TIMx, LL_TIM_TRGO_RESET);

  if (pHandle->Index < NB_CONVERSIONS)
 80020c8:	f890 30be 	ldrb.w	r3, [r0, #190]	@ 0xbe
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80c      	bhi.n	80020ea <R1_HFCurrentsCalibration+0x3a>
  {
    pHandle->PhaseOffset += ADCx->JDR2 ;
 80020d0:	f8d4 4084 	ldr.w	r4, [r4, #132]	@ 0x84
    pHandle->Index++;
 80020d4:	f890 30be 	ldrb.w	r3, [r0, #190]	@ 0xbe
    pHandle->PhaseOffset += ADCx->JDR2 ;
 80020d8:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
    pHandle->Index++;
 80020dc:	3301      	adds	r3, #1
    pHandle->PhaseOffset += ADCx->JDR2 ;
 80020de:	4422      	add	r2, r4
    pHandle->Index++;
 80020e0:	b2db      	uxtb	r3, r3
    pHandle->PhaseOffset += ADCx->JDR2 ;
 80020e2:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
    pHandle->Index++;
 80020e6:	f880 30be 	strb.w	r3, [r0, #190]	@ 0xbe
  else
  {
    /* Nothing to do */
  }

  if (NULL == pStator_Currents)
 80020ea:	b109      	cbz	r1, 80020f0 <R1_HFCurrentsCalibration+0x40>
    /* Nothing to do */
  }
  else
  {
    /* During offset calibration no current is flowing in the phases */
    pStator_Currents->a = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	600b      	str	r3, [r1, #0]
    pStator_Currents->b = 0;
  }
}
 80020f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop

080020f8 <R1_SetADCSampPointPolarization>:
  */
static uint16_t R1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
  /* Derived class members container */
  PWMC_R1_Handle_t *pHandle = (PWMC_R1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80020f8:	f8d0 10c4 	ldr.w	r1, [r0, #196]	@ 0xc4

  uint16_t hAux;
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1U)
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80020fc:	f8b0 c0b2 	ldrh.w	ip, [r0, #178]	@ 0xb2
 8002100:	8b0b      	ldrh	r3, [r1, #24]
{
 8002102:	4602      	mov	r2, r0
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002104:	8ac8      	ldrh	r0, [r1, #22]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002106:	6849      	ldr	r1, [r1, #4]
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002108:	4403      	add	r3, r0
 800210a:	b29b      	uxth	r3, r3
 800210c:	ebc3 005c 	rsb	r0, r3, ip, lsr #1
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1U)
                    + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002110:	eb03 035c 	add.w	r3, r3, ip, lsr #1
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002114:	b280      	uxth	r0, r0
                    + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002116:	b29b      	uxth	r3, r3
{
 8002118:	b410      	push	{r4}
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800211a:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1U)
 800211c:	f8a2 00b4 	strh.w	r0, [r2, #180]	@ 0xb4
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1U)
 8002120:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
 8002124:	6488      	str	r0, [r1, #72]	@ 0x48
  else
  {
    hAux = MC_DURATION;
  }

  if (1U == pHandle->_Super.SWerror)
 8002126:	f8b2 0056 	ldrh.w	r0, [r2, #86]	@ 0x56
  WRITE_REG(TIMx->CCR6, CompareValue);
 800212a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800212c:	690b      	ldr	r3, [r1, #16]
  {
    /* Nothing to do */
  }

  return (hAux);
}
 800212e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (1U == pHandle->_Super.SWerror)
 8002132:	2801      	cmp	r0, #1
    pHandle->_Super.SWerror = 0U;
 8002134:	bf0a      	itet	eq
 8002136:	2300      	moveq	r3, #0
 8002138:	f003 0001 	andne.w	r0, r3, #1
 800213c:	f8a2 3056 	strheq.w	r3, [r2, #86]	@ 0x56
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <R1_CalcDutyCycles>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t R1_CalcDutyCycles(PWMC_Handle_t *pHdl)
{
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	b08d      	sub	sp, #52	@ 0x34
  uint8_t midVal;
  uint8_t minVal;
  uint8_t max_bad_flag;
  uint8_t min_bad_flag;

  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 800214a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800214c:	920a      	str	r2, [sp, #40]	@ 0x28
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;

  maxVal = (uint8_t)pHandle->_Super.highDuty;
  midVal = (uint8_t)pHandle->_Super.midDuty;
 800214e:	f890 205a 	ldrb.w	r2, [r0, #90]	@ 0x5a
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002152:	f8d0 40c4 	ldr.w	r4, [r0, #196]	@ 0xc4
  maxVal = (uint8_t)pHandle->_Super.highDuty;
 8002156:	f890 105c 	ldrb.w	r1, [r0, #92]	@ 0x5c
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 800215a:	f8b0 e054 	ldrh.w	lr, [r0, #84]	@ 0x54
  aCCRval[0] = (int16_t)pHandle->_Super.CntPhA;
 800215e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  aCCRval[2] = (int16_t)pHandle->_Super.CntPhC;
 8002162:	f8ad e02c 	strh.w	lr, [sp, #44]	@ 0x2c
{
 8002166:	4603      	mov	r3, r0
  minVal = (uint8_t)pHandle->_Super.lowDuty;
  pHandle->iflag = 0x00;

  /* Phase-shift and set iflag */
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002168:	a80c      	add	r0, sp, #48	@ 0x30
 800216a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800216e:	9103      	str	r1, [sp, #12]
 8002170:	f932 0c08 	ldrsh.w	r0, [r2, #-8]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002174:	f8d4 a004 	ldr.w	sl, [r4, #4]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002178:	f8d4 b008 	ldr.w	fp, [r4, #8]
  minVal = (uint8_t)pHandle->_Super.lowDuty;
 800217c:	f893 7058 	ldrb.w	r7, [r3, #88]	@ 0x58
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002180:	9400      	str	r4, [sp, #0]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 8002182:	aa0c      	add	r2, sp, #48	@ 0x30
 8002184:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  pHandle->iflag = 0x00;
 8002188:	2100      	movs	r1, #0
 800218a:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 800218e:	f932 8c08 	ldrsh.w	r8, [r2, #-8]
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 8002192:	8aa2      	ldrh	r2, [r4, #20]
  submid_min = aCCRval[midVal] - aCCRval[minVal];
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
  pHandle->aShiftval[0]=0;
 8002194:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 8002198:	ac0c      	add	r4, sp, #48	@ 0x30
  pHandle->aShiftval[1]=0;
  pHandle->aShiftval[2]=0;
 800219a:	f8a3 10b0 	strh.w	r1, [r3, #176]	@ 0xb0
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 800219e:	eb04 0147 	add.w	r1, r4, r7, lsl #1
  {
    pHandle->iflag |= ALFLAG[maxVal];
  }
  else
  {
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80021a2:	9c00      	ldr	r4, [sp, #0]
  submid_min = aCCRval[midVal] - aCCRval[minVal];
 80021a4:	f931 9c08 	ldrsh.w	r9, [r1, #-8]
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80021a8:	8b24      	ldrh	r4, [r4, #24]
 80021aa:	9406      	str	r4, [sp, #24]
 80021ac:	9c00      	ldr	r4, [sp, #0]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 80021ae:	9004      	str	r0, [sp, #16]
 80021b0:	fa1f f688 	uxth.w	r6, r8
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80021b4:	f9b4 4018 	ldrsh.w	r4, [r4, #24]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 80021b8:	9609      	str	r6, [sp, #36]	@ 0x24
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 80021ba:	1ab1      	subs	r1, r6, r2
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 80021bc:	9407      	str	r4, [sp, #28]
  aCCRval[1] = (int16_t)pHandle->_Super.CntPhB;
 80021be:	f8b3 6052 	ldrh.w	r6, [r3, #82]	@ 0x52
       > (int16_t)(pHandle->Half_PWMPeriod))
 80021c2:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	@ 0xb2
 80021c6:	9401      	str	r4, [sp, #4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
  }
  else if ((1U == max_bad_flag) && (1U == min_bad_flag))
  {
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 80021c8:	9c00      	ldr	r4, [sp, #0]
 80021ca:	8ae4      	ldrh	r4, [r4, #22]
 80021cc:	9405      	str	r4, [sp, #20]
  submax_mid = aCCRval[maxVal] - aCCRval[midVal];
 80021ce:	fa1f fc80 	uxth.w	ip, r0
    pHandle->iflag |= ALFLAG[minVal];
 80021d2:	4ca9      	ldr	r4, [pc, #676]	@ (8002478 <R1_CalcDutyCycles+0x334>)
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 80021d4:	eba1 010c 	sub.w	r1, r1, ip
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80021d8:	ebac 0002 	sub.w	r0, ip, r2
    pHandle->iflag |= ALFLAG[minVal];
 80021dc:	5de4      	ldrb	r4, [r4, r7]
 80021de:	9402      	str	r4, [sp, #8]
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80021e0:	eba0 0009 	sub.w	r0, r0, r9
  submax_mid_deltmin = submax_mid - (int16_t)pHandle->pParams_str->TMin;
 80021e4:	b209      	sxth	r1, r1
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80021e6:	b284      	uxth	r4, r0
  if (submax_mid_deltmin > 0)
 80021e8:	2900      	cmp	r1, #0
  submid_min_deltmin = submid_min - (int16_t)pHandle->pParams_str->TMin;
 80021ea:	9408      	str	r4, [sp, #32]
 80021ec:	b200      	sxth	r0, r0
  if (submax_mid_deltmin > 0)
 80021ee:	f340 8088 	ble.w	8002302 <R1_CalcDutyCycles+0x1be>
    pHandle->iflag |= ALFLAG[maxVal];
 80021f2:	4ca1      	ldr	r4, [pc, #644]	@ (8002478 <R1_CalcDutyCycles+0x334>)
 80021f4:	9903      	ldr	r1, [sp, #12]
  if (submid_min_deltmin > 0)
 80021f6:	2800      	cmp	r0, #0
    pHandle->iflag |= ALFLAG[maxVal];
 80021f8:	5c61      	ldrb	r1, [r4, r1]
  if (submid_min_deltmin > 0)
 80021fa:	f340 8097 	ble.w	800232c <R1_CalcDutyCycles+0x1e8>
    pHandle->iflag |= ALFLAG[minVal];
 80021fe:	9802      	ldr	r0, [sp, #8]
 8002200:	4301      	orrs	r1, r0
 8002202:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
 8002206:	4630      	mov	r0, r6
 8002208:	4671      	mov	r1, lr
 800220a:	462f      	mov	r7, r5
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 800220c:	9c05      	ldr	r4, [sp, #20]
 800220e:	1b12      	subs	r2, r2, r4
 8002210:	4462      	add	r2, ip
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002212:	ebac 0804 	sub.w	r8, ip, r4
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 8002216:	b212      	sxth	r2, r2
    SamplePoint1 = (int16_t)aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002218:	fa0f f888 	sxth.w	r8, r8
  {
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
    SamplePoint1 = aCCRval[midVal];
  }

  if ((SamplePoint2-SamplePoint1) < (int16_t)pHandle->pParams_str->hTADConv)
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	eba2 0908 	sub.w	r9, r2, r8
 8002222:	45a1      	cmp	r9, r4
 8002224:	da19      	bge.n	800225a <R1_CalcDutyCycles+0x116>
  {
    pHandle->iflag &=  ALFLAG[maxVal];
    pHandle->iflag &= ~ALFLAG[minVal];
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002226:	e9dd 2405 	ldrd	r2, r4, [sp, #20]
 800222a:	4422      	add	r2, r4
 800222c:	9205      	str	r2, [sp, #20]
    pHandle->iflag &=  ALFLAG[maxVal];
 800222e:	4c92      	ldr	r4, [pc, #584]	@ (8002478 <R1_CalcDutyCycles+0x334>)
 8002230:	9a03      	ldr	r2, [sp, #12]
 8002232:	f893 80bf 	ldrb.w	r8, [r3, #191]	@ 0xbf
 8002236:	f814 9002 	ldrb.w	r9, [r4, r2]
    pHandle->iflag &= ~ALFLAG[minVal];
 800223a:	9a02      	ldr	r2, [sp, #8]
    pHandle->iflag &=  ALFLAG[maxVal];
 800223c:	ea08 0809 	and.w	r8, r8, r9
    pHandle->iflag &= ~ALFLAG[minVal];
 8002240:	ea28 0802 	bic.w	r8, r8, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002244:	9a01      	ldr	r2, [sp, #4]
    pHandle->iflag &= ~ALFLAG[minVal];
 8002246:	f883 80bf 	strb.w	r8, [r3, #191]	@ 0xbf
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 800224a:	eb02 78d2 	add.w	r8, r2, r2, lsr #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 800224e:	9a05      	ldr	r2, [sp, #20]
 8002250:	eb02 0268 	add.w	r2, r2, r8, asr #1
 8002254:	b212      	sxth	r2, r2
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod /2 ;
 8002256:	ea4f 0868 	mov.w	r8, r8, asr #1
  {
    /* Nothing to do */
  }

  /* Saturate sampling point */
  if ((SamplePoint2 >= (int16_t)(pHandle->Half_PWMPeriod)) || (SamplePoint2 <= 0))
 800225a:	9c01      	ldr	r4, [sp, #4]
 800225c:	42a2      	cmp	r2, r4
 800225e:	f280 8090 	bge.w	8002382 <R1_CalcDutyCycles+0x23e>
 8002262:	2a00      	cmp	r2, #0
 8002264:	f340 808d 	ble.w	8002382 <R1_CalcDutyCycles+0x23e>
  }
  else
  {
    /* Nothing to do */
  }
  if ((SamplePoint1 >= (int16_t)pHandle->Half_PWMPeriod) || (SamplePoint1 <= 0))
 8002268:	9c01      	ldr	r4, [sp, #4]
 800226a:	45a0      	cmp	r8, r4
 800226c:	f280 8081 	bge.w	8002372 <R1_CalcDutyCycles+0x22e>
 8002270:	f1b8 0f00 	cmp.w	r8, #0
 8002274:	dd7d      	ble.n	8002372 <R1_CalcDutyCycles+0x22e>
 8002276:	f8cd 8010 	str.w	r8, [sp, #16]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800227a:	9c00      	ldr	r4, [sp, #0]
 800227c:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 800247c <R1_CalcDutyCycles+0x338>
 8002280:	6924      	ldr	r4, [r4, #16]
  /* Second half PWM period CCR value transfered by DMA */
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];

  if (true == pHandle->TCDoneFlag)
 8002282:	f893 80c2 	ldrb.w	r8, [r3, #194]	@ 0xc2
 8002286:	f81c 4004 	ldrb.w	r4, [ip, r4]
 800228a:	f85b c004 	ldr.w	ip, [fp, r4]
 800228e:	f02c 0c02 	bic.w	ip, ip, #2
 8002292:	f84b c004 	str.w	ip, [fp, r4]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002296:	f8a3 5098 	strh.w	r5, [r3, #152]	@ 0x98
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800229a:	f8a3 609a 	strh.w	r6, [r3, #154]	@ 0x9a
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800229e:	f8a3 e09c 	strh.w	lr, [r3, #156]	@ 0x9c
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 80022a2:	f8a3 70a0 	strh.w	r7, [r3, #160]	@ 0xa0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 80022a6:	f8a3 00a2 	strh.w	r0, [r3, #162]	@ 0xa2
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 80022aa:	f8a3 10a4 	strh.w	r1, [r3, #164]	@ 0xa4
  if (true == pHandle->TCDoneFlag)
 80022ae:	f1b8 0f00 	cmp.w	r8, #0
 80022b2:	d00b      	beq.n	80022cc <R1_CalcDutyCycles+0x188>
  {
    /* First half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 80022b4:	f8a3 5088 	strh.w	r5, [r3, #136]	@ 0x88
    pHandle->DmaBuffCCR[1] = pHandle->DmaBuffCCR_latch[1];
 80022b8:	f8a3 608a 	strh.w	r6, [r3, #138]	@ 0x8a
    pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 80022bc:	f8a3 e08c 	strh.w	lr, [r3, #140]	@ 0x8c
    /* Second half PWM period CCR value transfered by DMA */
    pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 80022c0:	f8a3 7090 	strh.w	r7, [r3, #144]	@ 0x90
    pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
 80022c4:	f8a3 0092 	strh.w	r0, [r3, #146]	@ 0x92
    pHandle->DmaBuffCCR[6]= pHandle->DmaBuffCCR_latch[6];
 80022c8:	f8a3 1094 	strh.w	r1, [r3, #148]	@ 0x94
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80022cc:	f85b 1004 	ldr.w	r1, [fp, r4]
  }
  else
  {
    hAux = MC_DURATION;
  }
  if (1U == pHandle->_Super.SWerror)
 80022d0:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 80022d4:	f041 0102 	orr.w	r1, r1, #2
 80022d8:	f84b 1004 	str.w	r1, [fp, r4]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80022dc:	f8da 1048 	ldr.w	r1, [sl, #72]	@ 0x48
 80022e0:	9904      	ldr	r1, [sp, #16]
 80022e2:	f8ca 1048 	str.w	r1, [sl, #72]	@ 0x48
  WRITE_REG(TIMx->CCR6, CompareValue);
 80022e6:	f8ca 204c 	str.w	r2, [sl, #76]	@ 0x4c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022ea:	f8da 2010 	ldr.w	r2, [sl, #16]
 80022ee:	2801      	cmp	r0, #1
 80022f0:	bf12      	itee	ne
 80022f2:	f002 0001 	andne.w	r0, r2, #1
  {
    hAux = MC_DURATION;
    pHandle->_Super.SWerror = 0U;
 80022f6:	2200      	moveq	r2, #0
 80022f8:	f8a3 2056 	strheq.w	r2, [r3, #86]	@ 0x56
  {
    /* Nothing to do */
  }

  return (hAux);
}
 80022fc:	b00d      	add	sp, #52	@ 0x34
 80022fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((1 - submax_mid_deltmin + aCCRval[maxVal] + (int16_t) pHandle->pParams_str->hTADConv)
 8002302:	9c07      	ldr	r4, [sp, #28]
 8002304:	f1c1 0101 	rsb	r1, r1, #1
 8002308:	4441      	add	r1, r8
 800230a:	4421      	add	r1, r4
 800230c:	9c01      	ldr	r4, [sp, #4]
 800230e:	42a1      	cmp	r1, r4
 8002310:	dc6a      	bgt.n	80023e8 <R1_CalcDutyCycles+0x2a4>
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002312:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8002314:	1c51      	adds	r1, r2, #1
 8002316:	4461      	add	r1, ip
 8002318:	1b09      	subs	r1, r1, r4
 800231a:	9c03      	ldr	r4, [sp, #12]
 800231c:	eb03 0844 	add.w	r8, r3, r4, lsl #1
  if (submid_min_deltmin > 0)
 8002320:	2800      	cmp	r0, #0
      pHandle->aShiftval[maxVal] = 1U - (uint16_t)submax_mid_deltmin;
 8002322:	f8a8 10ac 	strh.w	r1, [r8, #172]	@ 0xac
      pHandle->iflag |= ALFLAG[maxVal];
 8002326:	4954      	ldr	r1, [pc, #336]	@ (8002478 <R1_CalcDutyCycles+0x334>)
 8002328:	5d09      	ldrb	r1, [r1, r4]
  if (submid_min_deltmin > 0)
 800232a:	dc6e      	bgt.n	800240a <R1_CalcDutyCycles+0x2c6>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 800232c:	3801      	subs	r0, #1
 800232e:	eb10 0f09 	cmn.w	r0, r9
 8002332:	d434      	bmi.n	800239e <R1_CalcDutyCycles+0x25a>
      pHandle->iflag |= ALFLAG[minVal];
 8002334:	9802      	ldr	r0, [sp, #8]
 8002336:	4301      	orrs	r1, r0
 8002338:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 800233c:	9908      	ldr	r1, [sp, #32]
 800233e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002342:	3901      	subs	r1, #1
 8002344:	f8a7 10ac 	strh.w	r1, [r7, #172]	@ 0xac
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002348:	f8b3 00ac 	ldrh.w	r0, [r3, #172]	@ 0xac
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800234c:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	@ 0xae
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002350:	f8b3 80b0 	ldrh.w	r8, [r3, #176]	@ 0xb0
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002354:	1a2f      	subs	r7, r5, r0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002356:	4428      	add	r0, r5
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002358:	b285      	uxth	r5, r0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 800235a:	1a70      	subs	r0, r6, r1
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800235c:	4431      	add	r1, r6
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800235e:	b28e      	uxth	r6, r1
 8002360:	ebae 0108 	sub.w	r1, lr, r8
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002364:	44f0      	add	r8, lr
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002366:	b2bf      	uxth	r7, r7
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 8002368:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 800236a:	b289      	uxth	r1, r1
 800236c:	fa1f fe88 	uxth.w	lr, r8
 8002370:	e74c      	b.n	800220c <R1_CalcDutyCycles+0xc8>
    pHandle->iflag &= ~ALFLAG[minVal];
 8002372:	f893 c0bf 	ldrb.w	ip, [r3, #191]	@ 0xbf
 8002376:	9c02      	ldr	r4, [sp, #8]
 8002378:	ea2c 0c04 	bic.w	ip, ip, r4
 800237c:	f883 c0bf 	strb.w	ip, [r3, #191]	@ 0xbf
    SamplePoint1 = aCCRval[midVal];
 8002380:	e77b      	b.n	800227a <R1_CalcDutyCycles+0x136>
    pHandle->iflag &=  ALFLAG[maxVal];
 8002382:	4a3d      	ldr	r2, [pc, #244]	@ (8002478 <R1_CalcDutyCycles+0x334>)
 8002384:	9c03      	ldr	r4, [sp, #12]
 8002386:	f812 9004 	ldrb.w	r9, [r2, r4]
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 800238a:	9a06      	ldr	r2, [sp, #24]
 800238c:	4462      	add	r2, ip
    pHandle->iflag &=  ALFLAG[maxVal];
 800238e:	f893 c0bf 	ldrb.w	ip, [r3, #191]	@ 0xbf
 8002392:	ea0c 0c09 	and.w	ip, ip, r9
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002396:	b212      	sxth	r2, r2
    pHandle->iflag &=  ALFLAG[maxVal];
 8002398:	f883 c0bf 	strb.w	ip, [r3, #191]	@ 0xbf
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 800239c:	e764      	b.n	8002268 <R1_CalcDutyCycles+0x124>
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 800239e:	9805      	ldr	r0, [sp, #20]
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80023a0:	f8b3 70ac 	ldrh.w	r7, [r3, #172]	@ 0xac
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80023a4:	1a12      	subs	r2, r2, r0
      pHandle->iflag &= ~ALFLAG[minVal];
 80023a6:	9802      	ldr	r0, [sp, #8]
 80023a8:	ea21 0100 	bic.w	r1, r1, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80023ac:	f8b3 00ae 	ldrh.w	r0, [r3, #174]	@ 0xae
      pHandle->iflag &= ~ALFLAG[minVal];
 80023b0:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80023b4:	eb05 0807 	add.w	r8, r5, r7
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80023b8:	f8b3 10b0 	ldrh.w	r1, [r3, #176]	@ 0xb0
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 80023bc:	1bef      	subs	r7, r5, r7
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 80023be:	fa1f f588 	uxth.w	r5, r8
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80023c2:	eb06 0800 	add.w	r8, r6, r0
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80023c6:	4462      	add	r2, ip
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 80023c8:	1a30      	subs	r0, r6, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 80023ca:	fa1f f688 	uxth.w	r6, r8
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80023ce:	eb0e 0801 	add.w	r8, lr, r1
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 80023d2:	ebae 0101 	sub.w	r1, lr, r1
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->TMin - (int16_t)pHandle->pParams_str->TSample;
 80023d6:	b212      	sxth	r2, r2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 80023d8:	fa1f fe88 	uxth.w	lr, r8
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 80023dc:	b2bf      	uxth	r7, r7
    SamplePoint1 = aCCRval[midVal];
 80023de:	f8dd 8010 	ldr.w	r8, [sp, #16]
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 80023e2:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 80023e4:	b289      	uxth	r1, r1
 80023e6:	e719      	b.n	800221c <R1_CalcDutyCycles+0xd8>
  if (submid_min_deltmin > 0)
 80023e8:	2800      	cmp	r0, #0
 80023ea:	dd13      	ble.n	8002414 <R1_CalcDutyCycles+0x2d0>
    pHandle->iflag |= ALFLAG[minVal];
 80023ec:	9a02      	ldr	r2, [sp, #8]
 80023ee:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
 80023f2:	4671      	mov	r1, lr
 80023f4:	4630      	mov	r0, r6
 80023f6:	462f      	mov	r7, r5
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 80023f8:	9a05      	ldr	r2, [sp, #20]
 80023fa:	ebac 0802 	sub.w	r8, ip, r2
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 80023fe:	9a06      	ldr	r2, [sp, #24]
 8002400:	4462      	add	r2, ip
    SamplePoint1 = aCCRval[midVal] - (int16_t)pHandle->pParams_str->TSample;
 8002402:	fa0f f888 	sxth.w	r8, r8
    SamplePoint2 = aCCRval[midVal] + (int16_t)pHandle->pParams_str->hTADConv;
 8002406:	b212      	sxth	r2, r2
 8002408:	e708      	b.n	800221c <R1_CalcDutyCycles+0xd8>
    pHandle->iflag |= ALFLAG[minVal];
 800240a:	9802      	ldr	r0, [sp, #8]
 800240c:	4301      	orrs	r1, r0
 800240e:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
  if ((0U == max_bad_flag) && (0U == min_bad_flag))
 8002412:	e799      	b.n	8002348 <R1_CalcDutyCycles+0x204>
    if ((submid_min_deltmin - 1 + aCCRval[minVal]) < 0)
 8002414:	3801      	subs	r0, #1
 8002416:	eb10 0f09 	cmn.w	r0, r9
 800241a:	d50d      	bpl.n	8002438 <R1_CalcDutyCycles+0x2f4>
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 800241c:	eb04 78d4 	add.w	r8, r4, r4, lsr #31
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002420:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
 8002424:	4422      	add	r2, r4
 8002426:	eb02 0268 	add.w	r2, r2, r8, asr #1
 800242a:	4671      	mov	r1, lr
 800242c:	4630      	mov	r0, r6
 800242e:	462f      	mov	r7, r5
    SamplePoint1 = (int16_t)pHandle->Half_PWMPeriod / 2;
 8002430:	ea4f 0868 	mov.w	r8, r8, asr #1
    SamplePoint2 = SamplePoint1 + (int16_t)pHandle->pParams_str->TSample + (int16_t)pHandle->pParams_str->hTADConv;
 8002434:	b212      	sxth	r2, r2
 8002436:	e6f1      	b.n	800221c <R1_CalcDutyCycles+0xd8>
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002438:	9a08      	ldr	r2, [sp, #32]
      pHandle->iflag |= ALFLAG[minVal];
 800243a:	9902      	ldr	r1, [sp, #8]
 800243c:	f883 10bf 	strb.w	r1, [r3, #191]	@ 0xbf
      pHandle->aShiftval[minVal] = (uint16_t)submid_min_deltmin - 1U;
 8002440:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002444:	3a01      	subs	r2, #1
 8002446:	f8a7 20ac 	strh.w	r2, [r7, #172]	@ 0xac
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 800244a:	f8b3 70ac 	ldrh.w	r7, [r3, #172]	@ 0xac
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800244e:	f8b3 00ae 	ldrh.w	r0, [r3, #174]	@ 0xae
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002452:	f8b3 10b0 	ldrh.w	r1, [r3, #176]	@ 0xb0
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 8002456:	19ea      	adds	r2, r5, r7
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 8002458:	1bef      	subs	r7, r5, r7
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA + pHandle->aShiftval[0];
 800245a:	b295      	uxth	r5, r2
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 800245c:	1832      	adds	r2, r6, r0
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 800245e:	1a30      	subs	r0, r6, r0
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB + pHandle->aShiftval[1];
 8002460:	b296      	uxth	r6, r2
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 8002462:	eb0e 0201 	add.w	r2, lr, r1
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002466:	ebae 0101 	sub.w	r1, lr, r1
  pHandle->DmaBuffCCR_latch[4]= pHandle->_Super.CntPhA - pHandle->aShiftval[0];
 800246a:	b2bf      	uxth	r7, r7
  pHandle->DmaBuffCCR_latch[5]= pHandle->_Super.CntPhB - pHandle->aShiftval[1];
 800246c:	b280      	uxth	r0, r0
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC + pHandle->aShiftval[2];
 800246e:	fa1f fe82 	uxth.w	lr, r2
  pHandle->DmaBuffCCR_latch[6]= pHandle->_Super.CntPhC - pHandle->aShiftval[2];
 8002472:	b289      	uxth	r1, r1
 8002474:	e7c0      	b.n	80023f8 <R1_CalcDutyCycles+0x2b4>
 8002476:	bf00      	nop
 8002478:	08006b98 	.word	0x08006b98
 800247c:	08006b9c 	.word	0x08006b9c

08002480 <R1_Init>:
{
 8002480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    OPAMP_TypeDef *OPAMPx = pHandle->pParams_str->OPAMP_Selection;
 8002484:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 8002488:	f8b0 c070 	ldrh.w	ip, [r0, #112]	@ 0x70
    OPAMP_TypeDef *OPAMPx = pHandle->pParams_str->OPAMP_Selection;
 800248c:	68ee      	ldr	r6, [r5, #12]
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800248e:	682b      	ldr	r3, [r5, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8002490:	f8df 82ac 	ldr.w	r8, [pc, #684]	@ 8002740 <R1_Init+0x2c0>
  pHandle->iflag=0;
 8002494:	2400      	movs	r4, #0
    DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 8002496:	e9d5 1701 	ldrd	r1, r7, [r5, #4]
{
 800249a:	b082      	sub	sp, #8
  pHandle->iflag=0;
 800249c:	f880 40bf 	strb.w	r4, [r0, #191]	@ 0xbf
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024a0:	8aea      	ldrh	r2, [r5, #22]
 80024a2:	f8b5 e018 	ldrh.w	lr, [r5, #24]
  pHandle->DmaBuffCCR[7]       = 0;                           /* CCR4 value overwritten during second half PWM period */
 80024a6:	f8a0 4096 	strh.w	r4, [r0, #150]	@ 0x96
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024aa:	4496      	add	lr, r2
 80024ac:	ea4f 029c 	mov.w	r2, ip, lsr #2
  pHandle->_Super.BrakeActionLock = false;
 80024b0:	f880 4083 	strb.w	r4, [r0, #131]	@ 0x83
 80024b4:	f362 040f 	bfi	r4, r2, #0, #16
 80024b8:	f362 441f 	bfi	r4, r2, #16, #16
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80024bc:	6504      	str	r4, [r0, #80]	@ 0x50
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 80024be:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80024c2:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 80024c6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80024ca:	f8d8 4010 	ldr.w	r4, [r8, #16]
 80024ce:	f8a0 c0b2 	strh.w	ip, [r0, #178]	@ 0xb2
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80024d2:	fa1f fe8e 	uxth.w	lr, lr
  pHandle->DmaBuffCCR[3]       = pHandle->Half_PWMPeriod-1U;   /* CCR4 value overwritten during first half PWM period */
 80024d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80024da:	f8a0 c08e 	strh.w	ip, [r0, #142]	@ 0x8e
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80024de:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 80024e2:	f8a0 2098 	strh.w	r2, [r0, #152]	@ 0x98
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       /* CCR2 value overwritten during first half PWM period */
 80024e6:	f8a0 209a 	strh.w	r2, [r0, #154]	@ 0x9a
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 80024ea:	f8a0 208c 	strh.w	r2, [r0, #140]	@ 0x8c
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 80024ee:	f8a0 209c 	strh.w	r2, [r0, #156]	@ 0x9c
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80024f2:	f8a0 2090 	strh.w	r2, [r0, #144]	@ 0x90
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 80024f6:	f8a0 2092 	strh.w	r2, [r0, #146]	@ 0x92
  pHandle->DmaBuffCCR[6]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80024fa:	f8a0 2094 	strh.w	r2, [r0, #148]	@ 0x94
  pHandle->DmaBuffCCR_latch[6] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80024fe:	f8a0 20a4 	strh.w	r2, [r0, #164]	@ 0xa4
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002502:	eba2 0c0e 	sub.w	ip, r2, lr
 8002506:	f444 6400 	orr.w	r4, r4, #2048	@ 0x800
                   + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800250a:	4472      	add	r2, lr
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1)
 800250c:	f8a0 c0b4 	strh.w	ip, [r0, #180]	@ 0xb4
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1)
 8002510:	f8a0 20b6 	strh.w	r2, [r0, #182]	@ 0xb6
 8002514:	f8c8 4010 	str.w	r4, [r8, #16]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002518:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800251a:	4c83      	ldr	r4, [pc, #524]	@ (8002728 <R1_Init+0x2a8>)
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	600a      	str	r2, [r1, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8002522:	680a      	ldr	r2, [r1, #0]
 8002524:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800252c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800252e:	684a      	ldr	r2, [r1, #4]
 8002530:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002534:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002538:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800253a:	698a      	ldr	r2, [r1, #24]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	618a      	str	r2, [r1, #24]
 8002542:	698a      	ldr	r2, [r1, #24]
 8002544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002548:	618a      	str	r2, [r1, #24]
 800254a:	69ca      	ldr	r2, [r1, #28]
 800254c:	f022 0208 	bic.w	r2, r2, #8
 8002550:	61ca      	str	r2, [r1, #28]
 8002552:	69ca      	ldr	r2, [r1, #28]
 8002554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002558:	61ca      	str	r2, [r1, #28]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800255a:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800255c:	f042 0208 	orr.w	r2, r2, #8
 8002560:	650a      	str	r2, [r1, #80]	@ 0x50
 8002562:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8002564:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002568:	650a      	str	r2, [r1, #80]	@ 0x50
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800256a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800256e:	610a      	str	r2, [r1, #16]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002570:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002574:	610a      	str	r2, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8002576:	68ca      	ldr	r2, [r1, #12]
 8002578:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800257c:	60ca      	str	r2, [r1, #12]
  SET_BIT(TIMx->CCER, Channels);
 800257e:	6a0a      	ldr	r2, [r1, #32]
 8002580:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8002584:	f042 0205 	orr.w	r2, r2, #5
 8002588:	620a      	str	r2, [r1, #32]
 800258a:	692a      	ldr	r2, [r5, #16]
 800258c:	5ca4      	ldrb	r4, [r4, r2]
 800258e:	593a      	ldr	r2, [r7, r4]
 8002590:	f36f 120e 	bfc	r2, #4, #11
 8002594:	f442 5256 	orr.w	r2, r2, #13696	@ 0x3580
 8002598:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800259c:	513a      	str	r2, [r7, r4]
  MODIFY_REG(TIMx->DCR, (TIM_DCR_DBL | TIM_DCR_DBA), (DMABurstBaseAddress | DMABurstLength));
 800259e:	f8d1 23dc 	ldr.w	r2, [r1, #988]	@ 0x3dc
 80025a2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80025a6:	f022 021f 	bic.w	r2, r2, #31
 80025aa:	443c      	add	r4, r7
 80025ac:	f442 7243 	orr.w	r2, r2, #780	@ 0x30c
 80025b0:	f042 0201 	orr.w	r2, r2, #1
    LL_DMA_SetMemoryAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&pHandle->DmaBuffCCR[0]);
 80025b4:	3088      	adds	r0, #136	@ 0x88
    LL_DMA_SetPeriphAddress(DMAx, pHandle->pParams_str->DMAChannelX, (uint32_t)&TIMx->DMAR);
 80025b6:	f501 7c78 	add.w	ip, r1, #992	@ 0x3e0
 80025ba:	f8c1 23dc 	str.w	r2, [r1, #988]	@ 0x3dc
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80025be:	60e0      	str	r0, [r4, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80025c0:	f8c4 c008 	str.w	ip, [r4, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	f36f 020f 	bfc	r2, #0, #16
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	6062      	str	r2, [r4, #4]
    if (OPAMPx)
 80025d0:	b13e      	cbz	r6, 80025e2 <R1_Init+0x162>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80025d2:	6832      	ldr	r2, [r6, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	6032      	str	r2, [r6, #0]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Lock(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_LOCK);
 80025da:	6832      	ldr	r2, [r6, #0]
 80025dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025e0:	6032      	str	r2, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80025e2:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80025e4:	2004      	movs	r0, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80025ec:	6018      	str	r0, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80025ee:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80025f0:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80025f2:	f022 0220 	bic.w	r2, r2, #32
 80025f6:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80025f8:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025fa:	689a      	ldr	r2, [r3, #8]
                                       * (SystemCoreClock / (100000UL * 2UL)));
 80025fc:	484b      	ldr	r0, [pc, #300]	@ (800272c <R1_Init+0x2ac>)
 80025fe:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8002602:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(ADCx->CR,
 800260a:	6898      	ldr	r0, [r3, #8]
 800260c:	f020 4010 	bic.w	r0, r0, #2415919104	@ 0x90000000
 8002610:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002614:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8002618:	6098      	str	r0, [r3, #8]
 800261a:	4845      	ldr	r0, [pc, #276]	@ (8002730 <R1_Init+0x2b0>)
 800261c:	0992      	lsrs	r2, r2, #6
 800261e:	fba0 0202 	umull	r0, r2, r0, r2
 8002622:	0992      	lsrs	r2, r2, #6
 8002624:	0052      	lsls	r2, r2, #1
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8002626:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0UL)
 8002628:	9a01      	ldr	r2, [sp, #4]
 800262a:	b12a      	cbz	r2, 8002638 <R1_Init+0x1b8>
      wait_loop_index--;
 800262c:	9a01      	ldr	r2, [sp, #4]
 800262e:	3a01      	subs	r2, #1
 8002630:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0UL)
 8002632:	9a01      	ldr	r2, [sp, #4]
 8002634:	2a00      	cmp	r2, #0
 8002636:	d1f9      	bne.n	800262c <R1_Init+0x1ac>
  MODIFY_REG(ADCx->CR,
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800263e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002642:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002646:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	2a00      	cmp	r2, #0
 800264c:	dbfc      	blt.n	8002648 <R1_Init+0x1c8>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	07d0      	lsls	r0, r2, #31
 8002652:	d408      	bmi.n	8002666 <R1_Init+0x1e6>
  MODIFY_REG(ADCx->CR,
 8002654:	4837      	ldr	r0, [pc, #220]	@ (8002734 <R1_Init+0x2b4>)
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4002      	ands	r2, r0
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	07d2      	lsls	r2, r2, #31
 8002664:	d5f7      	bpl.n	8002656 <R1_Init+0x1d6>
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 8002666:	68d8      	ldr	r0, [r3, #12]
    if (TIM1 == pHandle->pParams_str->TIMx)
 8002668:	4e33      	ldr	r6, [pc, #204]	@ (8002738 <R1_Init+0x2b8>)
 800266a:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 800266e:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8002670:	68d8      	ldr	r0, [r3, #12]
 8002672:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002676:	f420 1000 	bic.w	r0, r0, #2097152	@ 0x200000
 800267a:	60d8      	str	r0, [r3, #12]
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->IChannel),
 800267c:	7ea8      	ldrb	r0, [r5, #26]
 800267e:	2201      	movs	r2, #1
 8002680:	4082      	lsls	r2, r0
    if (TIM1 == pHandle->pParams_str->TIMx)
 8002682:	42b1      	cmp	r1, r6
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->IChannel),
 8002684:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8002688:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    if (TIM1 == pHandle->pParams_str->TIMx)
 800268c:	d02c      	beq.n	80026e8 <R1_Init+0x268>
      LL_ADC_INJ_ConfigQueueContext(ADCx,
 800268e:	2809      	cmp	r0, #9
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->IChannel),
 8002690:	bf85      	ittet	hi
 8002692:	3c1e      	subhi	r4, #30
 8002694:	ea42 5204 	orrhi.w	r2, r2, r4, lsl #20
      LL_ADC_INJ_ConfigQueueContext(ADCx,
 8002698:	ea42 5204 	orrls.w	r2, r2, r4, lsl #20
 800269c:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
  MODIFY_REG(ADCx->JSQR,
 80026a0:	0e92      	lsrs	r2, r2, #26
 80026a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026a4:	4c25      	ldr	r4, [pc, #148]	@ (800273c <R1_Init+0x2bc>)
 80026a6:	0251      	lsls	r1, r2, #9
 80026a8:	4020      	ands	r0, r4
 80026aa:	f401 5178 	and.w	r1, r1, #15872	@ 0x3e00
 80026ae:	4301      	orrs	r1, r0
 80026b0:	0550      	lsls	r0, r2, #21
 80026b2:	ea41 61c2 	orr.w	r1, r1, r2, lsl #27
 80026b6:	f000 7078 	and.w	r0, r0, #65011712	@ 0x3e00000
 80026ba:	03d2      	lsls	r2, r2, #15
 80026bc:	4301      	orrs	r1, r0
 80026be:	f402 2278 	and.w	r2, r2, #1015808	@ 0xf8000
 80026c2:	430a      	orrs	r2, r1
 80026c4:	f042 02a9 	orr.w	r2, r2, #169	@ 0xa9
 80026c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80026ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026cc:	f022 020f 	bic.w	r2, r2, #15
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80026d8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80026dc:	f042 0204 	orr.w	r2, r2, #4
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	b002      	add	sp, #8
 80026e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_INJ_ConfigQueueContext(ADCx,
 80026e8:	2809      	cmp	r0, #9
                                    __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->IChannel),
 80026ea:	bf85      	ittet	hi
 80026ec:	3c1e      	subhi	r4, #30
 80026ee:	ea42 5204 	orrhi.w	r2, r2, r4, lsl #20
      LL_ADC_INJ_ConfigQueueContext(ADCx,
 80026f2:	ea42 5204 	orrls.w	r2, r2, r4, lsl #20
 80026f6:	f042 7200 	orrhi.w	r2, r2, #33554432	@ 0x2000000
  MODIFY_REG(ADCx->JSQR,
 80026fa:	0e92      	lsrs	r2, r2, #26
 80026fc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026fe:	4c0f      	ldr	r4, [pc, #60]	@ (800273c <R1_Init+0x2bc>)
 8002700:	0251      	lsls	r1, r2, #9
 8002702:	4020      	ands	r0, r4
 8002704:	f401 5178 	and.w	r1, r1, #15872	@ 0x3e00
 8002708:	4301      	orrs	r1, r0
 800270a:	0550      	lsls	r0, r2, #21
 800270c:	ea41 61c2 	orr.w	r1, r1, r2, lsl #27
 8002710:	f000 7078 	and.w	r0, r0, #65011712	@ 0x3e00000
 8002714:	03d2      	lsls	r2, r2, #15
 8002716:	4301      	orrs	r1, r0
 8002718:	f402 2278 	and.w	r2, r2, #1015808	@ 0xf8000
 800271c:	430a      	orrs	r2, r1
 800271e:	f042 02a1 	orr.w	r2, r2, #161	@ 0xa1
 8002722:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002724:	e7d1      	b.n	80026ca <R1_Init+0x24a>
 8002726:	bf00      	nop
 8002728:	08006b9c 	.word	0x08006b9c
 800272c:	200002ec 	.word	0x200002ec
 8002730:	053e2d63 	.word	0x053e2d63
 8002734:	7fffffc0 	.word	0x7fffffc0
 8002738:	40012c00 	.word	0x40012c00
 800273c:	04104000 	.word	0x04104000
 8002740:	e0042000 	.word	0xe0042000

08002744 <R1_SetOffsetCalib>:
    pHandle->PhaseOffset = (uint32_t)offsets->phaseAOffset;
 8002744:	680a      	ldr	r2, [r1, #0]
 8002746:	f8c0 20a8 	str.w	r2, [r0, #168]	@ 0xa8
    pHdl->offsetCalibStatus = true;
 800274a:	2301      	movs	r3, #1
 800274c:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <R1_GetOffsetCalib>:
    offsets->phaseAOffset = (int32_t)pHandle->PhaseOffset;
 8002754:	f8d0 30a8 	ldr.w	r3, [r0, #168]	@ 0xa8
 8002758:	600b      	str	r3, [r1, #0]
}
 800275a:	4770      	bx	lr

0800275c <R1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800275c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
 8002760:	685b      	ldr	r3, [r3, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002762:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002766:	f06f 0201 	mvn.w	r2, #1
 800276a:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800276e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002770:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002772:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002774:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	07d2      	lsls	r2, r2, #31
 800277a:	d5fc      	bpl.n	8002776 <R1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800277c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800277e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002782:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == (pHandle->_Super.LowSideOutputs))
 8002784:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8002788:	2b02      	cmp	r3, #2
 800278a:	d000      	beq.n	800278e <R1_TurnOnLowSides+0x32>
 800278c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800278e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8002792:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002794:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002796:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800279a:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800279c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80027a0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80027a4:	618c      	str	r4, [r1, #24]
}
 80027a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027aa:	619a      	str	r2, [r3, #24]
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <R1_SwitchOnPWM>:
{
 80027b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80027b4:	f8d0 60c4 	ldr.w	r6, [r0, #196]	@ 0xc4
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027b8:	8af5      	ldrh	r5, [r6, #22]
 80027ba:	8b32      	ldrh	r2, [r6, #24]
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80027bc:	68b1      	ldr	r1, [r6, #8]
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027be:	442a      	add	r2, r5
 80027c0:	f8b0 50b2 	ldrh.w	r5, [r0, #178]	@ 0xb2
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80027c4:	e9d6 4300 	ldrd	r4, r3, [r6]
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027c8:	b292      	uxth	r2, r2
  pHandle->ADCRegularLocked=true;
 80027ca:	2701      	movs	r7, #1
 80027cc:	f880 70c3 	strb.w	r7, [r0, #195]	@ 0xc3
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027d0:	ebc2 0755 	rsb	r7, r2, r5, lsr #1
                    + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027d4:	eb02 0255 	add.w	r2, r2, r5, lsr #1
 80027d8:	b292      	uxth	r2, r2
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80027da:	086d      	lsrs	r5, r5, #1
 80027dc:	b2bf      	uxth	r7, r7
  pHandle->_Super.TurnOnLowSidesAction = false;
 80027de:	f04f 0c00 	mov.w	ip, #0
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1)
 80027e2:	f8a0 20b6 	strh.w	r2, [r0, #182]	@ 0xb6
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1)
 80027e6:	f8a0 70b4 	strh.w	r7, [r0, #180]	@ 0xb4
  pHandle->_Super.TurnOnLowSidesAction = false;
 80027ea:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80027ee:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80027f0:	639d      	str	r5, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80027f2:	63dd      	str	r5, [r3, #60]	@ 0x3c
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80027f4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
 80027f6:	649f      	str	r7, [r3, #72]	@ 0x48
  WRITE_REG(TIMx->CCR6, CompareValue);
 80027f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002800:	f442 0260 	orr.w	r2, r2, #14680064	@ 0xe00000
 8002804:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002806:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002808:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == (pHandle->_Super.LowSideOutputs))
 800280e:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8002812:	2a02      	cmp	r2, #2
 8002814:	d048      	beq.n	80028a8 <R1_SwitchOnPWM+0xf8>
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002816:	681a      	ldr	r2, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002818:	06d2      	lsls	r2, r2, #27
 800281a:	d43b      	bmi.n	8002894 <R1_SwitchOnPWM+0xe4>
 800281c:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800281e:	06d7      	lsls	r7, r2, #27
 8002820:	d5fc      	bpl.n	800281c <R1_SwitchOnPWM+0x6c>
  LL_DMA_ClearFlag_TC(DMAx, pHandle->pParams_str->DMAChannelX);
 8002822:	6935      	ldr	r5, [r6, #16]
/* Make this define visible for all projects */
#define NBR_OF_MOTORS             1

__STATIC_INLINE void LL_DMA_ClearFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 8002824:	b119      	cbz	r1, 800282e <R1_SwitchOnPWM+0x7e>
    /* Nothing to do */
  }
  else
  {
    /* Clear TC bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002826:	00ae      	lsls	r6, r5, #2
 8002828:	2202      	movs	r2, #2
 800282a:	40b2      	lsls	r2, r6
 800282c:	604a      	str	r2, [r1, #4]
 800282e:	4a2d      	ldr	r2, [pc, #180]	@ (80028e4 <R1_SwitchOnPWM+0x134>)
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8002830:	2701      	movs	r7, #1
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8002832:	5d52      	ldrb	r2, [r2, r5]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8002834:	604f      	str	r7, [r1, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002836:	f06f 0701 	mvn.w	r7, #1
 800283a:	611f      	str	r7, [r3, #16]
  pHandle->TCCnt = 0;
 800283c:	2500      	movs	r5, #0
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800283e:	188e      	adds	r6, r1, r2
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002840:	2740      	movs	r7, #64	@ 0x40
 8002842:	6027      	str	r7, [r4, #0]
 8002844:	f880 50c0 	strb.w	r5, [r0, #192]	@ 0xc0
  pHandle->TCDoneFlag = false;
 8002848:	f880 50c2 	strb.w	r5, [r0, #194]	@ 0xc2
 800284c:	6870      	ldr	r0, [r6, #4]
 800284e:	f36f 000f 	bfc	r0, #0, #16
 8002852:	f040 0008 	orr.w	r0, r0, #8
 8002856:	6070      	str	r0, [r6, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8002858:	5888      	ldr	r0, [r1, r2]
 800285a:	f040 0001 	orr.w	r0, r0, #1
 800285e:	5088      	str	r0, [r1, r2]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002860:	641d      	str	r5, [r3, #64]	@ 0x40
  SET_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8002862:	68d8      	ldr	r0, [r3, #12]
 8002864:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8002868:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(ADCx->CR,
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002870:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	60a3      	str	r3, [r4, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 800287a:	588b      	ldr	r3, [r1, r2]
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	508b      	str	r3, [r1, r2]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_HTIE);
 8002882:	588b      	ldr	r3, [r1, r2]
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	508b      	str	r3, [r1, r2]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800288a:	6863      	ldr	r3, [r4, #4]
 800288c:	433b      	orrs	r3, r7
 800288e:	6063      	str	r3, [r4, #4]
}
 8002890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002894:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 8002896:	06d5      	lsls	r5, r2, #27
 8002898:	d4fc      	bmi.n	8002894 <R1_SwitchOnPWM+0xe4>
 800289a:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800289c:	06d2      	lsls	r2, r2, #27
 800289e:	d4c0      	bmi.n	8002822 <R1_SwitchOnPWM+0x72>
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	06d2      	lsls	r2, r2, #27
 80028a4:	d5f9      	bpl.n	800289a <R1_SwitchOnPWM+0xea>
 80028a6:	e7bc      	b.n	8002822 <R1_SwitchOnPWM+0x72>
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80028a8:	f8d3 a020 	ldr.w	sl, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80028ac:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 80028b0:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80028b4:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80028b6:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80028ba:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80028bc:	f8b0 504c 	ldrh.w	r5, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80028c0:	f240 5955 	movw	r9, #1365	@ 0x555
 80028c4:	ea1a 0f09 	tst.w	sl, r9
 80028c8:	d005      	beq.n	80028d6 <R1_SwitchOnPWM+0x126>
 80028ca:	f8ce 8018 	str.w	r8, [lr, #24]
 80028ce:	f8c7 c018 	str.w	ip, [r7, #24]
 80028d2:	6195      	str	r5, [r2, #24]
}
 80028d4:	e79f      	b.n	8002816 <R1_SwitchOnPWM+0x66>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80028d6:	f8ce 8028 	str.w	r8, [lr, #40]	@ 0x28
 80028da:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 80028de:	6295      	str	r5, [r2, #40]	@ 0x28
}
 80028e0:	e799      	b.n	8002816 <R1_SwitchOnPWM+0x66>
 80028e2:	bf00      	nop
 80028e4:	08006b9c 	.word	0x08006b9c

080028e8 <R1_SwitchOffPWM>:
{
 80028e8:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80028ea:	f8d0 60c4 	ldr.w	r6, [r0, #196]	@ 0xc4
  DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx;
 80028ee:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80028f2:	8af2      	ldrh	r2, [r6, #22]
 80028f4:	8b31      	ldrh	r1, [r6, #24]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80028f6:	68df      	ldr	r7, [r3, #12]
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80028f8:	6835      	ldr	r5, [r6, #0]
                    - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80028fa:	4411      	add	r1, r2
 80028fc:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	@ 0xb2
 8002900:	b289      	uxth	r1, r1
 8002902:	f027 0701 	bic.w	r7, r7, #1
 8002906:	ebc1 0c52 	rsb	ip, r1, r2, lsr #1
                    + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 800290a:	eb01 0252 	add.w	r2, r1, r2, lsr #1
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1)
 800290e:	f8a0 20b6 	strh.w	r2, [r0, #182]	@ 0xb6
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1)
 8002912:	f8a0 c0b4 	strh.w	ip, [r0, #180]	@ 0xb4
 8002916:	60df      	str	r7, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8002918:	681a      	ldr	r2, [r3, #0]
  if (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 800291a:	06d7      	lsls	r7, r2, #27
 800291c:	d468      	bmi.n	80029f0 <R1_SwitchOffPWM+0x108>
 800291e:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 8002920:	06d2      	lsls	r2, r2, #27
 8002922:	d5fc      	bpl.n	800291e <R1_SwitchOffPWM+0x36>
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8002924:	6932      	ldr	r2, [r6, #16]
 8002926:	4e3e      	ldr	r6, [pc, #248]	@ (8002a20 <R1_SwitchOffPWM+0x138>)
  if (true == pHandle->_Super.BrakeActionLock)
 8002928:	f890 7083 	ldrb.w	r7, [r0, #131]	@ 0x83
 800292c:	5cb2      	ldrb	r2, [r6, r2]
 800292e:	58a6      	ldr	r6, [r4, r2]
 8002930:	f026 0602 	bic.w	r6, r6, #2
 8002934:	50a6      	str	r6, [r4, r2]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_HTIE);
 8002936:	58a6      	ldr	r6, [r4, r2]
 8002938:	f026 0604 	bic.w	r6, r6, #4
 800293c:	50a6      	str	r6, [r4, r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800293e:	685e      	ldr	r6, [r3, #4]
 8002940:	f426 0670 	bic.w	r6, r6, #15728640	@ 0xf00000
 8002944:	605e      	str	r6, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC4DE);
 8002946:	68de      	ldr	r6, [r3, #12]
 8002948:	f426 5680 	bic.w	r6, r6, #4096	@ 0x1000
 800294c:	60de      	str	r6, [r3, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800294e:	58a6      	ldr	r6, [r4, r2]
 8002950:	f026 0601 	bic.w	r6, r6, #1
 8002954:	50a6      	str	r6, [r4, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002956:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8002958:	f04f 0c00 	mov.w	ip, #0
 800295c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002960:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8002966:	b91f      	cbnz	r7, 8002970 <R1_SwitchOffPWM+0x88>
    if (ES_GPIO == (pHandle->_Super.LowSideOutputs))
 8002968:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800296c:	2b02      	cmp	r3, #2
 800296e:	d049      	beq.n	8002a04 <R1_SwitchOffPWM+0x11c>
  MODIFY_REG(ADCx->CR,
 8002970:	68ab      	ldr	r3, [r5, #8]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 8002972:	f8b0 c070 	ldrh.w	ip, [r0, #112]	@ 0x70
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800297a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800297e:	f043 0320 	orr.w	r3, r3, #32
 8002982:	60ab      	str	r3, [r5, #8]
  pHandle->iflag=0;
 8002984:	2200      	movs	r2, #0
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002986:	ea4f 039c 	mov.w	r3, ip, lsr #2
  pHandle->iflag=0;
 800298a:	f880 20bf 	strb.w	r2, [r0, #191]	@ 0xbf
  pHandle->DmaBuffCCR[7]       = 0;                           /* CCR4 value overwritten during second half PWM period */
 800298e:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
  pHandle->_Super.BrakeActionLock = false;
 8002992:	f880 2083 	strb.w	r2, [r0, #131]	@ 0x83
  pHandle->ADCRegularLocked=false;
 8002996:	f880 20c3 	strb.w	r2, [r0, #195]	@ 0xc3
 800299a:	f363 020f 	bfi	r2, r3, #0, #16
 800299e:	f363 421f 	bfi	r2, r3, #16, #16
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 80029a2:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80029a6:	f8a0 c0b2 	strh.w	ip, [r0, #178]	@ 0xb2
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 80029aa:	6502      	str	r2, [r0, #80]	@ 0x50
  pHandle->DmaBuffCCR[3]       = pHandle->Half_PWMPeriod-1U;   /* CCR4 value overwritten during first half PWM period */
 80029ac:	f10c 3cff 	add.w	ip, ip, #4294967295
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 80029b0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80029b4:	f8c0 20a0 	str.w	r2, [r0, #160]	@ 0xa0
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80029b8:	1a5a      	subs	r2, r3, r1
                   + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 80029ba:	4419      	add	r1, r3
}
 80029bc:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->DmaBuffCCR[3]       = pHandle->Half_PWMPeriod-1U;   /* CCR4 value overwritten during first half PWM period */
 80029be:	f8a0 c08e 	strh.w	ip, [r0, #142]	@ 0x8e
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 80029c2:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 80029c6:	f8a0 3098 	strh.w	r3, [r0, #152]	@ 0x98
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       /* CCR2 value overwritten during first half PWM period */
 80029ca:	f8a0 309a 	strh.w	r3, [r0, #154]	@ 0x9a
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 80029ce:	f8a0 308c 	strh.w	r3, [r0, #140]	@ 0x8c
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 80029d2:	f8a0 309c 	strh.w	r3, [r0, #156]	@ 0x9c
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 80029d6:	f8a0 3090 	strh.w	r3, [r0, #144]	@ 0x90
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 80029da:	f8a0 3092 	strh.w	r3, [r0, #146]	@ 0x92
  pHandle->DmaBuffCCR[6]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80029de:	f8a0 3094 	strh.w	r3, [r0, #148]	@ 0x94
  pHandle->DmaBuffCCR_latch[6] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 80029e2:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1)
 80029e6:	f8a0 20b4 	strh.w	r2, [r0, #180]	@ 0xb4
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1)
 80029ea:	f8a0 10b6 	strh.w	r1, [r0, #182]	@ 0xb6
}
 80029ee:	4770      	bx	lr
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80029f0:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_DOWN == LL_TIM_GetDirection(TIMx))
 80029f2:	06d7      	lsls	r7, r2, #27
 80029f4:	d4fc      	bmi.n	80029f0 <R1_SwitchOffPWM+0x108>
 80029f6:	681a      	ldr	r2, [r3, #0]
    while (LL_TIM_COUNTERDIRECTION_UP == LL_TIM_GetDirection(TIMx))
 80029f8:	06d2      	lsls	r2, r2, #27
 80029fa:	d493      	bmi.n	8002924 <R1_SwitchOffPWM+0x3c>
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	06d2      	lsls	r2, r2, #27
 8002a00:	d5f9      	bpl.n	80029f6 <R1_SwitchOffPWM+0x10e>
 8002a02:	e78f      	b.n	8002924 <R1_SwitchOffPWM+0x3c>
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8002a04:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002a06:	f8b0 2048 	ldrh.w	r2, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BRR, PinMask);
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8002a0c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002a0e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8002a14:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002a16:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8002a1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a1c:	e7a8      	b.n	8002970 <R1_SwitchOffPWM+0x88>
 8002a1e:	bf00      	nop
 8002a20:	08006b9c 	.word	0x08006b9c

08002a24 <R1_CurrentReadingCalibration>:
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
  if (false == pHandle->_Super.offsetCalibStatus)
 8002a26:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002a2a:	f8d0 60c4 	ldr.w	r6, [r0, #196]	@ 0xc4
{
 8002a2e:	4604      	mov	r4, r0
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002a30:	6875      	ldr	r5, [r6, #4]
  if (false == pHandle->_Super.offsetCalibStatus)
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d03b      	beq.n	8002aae <R1_CurrentReadingCalibration+0x8a>
  SET_BIT(TIMx->CCER, Channels);
 8002a36:	6a2b      	ldr	r3, [r5, #32]
 8002a38:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8002a3c:	f043 0305 	orr.w	r3, r3, #5
 8002a40:	622b      	str	r3, [r5, #32]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 8002a42:	f8b4 3070 	ldrh.w	r3, [r4, #112]	@ 0x70
  pHandle->iflag=0;
 8002a46:	2200      	movs	r2, #0
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 8002a48:	0859      	lsrs	r1, r3, #1
  pHandle->iflag=0;
 8002a4a:	f884 20bf 	strb.w	r2, [r4, #191]	@ 0xbf
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002a4e:	8af5      	ldrh	r5, [r6, #22]
  pHandle->Half_PWMPeriod = (pHandle->_Super.PWMperiod / 2U);
 8002a50:	f8a4 10b2 	strh.w	r1, [r4, #178]	@ 0xb2
  pHandle->DmaBuffCCR[3]       = pHandle->Half_PWMPeriod-1U;   /* CCR4 value overwritten during first half PWM period */
 8002a54:	1e48      	subs	r0, r1, #1
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002a56:	8b31      	ldrh	r1, [r6, #24]
  pHandle->DmaBuffCCR[7]       = 0;                           /* CCR4 value overwritten during second half PWM period */
 8002a58:	f8a4 2096 	strh.w	r2, [r4, #150]	@ 0x96
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	4429      	add	r1, r5
 8002a60:	b289      	uxth	r1, r1
  pHandle->_Super.BrakeActionLock = false;
 8002a62:	f884 2083 	strb.w	r2, [r4, #131]	@ 0x83
 8002a66:	f363 020f 	bfi	r2, r3, #0, #16
 8002a6a:	f363 421f 	bfi	r2, r3, #16, #16
  pHandle->DmaBuffCCR[3]       = pHandle->Half_PWMPeriod-1U;   /* CCR4 value overwritten during first half PWM period */
 8002a6e:	f8a4 008e 	strh.w	r0, [r4, #142]	@ 0x8e
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002a72:	1a58      	subs	r0, r3, r1
                   + (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002a74:	4419      	add	r1, r3
  pHandle->CntSmp1 = ((pHandle->Half_PWMPeriod) >> 1)
 8002a76:	f8a4 00b4 	strh.w	r0, [r4, #180]	@ 0xb4
  pHandle->CntSmp2 = ((pHandle->Half_PWMPeriod) >> 1)
 8002a7a:	f8a4 10b6 	strh.w	r1, [r4, #182]	@ 0xb6
  pHandle->_Super.CntPhC = pHandle->Half_PWMPeriod >> 1;
 8002a7e:	f8a4 3054 	strh.w	r3, [r4, #84]	@ 0x54
  pHandle->DmaBuffCCR_latch[0] = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 8002a82:	f8a4 3098 	strh.w	r3, [r4, #152]	@ 0x98
  pHandle->DmaBuffCCR_latch[1] = pHandle->_Super.CntPhB;       /* CCR2 value overwritten during first half PWM period */
 8002a86:	f8a4 309a 	strh.w	r3, [r4, #154]	@ 0x9a
  pHandle->DmaBuffCCR[2]       = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 8002a8a:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
  pHandle->DmaBuffCCR_latch[2] = pHandle->_Super.CntPhC;       /* CCR3 value overwritten during first half PWM period */
 8002a8e:	f8a4 309c 	strh.w	r3, [r4, #156]	@ 0x9c
  pHandle->DmaBuffCCR[4]       = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 8002a92:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
  pHandle->DmaBuffCCR[5]       = pHandle->_Super.CntPhB;      /* CCR2 value overwritten during second half PWM period */
 8002a96:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
  pHandle->DmaBuffCCR[6]       = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 8002a9a:	f8a4 3094 	strh.w	r3, [r4, #148]	@ 0x94
  pHandle->DmaBuffCCR_latch[6] = pHandle->_Super.CntPhC;      /* CCR3 value overwritten during second half PWM period */
 8002a9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
  pHandle->_Super.CntPhA = pHandle->Half_PWMPeriod >> 1;
 8002aa2:	6522      	str	r2, [r4, #80]	@ 0x50
  pHandle->DmaBuffCCR[0]       = pHandle->_Super.CntPhA;       /* CCR1 value overwritten during first half PWM period */
 8002aa4:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  pHandle->DmaBuffCCR_latch[4] = pHandle->_Super.CntPhA;      /* CCR1 value overwritten during second half PWM period */
 8002aa8:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
}
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->Index = 0u;
 8002aae:	f880 30be 	strb.w	r3, [r0, #190]	@ 0xbe
  CLEAR_BIT(TIMx->CCER, Channels);
 8002ab2:	6a2a      	ldr	r2, [r5, #32]
    pHandle->PhaseOffset = 0u;
 8002ab4:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
 8002ab8:	f422 62aa 	bic.w	r2, r2, #1360	@ 0x550
 8002abc:	f022 0205 	bic.w	r2, r2, #5
 8002ac0:	622a      	str	r2, [r5, #32]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8002ac2:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <R1_CurrentReadingCalibration+0xfc>)
    pHandle->_Super.pFctGetPhaseCurrents = &R1_HFCurrentsCalibration;
 8002ac4:	4a17      	ldr	r2, [pc, #92]	@ (8002b24 <R1_CurrentReadingCalibration+0x100>)
 8002ac6:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_SetADCSampPointPolarization;
 8002ac8:	6143      	str	r3, [r0, #20]
    R1_SwitchOnPWM(&pHandle->_Super);
 8002aca:	f7ff fe71 	bl	80027b0 <R1_SwitchOnPWM>
    waitForPolarizationEnd(TIMx, &pHandle->_Super.SWerror, pHandle->pParams_str->RepetitionCounter, &pHandle->Index);
 8002ace:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8002ad2:	f104 03be 	add.w	r3, r4, #190	@ 0xbe
 8002ad6:	7ed2      	ldrb	r2, [r2, #27]
 8002ad8:	f104 0156 	add.w	r1, r4, #86	@ 0x56
 8002adc:	4628      	mov	r0, r5
 8002ade:	f7fe ffc7 	bl	8001a70 <waitForPolarizationEnd>
    R1_SwitchOffPWM(&pHandle->_Super);
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff ff00 	bl	80028e8 <R1_SwitchOffPWM>
    pHandle->PhaseOffset >>= 4u;
 8002ae8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
    if (0U == pHandle->_Super.SWerror)
 8002aec:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
    pHandle->PhaseOffset >>= 4u;
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    if (0U == pHandle->_Super.SWerror)
 8002af6:	b912      	cbnz	r2, 8002afe <R1_CurrentReadingCalibration+0xda>
      pHandle->_Super.offsetCalibStatus = true;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8002afe:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8002b02:	4909      	ldr	r1, [pc, #36]	@ (8002b28 <R1_CurrentReadingCalibration+0x104>)
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8002b04:	4a09      	ldr	r2, [pc, #36]	@ (8002b2c <R1_CurrentReadingCalibration+0x108>)
                   - (pHandle->pParams_str->hTADConv + pHandle->pParams_str->TSample);
 8002b06:	f8d4 60c4 	ldr.w	r6, [r4, #196]	@ 0xc4
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8002b0a:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b0c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b0e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b10:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8002b12:	696b      	ldr	r3, [r5, #20]
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	616b      	str	r3, [r5, #20]
    pHandle->_Super.pFctGetPhaseCurrents = &R1_GetPhaseCurrents;
 8002b1a:	6021      	str	r1, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R1_CalcDutyCycles;
 8002b1c:	6162      	str	r2, [r4, #20]
 8002b1e:	e78a      	b.n	8002a36 <R1_CurrentReadingCalibration+0x12>
 8002b20:	080020f9 	.word	0x080020f9
 8002b24:	080020b1 	.word	0x080020b1
 8002b28:	08001e3d 	.word	0x08001e3d
 8002b2c:	08002145 	.word	0x08002145

08002b30 <R1_TIMx_UP_IRQHandler>:
#ifdef NULL_PTR_CHECK_R1_PS_PWR_CUR_FDB
  return ((NULL == pHandle) ? NULL : (&(pHandle->_Super.Motor)));
#else
  return (&(pHandle->_Super.Motor));
#endif
}
 8002b30:	3078      	adds	r0, #120	@ 0x78
 8002b32:	4770      	bx	lr

08002b34 <R1_DMAx_TC_IRQHandler>:
    /* Nothing to do */
  }
  else
  {
#endif
    DMA_TypeDef *DMAx = pHandle->pParams_str->DMAx; //cstat !MISRAC2012-Rule-8.13
 8002b34:	f8d0 20c4 	ldr.w	r2, [r0, #196]	@ 0xc4
{
 8002b38:	b430      	push	{r4, r5}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8002b3a:	e9d2 5401 	ldrd	r5, r4, [r2, #4]
          1UL : 0UL));
}
//cstat !MISRAC2012-Rule-8.13
__STATIC_INLINE void LL_DMA_ClearFlag_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  if (NULL == DMAx)
 8002b3e:	b124      	cbz	r4, 8002b4a <R1_DMAx_TC_IRQHandler+0x16>
    /* Nothing to do */
  }
  else
  {
    /* Clear HT bits with bits position depending on parameter "Channel" */
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CHTIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002b40:	6913      	ldr	r3, [r2, #16]
 8002b42:	0099      	lsls	r1, r3, #2
 8002b44:	2304      	movs	r3, #4
 8002b46:	408b      	lsls	r3, r1
 8002b48:	6063      	str	r3, [r4, #4]
    LL_DMA_ClearFlag_HT(DMAx, pHandle->pParams_str->DMAChannelX);
    pHandle->TCCnt++;
 8002b4a:	f890 30c0 	ldrb.w	r3, [r0, #192]	@ 0xc0
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
    if (pHandle->TCCnt == (pHandle->pParams_str->RepetitionCounter + 1)>>1)
 8002b56:	7ed2      	ldrb	r2, [r2, #27]
 8002b58:	3201      	adds	r2, #1
 8002b5a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8002b5e:	d11b      	bne.n	8002b98 <R1_DMAx_TC_IRQHandler+0x64>
      /* Second half PWM period CCR value transfered by DMA */
      pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
      pHandle->DmaBuffCCR[5]= pHandle->DmaBuffCCR_latch[5];
      pHandle->DmaBuffCCR[6]= pHandle->DmaBuffCCR_latch[6];

      pHandle->TCCnt = 0;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f880 30c0 	strb.w	r3, [r0, #192]	@ 0xc0
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8002b66:	686b      	ldr	r3, [r5, #4]
      pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002b68:	f8b0 209c 	ldrh.w	r2, [r0, #156]	@ 0x9c
      pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8002b6c:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
      pHandle->DmaBuffCCR[2] = pHandle->DmaBuffCCR_latch[2];
 8002b70:	f8a0 208c 	strh.w	r2, [r0, #140]	@ 0x8c
 8002b74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
      pHandle->DmaBuffCCR[6]= pHandle->DmaBuffCCR_latch[6];
 8002b78:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	@ 0xa4
      pHandle->DmaBuffCCR[0] = pHandle->DmaBuffCCR_latch[0];
 8002b7c:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
      pHandle->DmaBuffCCR[6]= pHandle->DmaBuffCCR_latch[6];
 8002b80:	f8a0 2094 	strh.w	r2, [r0, #148]	@ 0x94
      pHandle->DmaBuffCCR[4]= pHandle->DmaBuffCCR_latch[4];
 8002b84:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 8002b88:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
 8002b8c:	f443 0360 	orr.w	r3, r3, #14680064	@ 0xe00000
      pHandle->TCDoneFlag =true;
 8002b90:	2201      	movs	r2, #1
 8002b92:	f880 20c2 	strb.w	r2, [r0, #194]	@ 0xc2
 8002b96:	606b      	str	r3, [r5, #4]

  return ((NULL == pHandle) ? NULL : &(pHandle->_Super.Motor));
#else
  return (&(pHandle->_Super.Motor));
#endif
}
 8002b98:	3078      	adds	r0, #120	@ 0x78
 8002b9a:	bc30      	pop	{r4, r5}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <R1_DMAx_HT_IRQHandler>:
    /* Nothing to do */
  }
  else
  {
#endif
    if  (pHandle->TCDoneFlag ==true)
 8002ba0:	f890 30c2 	ldrb.w	r3, [r0, #194]	@ 0xc2
 8002ba4:	b113      	cbz	r3, 8002bac <R1_DMAx_HT_IRQHandler+0xc>
    {
      pHandle->TCDoneFlag = false;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f880 30c2 	strb.w	r3, [r0, #194]	@ 0xc2
  }
  return ((NULL == pHandle) ? NULL : &(pHandle->_Super.Motor));
#else
  return (&(pHandle->_Super.Motor));
#endif
}
 8002bac:	3078      	adds	r0, #120	@ 0x78
 8002bae:	4770      	bx	lr

08002bb0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8002bb0:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8002bb2:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d30 <RCM_ExecRegularConv+0x180>)
 8002bb6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002bba:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002bbe:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8002bc2:	2800      	cmp	r0, #0
 8002bc4:	d138      	bne.n	8002c38 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8002bc6:	7811      	ldrb	r1, [r2, #0]
 8002bc8:	b991      	cbnz	r1, 8002bf0 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8002bca:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8002bcc:	7991      	ldrb	r1, [r2, #6]
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d175      	bne.n	8002cbe <RCM_ExecRegularConv+0x10e>
 8002bd2:	7b11      	ldrb	r1, [r2, #12]
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d177      	bne.n	8002cc8 <RCM_ExecRegularConv+0x118>
 8002bd8:	7c91      	ldrb	r1, [r2, #18]
 8002bda:	2900      	cmp	r1, #0
 8002bdc:	f000 809a 	beq.w	8002d14 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8002be0:	7dd1      	ldrb	r1, [r2, #23]
 8002be2:	4299      	cmp	r1, r3
 8002be4:	f240 80a0 	bls.w	8002d28 <RCM_ExecRegularConv+0x178>
 8002be8:	f04f 0e03 	mov.w	lr, #3
 8002bec:	4670      	mov	r0, lr
 8002bee:	e003      	b.n	8002bf8 <RCM_ExecRegularConv+0x48>
 8002bf0:	7951      	ldrb	r1, [r2, #5]
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d2ea      	bcs.n	8002bcc <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8002bf6:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8002bf8:	eb0c 0403 	add.w	r4, ip, r3
 8002bfc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8002c00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8002c04:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8002c06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8002c0a:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8002c0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002c12:	4c48      	ldr	r4, [pc, #288]	@ (8002d34 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8002c14:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8002c16:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002c1a:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8002c1c:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8002c1e:	eb0c 0003 	add.w	r0, ip, r3
 8002c22:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002c24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8002c28:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002c2c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002c30:	7849      	ldrb	r1, [r1, #1]
 8002c32:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8002c34:	bf18      	it	ne
 8002c36:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8002c38:	493f      	ldr	r1, [pc, #252]	@ (8002d38 <RCM_ExecRegularConv+0x188>)
 8002c3a:	f891 10c3 	ldrb.w	r1, [r1, #195]	@ 0xc3
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d138      	bne.n	8002cb4 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002c42:	493e      	ldr	r1, [pc, #248]	@ (8002d3c <RCM_ExecRegularConv+0x18c>)
 8002c44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002c48:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002c4a:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002c4c:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002c4e:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002c50:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002c54:	fa01 f104 	lsl.w	r1, r1, r4
 8002c58:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8002c5c:	bf84      	itt	hi
 8002c5e:	3d1e      	subhi	r5, #30
 8002c60:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8002c64:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002c66:	bf94      	ite	ls
 8002c68:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8002c6c:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8002c70:	0d09      	lsrs	r1, r1, #20
 8002c72:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8002c76:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8002c7a:	4321      	orrs	r1, r4
 8002c7c:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8002c7e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8002c80:	6881      	ldr	r1, [r0, #8]
 8002c82:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8002c86:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002c8a:	f041 0104 	orr.w	r1, r1, #4
 8002c8e:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002c90:	6801      	ldr	r1, [r0, #0]
 8002c92:	0749      	lsls	r1, r1, #29
 8002c94:	d5fc      	bpl.n	8002c90 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8002c96:	eb0c 0103 	add.w	r1, ip, r3
 8002c9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002c9e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8002ca0:	4d24      	ldr	r5, [pc, #144]	@ (8002d34 <RCM_ExecRegularConv+0x184>)
 8002ca2:	f891 e005 	ldrb.w	lr, [r1, #5]
 8002ca6:	f885 e000 	strb.w	lr, [r5]
 8002caa:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8002cae:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8002cb0:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8002cb2:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8002cb4:	449c      	add	ip, r3
 8002cb6:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8002cba:	8850      	ldrh	r0, [r2, #2]
 8002cbc:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8002cbe:	7ad1      	ldrb	r1, [r2, #11]
 8002cc0:	428b      	cmp	r3, r1
 8002cc2:	d31d      	bcc.n	8002d00 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8002cc4:	7b11      	ldrb	r1, [r2, #12]
 8002cc6:	b1f9      	cbz	r1, 8002d08 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8002cc8:	7c51      	ldrb	r1, [r2, #17]
 8002cca:	4299      	cmp	r1, r3
 8002ccc:	d828      	bhi.n	8002d20 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8002cce:	7c91      	ldrb	r1, [r2, #18]
 8002cd0:	2900      	cmp	r1, #0
 8002cd2:	d185      	bne.n	8002be0 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8002cd4:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8002cdc:	eb0c 0403 	add.w	r4, ip, r3
 8002ce0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002ce4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8002ce8:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8002cea:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8002cec:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8002cee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002cf2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002cf6:	4c0f      	ldr	r4, [pc, #60]	@ (8002d34 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8002cf8:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8002cfa:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8002cfc:	7821      	ldrb	r1, [r4, #0]
 8002cfe:	e78e      	b.n	8002c1e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8002d00:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8002d04:	4670      	mov	r0, lr
 8002d06:	e777      	b.n	8002bf8 <RCM_ExecRegularConv+0x48>
 8002d08:	7c91      	ldrb	r1, [r2, #18]
 8002d0a:	2900      	cmp	r1, #0
 8002d0c:	f47f af68 	bne.w	8002be0 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8002d10:	2101      	movs	r1, #1
 8002d12:	e7e0      	b.n	8002cd6 <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8002d14:	2800      	cmp	r0, #0
 8002d16:	d0de      	beq.n	8002cd6 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8002d18:	4c06      	ldr	r4, [pc, #24]	@ (8002d34 <RCM_ExecRegularConv+0x184>)
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8002d1e:	e77e      	b.n	8002c1e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8002d20:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8002d24:	4670      	mov	r0, lr
 8002d26:	e767      	b.n	8002bf8 <RCM_ExecRegularConv+0x48>
 8002d28:	2003      	movs	r0, #3
          LastEnable = i;
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	e7d4      	b.n	8002cd8 <RCM_ExecRegularConv+0x128>
 8002d2e:	bf00      	nop
 8002d30:	20000488 	.word	0x20000488
 8002d34:	20000484 	.word	0x20000484
 8002d38:	20000120 	.word	0x20000120
 8002d3c:	200004c0 	.word	0x200004c0

08002d40 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <RCM_ExecUserConv+0x54>)
{
 8002d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8002d46:	681c      	ldr	r4, [r3, #0]
 8002d48:	b124      	cbz	r4, 8002d54 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002d4a:	4d13      	ldr	r5, [pc, #76]	@ (8002d98 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8002d4c:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8002d4e:	782b      	ldrb	r3, [r5, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d001      	beq.n	8002d58 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff29 	bl	8002bb0 <RCM_ExecRegularConv>
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <RCM_ExecUserConv+0x5c>)
 8002d60:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8002d62:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <RCM_ExecUserConv+0x60>)
 8002d64:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8002d68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002d6c:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	b10b      	cbz	r3, 8002d76 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8002d72:	2302      	movs	r3, #2
 8002d74:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <RCM_ExecUserConv+0x64>)
 8002d78:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8002d7c:	2f00      	cmp	r7, #0
 8002d7e:	d0e9      	beq.n	8002d54 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002d80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002d84:	4620      	mov	r0, r4
 8002d86:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002d8c:	463b      	mov	r3, r7
}
 8002d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002d92:	4718      	bx	r3
 8002d94:	2000047c 	.word	0x2000047c
 8002d98:	20000480 	.word	0x20000480
 8002d9c:	20000482 	.word	0x20000482
 8002da0:	20000488 	.word	0x20000488
 8002da4:	200004a0 	.word	0x200004a0

08002da8 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002da8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e24 <RCM_ExecNextConv+0x7c>)
 8002daa:	491f      	ldr	r1, [pc, #124]	@ (8002e28 <RCM_ExecNextConv+0x80>)
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002db2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002db6:	b3a3      	cbz	r3, 8002e22 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002db8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e2c <RCM_ExecNextConv+0x84>)
{
 8002dba:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002dc2:	2404      	movs	r4, #4
 8002dc4:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002dc6:	f893 c004 	ldrb.w	ip, [r3, #4]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8002dd0:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8002dd4:	fa03 f30c 	lsl.w	r3, r3, ip
 8002dd8:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8002ddc:	bf84      	itt	hi
 8002dde:	3c1e      	subhi	r4, #30
 8002de0:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8002de4:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8002de8:	bf98      	it	ls
 8002dea:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002dee:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8002df0:	bf88      	it	hi
 8002df2:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8002df6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8002df8:	0d1b      	lsrs	r3, r3, #20
 8002dfa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002dfe:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8002e02:	4313      	orrs	r3, r2
 8002e04:	6303      	str	r3, [r0, #48]	@ 0x30
 8002e06:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8002e08:	6883      	ldr	r3, [r0, #8]
 8002e0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8002e0e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8002e12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e16:	2401      	movs	r4, #1
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6083      	str	r3, [r0, #8]
 8002e1e:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	4770      	bx	lr
 8002e24:	20000484 	.word	0x20000484
 8002e28:	20000488 	.word	0x20000488
 8002e2c:	200004c0 	.word	0x200004c0

08002e30 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8002e30:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8002e32:	4812      	ldr	r0, [pc, #72]	@ (8002e7c <RCM_ReadOngoingConv+0x4c>)
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <RCM_ReadOngoingConv+0x50>)
 8002e36:	7803      	ldrb	r3, [r0, #0]
 8002e38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002e3c:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8002e40:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002e44:	b16c      	cbz	r4, 8002e62 <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8002e46:	4c0f      	ldr	r4, [pc, #60]	@ (8002e84 <RCM_ReadOngoingConv+0x54>)
 8002e48:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8002e4c:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002e4e:	6825      	ldr	r5, [r4, #0]
 8002e50:	076d      	lsls	r5, r5, #29
 8002e52:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002e56:	d406      	bmi.n	8002e66 <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002e58:	449c      	add	ip, r3
 8002e5a:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8002e5e:	7953      	ldrb	r3, [r2, #5]
 8002e60:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8002e62:	bc30      	pop	{r4, r5}
 8002e64:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8002e66:	784d      	ldrb	r5, [r1, #1]
 8002e68:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8002e6c:	d0f4      	beq.n	8002e58 <RCM_ReadOngoingConv+0x28>
 8002e6e:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8002e70:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8002e74:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8002e76:	2402      	movs	r4, #2
 8002e78:	704c      	strb	r4, [r1, #1]
 8002e7a:	e7ed      	b.n	8002e58 <RCM_ReadOngoingConv+0x28>
 8002e7c:	20000484 	.word	0x20000484
 8002e80:	20000488 	.word	0x20000488
 8002e84:	200004c0 	.word	0x200004c0

08002e88 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8002e88:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8002e8a:	f7fe fa99 	bl	80013c0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8002e8e:	e7fe      	b.n	8002e8e <HardFault_Handler+0x6>

08002e90 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8002e90:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002e92:	4c0a      	ldr	r4, [pc, #40]	@ (8002ebc <SysTick_Handler+0x2c>)
 8002e94:	7823      	ldrb	r3, [r4, #0]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d006      	beq.n	8002ea8 <SysTick_Handler+0x18>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	7023      	strb	r3, [r4, #0]
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8002ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002ea4:	f7fe ba60 	b.w	8001368 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002ea8:	f000 fbb0 	bl	800360c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002eac:	f001 f8a8 	bl	8004000 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002eb0:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002eb2:	7023      	strb	r3, [r4, #0]
}
 8002eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002eb8:	f7fe ba56 	b.w	8001368 <MC_RunMotorControlTasks>
 8002ebc:	200002e8 	.word	0x200002e8

08002ec0 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <EXTI15_10_IRQHandler+0x14>)
 8002ec2:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8002ec4:	0492      	lsls	r2, r2, #18
 8002ec6:	d400      	bmi.n	8002eca <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8002ec8:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002eca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ece:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8002ed0:	f7fe ba84 	b.w	80013dc <UI_HandleStartStopButton_cb>
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed8:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_MspInit+0x3c>)
 8002edc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ede:	f042 0201 	orr.w	r2, r2, #1
{
 8002ee2:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ee6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ee8:	f002 0201 	and.w	r2, r2, #1
 8002eec:	9200      	str	r2, [sp, #0]
 8002eee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ef2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002ef6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002f00:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002f04:	f001 f804 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f08:	b003      	add	sp, #12
 8002f0a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8002f0e:	f001 bc81 	b.w	8004814 <HAL_PWREx_DisableUCPDDeadBattery>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <USART2_IRQHandler>:

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f20:	2240      	movs	r2, #64	@ 0x40
 8002f22:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8002f24:	f7fe b9e6 	b.w	80012f4 <TSK_HighFrequencyTask>

08002f28 <TIM4_IRQHandler>:
/**
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8002f28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (0U == LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 8002f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002f5c <TIM4_IRQHandler+0x34>)
 8002f2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	07d1      	lsls	r1, r2, #31
 8002f32:	d506      	bpl.n	8002f42 <TIM4_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f34:	f06f 0201 	mvn.w	r2, #1
 8002f38:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    (void)HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7fd fe4e 	bl	8000bdc <HALL_TIMx_UP_IRQHandler>

    /* USER CODE END M1 HALL_Update   */
  }

  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx) != 0U)
 8002f40:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	0792      	lsls	r2, r2, #30
 8002f46:	d507      	bpl.n	8002f58 <TIM4_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002f48:	f06f 0202 	mvn.w	r2, #2
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <TIM4_IRQHandler+0x34>)
 8002f52:	611a      	str	r2, [r3, #16]
 8002f54:	f7fd bca8 	b.w	80008a8 <HALL_TIMx_CC_IRQHandler>
}
 8002f58:	bd10      	pop	{r4, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000054 	.word	0x20000054

08002f60 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002f62:	4804      	ldr	r0, [pc, #16]	@ (8002f74 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002f64:	f06f 0201 	mvn.w	r2, #1
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	f7ff bde1 	b.w	8002b30 <R1_TIMx_UP_IRQHandler>
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	20000120 	.word	0x20000120

08002f78 <TIM1_BRK_TIM15_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <TIM1_BRK_TIM15_IRQHandler+0x34>)

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002f7a:	b508      	push	{r3, lr}
 8002f7c:	690b      	ldr	r3, [r1, #16]
 8002f7e:	061a      	lsls	r2, r3, #24
 8002f80:	d505      	bpl.n	8002f8e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002f82:	f06f 0380 	mvn.w	r3, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8002f86:	480a      	ldr	r0, [pc, #40]	@ (8002fb0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002f88:	610b      	str	r3, [r1, #16]
 8002f8a:	f7fe ff2d 	bl	8001de8 <PWMC_OVP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002f8e:	4907      	ldr	r1, [pc, #28]	@ (8002fac <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002f90:	690b      	ldr	r3, [r1, #16]
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	d505      	bpl.n	8002fa2 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002f96:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8002f9a:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002f9c:	610b      	str	r3, [r1, #16]
 8002f9e:	f7fe ff23 	bl	8001de8 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8002fa6:	f7fe b9df 	b.w	8001368 <MC_RunMotorControlTasks>
 8002faa:	bf00      	nop
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	20000120 	.word	0x20000120

08002fb4 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler (void)
{
 8002fb4:	b510      	push	{r4, lr}
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8002fb6:	4c0d      	ldr	r4, [pc, #52]	@ (8002fec <DMA1_Channel1_IRQHandler+0x38>)
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f013 0f04 	tst.w	r3, #4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8002fbe:	68a3      	ldr	r3, [r4, #8]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8002fc0:	d001      	beq.n	8002fc6 <DMA1_Channel1_IRQHandler+0x12>
                    DMA_CCR_HTIE) == (DMA_CCR_HTIE)) ? 1UL : 0UL);
 8002fc2:	0759      	lsls	r1, r3, #29
 8002fc4:	d40b      	bmi.n	8002fde <DMA1_Channel1_IRQHandler+0x2a>
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <DMA1_Channel1_IRQHandler+0x38>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	0792      	lsls	r2, r2, #30
 8002fcc:	d506      	bpl.n	8002fdc <DMA1_Channel1_IRQHandler+0x28>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002fce:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler */

  /* USER CODE END DMA1_Channel1_IRQHandler */
}
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)R1_DMAx_TC_IRQHandler(&PWM_Handle_M1);
 8002fd4:	4806      	ldr	r0, [pc, #24]	@ (8002ff0 <DMA1_Channel1_IRQHandler+0x3c>)
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	f7ff bdac 	b.w	8002b34 <R1_DMAx_TC_IRQHandler>
}
 8002fdc:	bd10      	pop	{r4, pc}
    (void)R1_DMAx_HT_IRQHandler(&PWM_Handle_M1);
 8002fde:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <DMA1_Channel1_IRQHandler+0x3c>)
 8002fe0:	f7ff fdde 	bl	8002ba0 <R1_DMAx_HT_IRQHandler>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	6063      	str	r3, [r4, #4]
}
 8002fe8:	e7ed      	b.n	8002fc6 <DMA1_Channel1_IRQHandler+0x12>
 8002fea:	bf00      	nop
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	20000120 	.word	0x20000120

08002ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_ch4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ff4:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff6:	2400      	movs	r4, #0
{
 8002ff8:	b09f      	sub	sp, #124	@ 0x7c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ffa:	4d65      	ldr	r5, [pc, #404]	@ (8003190 <MX_TIM1_Init+0x19c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	9402      	str	r4, [sp, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ffe:	2234      	movs	r2, #52	@ 0x34
 8003000:	4621      	mov	r1, r4
 8003002:	a811      	add	r0, sp, #68	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003004:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003008:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800300c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8003010:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8003014:	940a      	str	r4, [sp, #40]	@ 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003016:	f003 fd77 	bl	8006b08 <memset>
  htim1.Instance = TIM1;
 800301a:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <MX_TIM1_Init+0x1a0>)
 800301c:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800301e:	f04f 0c40 	mov.w	ip, #64	@ 0x40
 8003022:	f241 4382 	movw	r3, #5250	@ 0x1482
 8003026:	e9c5 c302 	strd	ip, r3, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800302a:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 800302e:	2301      	movs	r3, #1
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003030:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8003032:	e9c5 e304 	strd	lr, r3, [r5, #16]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8003036:	606c      	str	r4, [r5, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8003038:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800303a:	f002 fa05 	bl	8005448 <HAL_TIM_PWM_Init>
 800303e:	2800      	cmp	r0, #0
 8003040:	d172      	bne.n	8003128 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003042:	f44f 0360 	mov.w	r3, #14680064	@ 0xe00000
 8003046:	2200      	movs	r2, #0
 8003048:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF_RISING_OC6REF_RISING;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800304c:	4850      	ldr	r0, [pc, #320]	@ (8003190 <MX_TIM1_Init+0x19c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003050:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003052:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003054:	f002 fd60 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 8003058:	2800      	cmp	r0, #0
 800305a:	d17d      	bne.n	8003158 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800305c:	2160      	movs	r1, #96	@ 0x60
 800305e:	f640 2341 	movw	r3, #2625	@ 0xa41
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003062:	2000      	movs	r0, #0
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8003064:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003068:	2100      	movs	r1, #0
 800306a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306e:	2200      	movs	r2, #0
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003070:	4847      	ldr	r0, [pc, #284]	@ (8003190 <MX_TIM1_Init+0x19c>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003072:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003074:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003076:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800307a:	f002 fbc7 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 800307e:	2800      	cmp	r0, #0
 8003080:	d167      	bne.n	8003152 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003082:	4843      	ldr	r0, [pc, #268]	@ (8003190 <MX_TIM1_Init+0x19c>)
 8003084:	2204      	movs	r2, #4
 8003086:	a90a      	add	r1, sp, #40	@ 0x28
 8003088:	f002 fbc0 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 800308c:	2800      	cmp	r0, #0
 800308e:	d15d      	bne.n	800314c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003090:	483f      	ldr	r0, [pc, #252]	@ (8003190 <MX_TIM1_Init+0x19c>)
 8003092:	2208      	movs	r2, #8
 8003094:	a90a      	add	r1, sp, #40	@ 0x28
 8003096:	f002 fbb9 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 800309a:	2800      	cmp	r0, #0
 800309c:	d153      	bne.n	8003146 <MX_TIM1_Init+0x152>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800309e:	2270      	movs	r2, #112	@ 0x70
 80030a0:	f241 33ca 	movw	r3, #5066	@ 0x13ca
 80030a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030a8:	4839      	ldr	r0, [pc, #228]	@ (8003190 <MX_TIM1_Init+0x19c>)
 80030aa:	220c      	movs	r2, #12
 80030ac:	a90a      	add	r1, sp, #40	@ 0x28
 80030ae:	f002 fbad 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d144      	bne.n	8003140 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
  }
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) + 1);
 80030b6:	f241 4383 	movw	r3, #5251	@ 0x1483
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80030ba:	4835      	ldr	r0, [pc, #212]	@ (8003190 <MX_TIM1_Init+0x19c>)
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) + 1);
 80030bc:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80030be:	2210      	movs	r2, #16
 80030c0:	a90a      	add	r1, sp, #40	@ 0x28
 80030c2:	f002 fba3 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d137      	bne.n	800313a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_6) != HAL_OK)
 80030ca:	4831      	ldr	r0, [pc, #196]	@ (8003190 <MX_TIM1_Init+0x19c>)
 80030cc:	2214      	movs	r2, #20
 80030ce:	a90a      	add	r1, sp, #40	@ 0x28
 80030d0:	f002 fb9c 	bl	800580c <HAL_TIM_PWM_ConfigChannel>
 80030d4:	bb70      	cbnz	r0, 8003134 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80030d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80030da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030de:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80030e0:	e9cd 0211 	strd	r0, r2, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80030e4:	203f      	movs	r0, #63	@ 0x3f
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80030ea:	e9cd 3013 	strd	r3, r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030ee:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030f2:	e9cd 3215 	strd	r3, r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030f6:	e9cd 3019 	strd	r3, r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Filter = 3;
 80030fa:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030fc:	4824      	ldr	r0, [pc, #144]	@ (8003190 <MX_TIM1_Init+0x19c>)
  sBreakDeadTimeConfig.Break2Filter = 3;
 80030fe:	921b      	str	r2, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003100:	a911      	add	r1, sp, #68	@ 0x44
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003102:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003106:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800310a:	f002 fd57 	bl	8005bbc <HAL_TIMEx_ConfigBreakDeadTime>
 800310e:	b970      	cbnz	r0, 800312e <MX_TIM1_Init+0x13a>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8003110:	4a20      	ldr	r2, [pc, #128]	@ (8003194 <MX_TIM1_Init+0x1a0>)
 8003112:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8003116:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800311c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003120:	9309      	str	r3, [sp, #36]	@ 0x24
  if(timHandle->Instance==TIM1)
 8003122:	d01c      	beq.n	800315e <MX_TIM1_Init+0x16a>
}
 8003124:	b01f      	add	sp, #124	@ 0x7c
 8003126:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003128:	f7fd ff30 	bl	8000f8c <Error_Handler>
 800312c:	e789      	b.n	8003042 <MX_TIM1_Init+0x4e>
    Error_Handler();
 800312e:	f7fd ff2d 	bl	8000f8c <Error_Handler>
 8003132:	e7ed      	b.n	8003110 <MX_TIM1_Init+0x11c>
    Error_Handler();
 8003134:	f7fd ff2a 	bl	8000f8c <Error_Handler>
 8003138:	e7cd      	b.n	80030d6 <MX_TIM1_Init+0xe2>
    Error_Handler();
 800313a:	f7fd ff27 	bl	8000f8c <Error_Handler>
 800313e:	e7c4      	b.n	80030ca <MX_TIM1_Init+0xd6>
    Error_Handler();
 8003140:	f7fd ff24 	bl	8000f8c <Error_Handler>
 8003144:	e7b7      	b.n	80030b6 <MX_TIM1_Init+0xc2>
    Error_Handler();
 8003146:	f7fd ff21 	bl	8000f8c <Error_Handler>
 800314a:	e7a8      	b.n	800309e <MX_TIM1_Init+0xaa>
    Error_Handler();
 800314c:	f7fd ff1e 	bl	8000f8c <Error_Handler>
 8003150:	e79e      	b.n	8003090 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8003152:	f7fd ff1b 	bl	8000f8c <Error_Handler>
 8003156:	e794      	b.n	8003082 <MX_TIM1_Init+0x8e>
    Error_Handler();
 8003158:	f7fd ff18 	bl	8000f8c <Error_Handler>
 800315c:	e77e      	b.n	800305c <MX_TIM1_Init+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800315e:	f502 4264 	add.w	r2, r2, #58368	@ 0xe400
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
                          |M1_PWM_WL_Pin|M1_PWM_WH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003162:	2302      	movs	r3, #2
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003164:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003166:	480c      	ldr	r0, [pc, #48]	@ (8003198 <MX_TIM1_Init+0x1a4>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003168:	f041 0110 	orr.w	r1, r1, #16
 800316c:	64d1      	str	r1, [r2, #76]	@ 0x4c
 800316e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003170:	9309      	str	r3, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003172:	f002 0210 	and.w	r2, r2, #16
 8003176:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VL_Pin|M1_PWM_VH_Pin
 8003178:	f44f 547c 	mov.w	r4, #16128	@ 0x3f00
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800317c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003182:	e9cd 3307 	strd	r3, r3, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003186:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003188:	f000 ffd0 	bl	800412c <HAL_GPIO_Init>
}
 800318c:	b01f      	add	sp, #124	@ 0x7c
 800318e:	bd30      	pop	{r4, r5, pc}
 8003190:	20000580 	.word	0x20000580
 8003194:	40012c00 	.word	0x40012c00
 8003198:	48001000 	.word	0x48001000

0800319c <MX_TIM4_Init>:
{
 800319c:	b500      	push	{lr}
  htim4.Instance = TIM4;
 800319e:	4824      	ldr	r0, [pc, #144]	@ (8003230 <MX_TIM4_Init+0x94>)
{
 80031a0:	b08d      	sub	sp, #52	@ 0x34
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031a2:	2300      	movs	r3, #0
 80031a4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80031a8:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80031ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80031b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim4.Init.Prescaler = 0;
 80031b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031bc:	9303      	str	r3, [sp, #12]
  htim4.Init.Prescaler = 0;
 80031be:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c0:	6183      	str	r3, [r0, #24]
  htim4.Instance = TIM4;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003234 <MX_TIM4_Init+0x98>)
 80031c4:	6003      	str	r3, [r0, #0]
  htim4.Init.Prescaler = 0;
 80031c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031ca:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80031cc:	f002 f8be 	bl	800534c <HAL_TIM_Base_Init>
 80031d0:	bb00      	cbnz	r0, 8003214 <MX_TIM4_Init+0x78>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031d6:	4816      	ldr	r0, [pc, #88]	@ (8003230 <MX_TIM4_Init+0x94>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d8:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80031da:	a908      	add	r1, sp, #32
 80031dc:	f002 f9b2 	bl	8005544 <HAL_TIM_ConfigClockSource>
 80031e0:	bb18      	cbnz	r0, 800322a <MX_TIM4_Init+0x8e>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031e2:	2200      	movs	r2, #0
 80031e4:	2300      	movs	r3, #0
 80031e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80031ea:	4811      	ldr	r0, [pc, #68]	@ (8003230 <MX_TIM4_Init+0x94>)
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031ec:	220c      	movs	r2, #12
 80031ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80031f0:	a904      	add	r1, sp, #16
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_HallSensor_Init(&htim4, &sConfig) != HAL_OK)
 80031f6:	f002 fc25 	bl	8005a44 <HAL_TIMEx_HallSensor_Init>
 80031fa:	b998      	cbnz	r0, 8003224 <MX_TIM4_Init+0x88>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80031fc:	2250      	movs	r2, #80	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031fe:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003200:	480b      	ldr	r0, [pc, #44]	@ (8003230 <MX_TIM4_Init+0x94>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8003202:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003204:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003208:	f002 fc86 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 800320c:	b928      	cbnz	r0, 800321a <MX_TIM4_Init+0x7e>
}
 800320e:	b00d      	add	sp, #52	@ 0x34
 8003210:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003214:	f7fd feba 	bl	8000f8c <Error_Handler>
 8003218:	e7db      	b.n	80031d2 <MX_TIM4_Init+0x36>
    Error_Handler();
 800321a:	f7fd feb7 	bl	8000f8c <Error_Handler>
}
 800321e:	b00d      	add	sp, #52	@ 0x34
 8003220:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003224:	f7fd feb2 	bl	8000f8c <Error_Handler>
 8003228:	e7e8      	b.n	80031fc <MX_TIM4_Init+0x60>
    Error_Handler();
 800322a:	f7fd feaf 	bl	8000f8c <Error_Handler>
 800322e:	e7d8      	b.n	80031e2 <MX_TIM4_Init+0x46>
 8003230:	20000530 	.word	0x20000530
 8003234:	40000800 	.word	0x40000800

08003238 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 8003238:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <HAL_TIM_PWM_MspInit+0x68>)
 800323a:	6802      	ldr	r2, [r0, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d000      	beq.n	8003242 <HAL_TIM_PWM_MspInit+0xa>
 8003240:	4770      	bx	lr
{
 8003242:	b530      	push	{r4, r5, lr}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003244:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8003248:	b083      	sub	sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 800324a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    hdma_tim1_ch4.Instance = DMA1_Channel1;
 800324c:	4d15      	ldr	r5, [pc, #84]	@ (80032a4 <HAL_TIM_PWM_MspInit+0x6c>)
 800324e:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <HAL_TIM_PWM_MspInit+0x70>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003254:	661a      	str	r2, [r3, #96]	@ 0x60
 8003256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    hdma_tim1_ch4.Instance = DMA1_Channel1;
 8003258:	6029      	str	r1, [r5, #0]
    __HAL_RCC_TIM1_CLK_ENABLE();
 800325a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325e:	9301      	str	r3, [sp, #4]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8003260:	212d      	movs	r1, #45	@ 0x2d
 8003262:	2310      	movs	r3, #16
 8003264:	e9c5 1301 	strd	r1, r3, [r5, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	e9c5 2303 	strd	r2, r3, [r5, #12]
 8003270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003278:	e9c5 1305 	strd	r1, r3, [r5, #20]
 800327c:	4604      	mov	r4, r0
 800327e:	2220      	movs	r2, #32
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003280:	9801      	ldr	r0, [sp, #4]
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8003282:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 8003286:	4628      	mov	r0, r5
    hdma_tim1_ch4.Init.Request = DMA_REQUEST_TIM1_CH4;
 8003288:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch4) != HAL_OK)
 800328c:	f000 febc 	bl	8004008 <HAL_DMA_Init>
 8003290:	b918      	cbnz	r0, 800329a <HAL_TIM_PWM_MspInit+0x62>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4);
 8003292:	6325      	str	r5, [r4, #48]	@ 0x30
 8003294:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8003296:	b003      	add	sp, #12
 8003298:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800329a:	f7fd fe77 	bl	8000f8c <Error_Handler>
 800329e:	e7f8      	b.n	8003292 <HAL_TIM_PWM_MspInit+0x5a>
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	200004d0 	.word	0x200004d0
 80032a8:	40020008 	.word	0x40020008

080032ac <HAL_TIM_Base_MspInit>:
{
 80032ac:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM4)
 80032ae:	4a17      	ldr	r2, [pc, #92]	@ (800330c <HAL_TIM_Base_MspInit+0x60>)
 80032b0:	6801      	ldr	r1, [r0, #0]
{
 80032b2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	2300      	movs	r3, #0
  if(tim_baseHandle->Instance==TIM4)
 80032b6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80032bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80032c0:	9306      	str	r3, [sp, #24]
  if(tim_baseHandle->Instance==TIM4)
 80032c2:	d001      	beq.n	80032c8 <HAL_TIM_Base_MspInit+0x1c>
}
 80032c4:	b008      	add	sp, #32
 80032c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032cc:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d0:	2402      	movs	r4, #2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	480e      	ldr	r0, [pc, #56]	@ (8003310 <HAL_TIM_Base_MspInit+0x64>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032d6:	f042 0204 	orr.w	r2, r2, #4
 80032da:	659a      	str	r2, [r3, #88]	@ 0x58
 80032dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032de:	f002 0204 	and.w	r2, r2, #4
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032e8:	4322      	orrs	r2, r4
 80032ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80032ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ee:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	4023      	ands	r3, r4
 80032f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 80032f4:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin|M1_HALL_H2_Pin|M1_HALL_H3_Pin;
 80032fa:	2302      	movs	r3, #2
 80032fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003300:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	f000 ff12 	bl	800412c <HAL_GPIO_Init>
}
 8003308:	b008      	add	sp, #32
 800330a:	bd10      	pop	{r4, pc}
 800330c:	40000800 	.word	0x40000800
 8003310:	48000400 	.word	0x48000400

08003314 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b0a3      	sub	sp, #140	@ 0x8c

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003318:	2220      	movs	r2, #32
 800331a:	2100      	movs	r1, #0
 800331c:	a809      	add	r0, sp, #36	@ 0x24
 800331e:	f003 fbf3 	bl	8006b08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003322:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	a812      	add	r0, sp, #72	@ 0x48
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800332c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003330:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003334:	f003 fbe8 	bl	8006b08 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003338:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333a:	a811      	add	r0, sp, #68	@ 0x44
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800333c:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800333e:	f001 fdf9 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 8003342:	2800      	cmp	r0, #0
 8003344:	d179      	bne.n	800343a <MX_USART2_UART_Init+0x126>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003346:	4b3e      	ldr	r3, [pc, #248]	@ (8003440 <MX_USART2_UART_Init+0x12c>)
 8003348:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800334a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800334e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003352:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003356:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003358:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800335a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003364:	f003 0301 	and.w	r3, r3, #1
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003368:	2400      	movs	r4, #0
 800336a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800336c:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800336e:	2304      	movs	r3, #4
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003372:	2600      	movs	r6, #0
 8003374:	2707      	movs	r7, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  (void)tmpreg;
 800337a:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800337c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800337e:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003382:	e9cd 6706 	strd	r6, r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003386:	9405      	str	r4, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003388:	f002 fc66 	bl	8005c58 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800338c:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338e:	a902      	add	r1, sp, #8
 8003390:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003394:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003396:	e9cd 6706 	strd	r6, r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800339a:	e9cd 4404 	strd	r4, r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800339e:	9503      	str	r5, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a0:	f002 fc5a 	bl	8005c58 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a4:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <MX_USART2_UART_Init+0x130>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033a6:	4a28      	ldr	r2, [pc, #160]	@ (8003448 <MX_USART2_UART_Init+0x134>)
 80033a8:	68d2      	ldr	r2, [r2, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	f883 4326 	strb.w	r4, [r3, #806]	@ 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	2240      	movs	r2, #64	@ 0x40
 80033b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 80033b2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033b6:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART2, &USART_InitStruct);
 80033b8:	4824      	ldr	r0, [pc, #144]	@ (800344c <MX_USART2_UART_Init+0x138>)
 80033ba:	a909      	add	r1, sp, #36	@ 0x24
  USART_InitStruct.BaudRate = 115200;
 80033bc:	e9cd 4209 	strd	r4, r2, [sp, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80033c0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80033c4:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80033c8:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80033cc:	f002 fec4 	bl	8006158 <LL_USART_Init>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80033d4:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80033d8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80033dc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80033e4:	e840 3100 	strex	r1, r3, [r0]
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d1f3      	bne.n	80033d4 <MX_USART2_UART_Init+0xc0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80033f0:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80033f4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80033f8:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003400:	e840 3100 	strex	r1, r3, [r0]
 8003404:	2900      	cmp	r1, #0
 8003406:	d1f3      	bne.n	80033f0 <MX_USART2_UART_Init+0xdc>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8003408:	4b10      	ldr	r3, [pc, #64]	@ (800344c <MX_USART2_UART_Init+0x138>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003410:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003420:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	0291      	lsls	r1, r2, #10
 800342e:	d5fc      	bpl.n	800342a <MX_USART2_UART_Init+0x116>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	0252      	lsls	r2, r2, #9
 8003434:	d5f9      	bpl.n	800342a <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003436:	b023      	add	sp, #140	@ 0x8c
 8003438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 800343a:	f7fd fda7 	bl	8000f8c <Error_Handler>
 800343e:	e782      	b.n	8003346 <MX_USART2_UART_Init+0x32>
 8003440:	40021000 	.word	0x40021000
 8003444:	e000e100 	.word	0xe000e100
 8003448:	e000ed00 	.word	0xe000ed00
 800344c:	40004400 	.word	0x40004400

08003450 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b0a3      	sub	sp, #140	@ 0x8c

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003454:	2220      	movs	r2, #32
 8003456:	2100      	movs	r1, #0
 8003458:	a809      	add	r0, sp, #36	@ 0x24
 800345a:	f003 fb55 	bl	8006b08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	a812      	add	r0, sp, #72	@ 0x48
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003468:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800346c:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003470:	f003 fb4a 	bl	8006b08 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003474:	2304      	movs	r3, #4
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003476:	a811      	add	r0, sp, #68	@ 0x44
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003478:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347a:	f001 fd5b 	bl	8004f34 <HAL_RCCEx_PeriphCLKConfig>
 800347e:	2800      	cmp	r0, #0
 8003480:	d172      	bne.n	8003568 <MX_USART3_UART_Init+0x118>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003482:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <MX_USART3_UART_Init+0x120>)
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	483b      	ldr	r0, [pc, #236]	@ (8003574 <MX_USART3_UART_Init+0x124>)
 8003486:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003488:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800348c:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800348e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003490:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8003494:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8003496:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003498:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800349a:	f042 0202 	orr.w	r2, r2, #2
 800349e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034a6:	2400      	movs	r4, #0
 80034a8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034aa:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80034ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034b2:	2600      	movs	r6, #0
 80034b4:	2707      	movs	r7, #7
  (void)tmpreg;
 80034b6:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80034b8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034ba:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034be:	e9cd 6706 	strd	r6, r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034c2:	9405      	str	r4, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	f002 fbc8 	bl	8005c58 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80034c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	a902      	add	r1, sp, #8
 80034ce:	4829      	ldr	r0, [pc, #164]	@ (8003574 <MX_USART3_UART_Init+0x124>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80034d0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034d6:	e9cd 4404 	strd	r4, r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034da:	9503      	str	r5, [sp, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034dc:	f002 fbbc 	bl	8005c58 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
  USART_InitStruct.BaudRate = 115200;
 80034e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80034e4:	230c      	movs	r3, #12
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART3, &USART_InitStruct);
 80034e6:	4824      	ldr	r0, [pc, #144]	@ (8003578 <MX_USART3_UART_Init+0x128>)
 80034e8:	a909      	add	r1, sp, #36	@ 0x24
  USART_InitStruct.BaudRate = 115200;
 80034ea:	e9cd 4209 	strd	r4, r2, [sp, #36]	@ 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80034ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80034f2:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80034f6:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART3, &USART_InitStruct);
 80034fa:	f002 fe2d 	bl	8006158 <LL_USART_Init>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003502:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8003506:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800350a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 8003512:	e840 3100 	strex	r1, r3, [r0]
 8003516:	2900      	cmp	r1, #0
 8003518:	d1f3      	bne.n	8003502 <MX_USART3_UART_Init+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800351e:	f602 0308 	addw	r3, r2, #2056	@ 0x808
 8003522:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8003526:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	f602 0008 	addw	r0, r2, #2056	@ 0x808
 800352e:	e840 3100 	strex	r1, r3, [r0]
 8003532:	2900      	cmp	r1, #0
 8003534:	d1f3      	bne.n	800351e <MX_USART3_UART_Init+0xce>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8003536:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <MX_USART3_UART_Init+0x128>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800353e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800354e:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	0291      	lsls	r1, r2, #10
 800355c:	d5fc      	bpl.n	8003558 <MX_USART3_UART_Init+0x108>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	0252      	lsls	r2, r2, #9
 8003562:	d5f9      	bpl.n	8003558 <MX_USART3_UART_Init+0x108>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003564:	b023      	add	sp, #140	@ 0x8c
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8003568:	f7fd fd10 	bl	8000f8c <Error_Handler>
 800356c:	e789      	b.n	8003482 <MX_USART3_UART_Init+0x32>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	48000400 	.word	0x48000400
 8003578:	40004800 	.word	0x40004800

0800357c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800357c:	4a03      	ldr	r2, [pc, #12]	@ (800358c <SystemInit+0x10>)
 800357e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003586:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800358a:	4770      	bx	lr
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003590:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_InitTick+0x40>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b90b      	cbnz	r3, 800359c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003598:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 800359a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800359c:	490d      	ldr	r1, [pc, #52]	@ (80035d4 <HAL_InitTick+0x44>)
 800359e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035a2:	4605      	mov	r5, r0
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	6808      	ldr	r0, [r1, #0]
 80035aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ae:	f000 fd0b 	bl	8003fc8 <HAL_SYSTICK_Config>
 80035b2:	4604      	mov	r4, r0
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d1ef      	bne.n	8003598 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b8:	2d0f      	cmp	r5, #15
 80035ba:	d8ed      	bhi.n	8003598 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035bc:	4602      	mov	r2, r0
 80035be:	4629      	mov	r1, r5
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 fcb6 	bl	8003f34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_InitTick+0x48>)
 80035ca:	4620      	mov	r0, r4
 80035cc:	601d      	str	r5, [r3, #0]
}
 80035ce:	bd38      	pop	{r3, r4, r5, pc}
 80035d0:	200002f0 	.word	0x200002f0
 80035d4:	200002ec 	.word	0x200002ec
 80035d8:	200002f4 	.word	0x200002f4

080035dc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003608 <HAL_Init+0x2c>)
 80035de:	6813      	ldr	r3, [r2, #0]
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 80035e4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035ea:	f000 fc91 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035ee:	2004      	movs	r0, #4
 80035f0:	f7ff ffce 	bl	8003590 <HAL_InitTick>
 80035f4:	b110      	cbz	r0, 80035fc <HAL_Init+0x20>
    status = HAL_ERROR;
 80035f6:	2401      	movs	r4, #1
}
 80035f8:	4620      	mov	r0, r4
 80035fa:	bd10      	pop	{r4, pc}
 80035fc:	4604      	mov	r4, r0
    HAL_MspInit();
 80035fe:	f7ff fc6b 	bl	8002ed8 <HAL_MspInit>
}
 8003602:	4620      	mov	r0, r4
 8003604:	bd10      	pop	{r4, pc}
 8003606:	bf00      	nop
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800360c:	4a03      	ldr	r2, [pc, #12]	@ (800361c <HAL_IncTick+0x10>)
 800360e:	4904      	ldr	r1, [pc, #16]	@ (8003620 <HAL_IncTick+0x14>)
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	6809      	ldr	r1, [r1, #0]
 8003614:	440b      	add	r3, r1
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200005cc 	.word	0x200005cc
 8003620:	200002f0 	.word	0x200002f0

08003624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003624:	4b01      	ldr	r3, [pc, #4]	@ (800362c <HAL_GetTick+0x8>)
 8003626:	6818      	ldr	r0, [r3, #0]
}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200005cc 	.word	0x200005cc

08003630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003630:	b530      	push	{r4, r5, lr}
 8003632:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003634:	2300      	movs	r3, #0
 8003636:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003638:	2800      	cmp	r0, #0
 800363a:	f000 80aa 	beq.w	8003792 <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800363e:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8003640:	4604      	mov	r4, r0
 8003642:	2d00      	cmp	r5, #0
 8003644:	f000 80aa 	beq.w	800379c <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003648:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800364a:	6893      	ldr	r3, [r2, #8]
 800364c:	009d      	lsls	r5, r3, #2
 800364e:	d505      	bpl.n	800365c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003650:	6893      	ldr	r3, [r2, #8]
 8003652:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003656:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800365a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800365c:	6893      	ldr	r3, [r2, #8]
 800365e:	00d8      	lsls	r0, r3, #3
 8003660:	d419      	bmi.n	8003696 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003662:	4b68      	ldr	r3, [pc, #416]	@ (8003804 <HAL_ADC_Init+0x1d4>)
 8003664:	4868      	ldr	r0, [pc, #416]	@ (8003808 <HAL_ADC_Init+0x1d8>)
 8003666:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003668:	6891      	ldr	r1, [r2, #8]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	fba0 0303 	umull	r0, r3, r0, r3
 8003670:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800367a:	3301      	adds	r3, #1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003682:	6091      	str	r1, [r2, #8]
 8003684:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003686:	9b01      	ldr	r3, [sp, #4]
 8003688:	b12b      	cbz	r3, 8003696 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800368a:	9b01      	ldr	r3, [sp, #4]
 800368c:	3b01      	subs	r3, #1
 800368e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003690:	9b01      	ldr	r3, [sp, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003696:	6893      	ldr	r3, [r2, #8]
 8003698:	00d9      	lsls	r1, r3, #3
 800369a:	d47d      	bmi.n	8003798 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800369e:	f043 0310 	orr.w	r3, r3, #16
 80036a2:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036a6:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a8:	4303      	orrs	r3, r0
 80036aa:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ac:	6893      	ldr	r3, [r2, #8]
 80036ae:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036b2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80036b4:	d169      	bne.n	800378a <HAL_ADC_Init+0x15a>
 80036b6:	06db      	lsls	r3, r3, #27
 80036b8:	d467      	bmi.n	800378a <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80036bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c6:	6893      	ldr	r3, [r2, #8]
 80036c8:	07dd      	lsls	r5, r3, #31
 80036ca:	d409      	bmi.n	80036e0 <HAL_ADC_Init+0xb0>
 80036cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f013 0f01 	tst.w	r3, #1
 80036d6:	4b4d      	ldr	r3, [pc, #308]	@ (800380c <HAL_ADC_Init+0x1dc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	d101      	bne.n	80036e0 <HAL_ADC_Init+0xb0>
 80036dc:	07d9      	lsls	r1, r3, #31
 80036de:	d57a      	bpl.n	80037d6 <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 80036e0:	68e5      	ldr	r5, [r4, #12]
 80036e2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036e4:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 80036e8:	432b      	orrs	r3, r5
 80036ea:	68a5      	ldr	r5, [r4, #8]
 80036ec:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ee:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036f0:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80036f2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036fa:	d055      	beq.n	80037a8 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036fc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80036fe:	b121      	cbz	r1, 800370a <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003700:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003702:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003706:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003708:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800370a:	68d5      	ldr	r5, [r2, #12]
 800370c:	4940      	ldr	r1, [pc, #256]	@ (8003810 <HAL_ADC_Init+0x1e0>)
 800370e:	4029      	ands	r1, r5
 8003710:	4319      	orrs	r1, r3
 8003712:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003714:	6913      	ldr	r3, [r2, #16]
 8003716:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003718:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800371c:	430b      	orrs	r3, r1
 800371e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003720:	6893      	ldr	r3, [r2, #8]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	d422      	bmi.n	800376c <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003726:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003728:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800372c:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800372e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003732:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003734:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003738:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800373c:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 800373e:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003740:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003742:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003744:	2900      	cmp	r1, #0
 8003746:	d03c      	beq.n	80037c2 <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800374e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003752:	f36f 030d 	bfc	r3, #0, #14
 8003756:	430b      	orrs	r3, r1
 8003758:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800375c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003760:	2b01      	cmp	r3, #1
 8003762:	d040      	beq.n	80037e6 <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003764:	6913      	ldr	r3, [r2, #16]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800376c:	6963      	ldr	r3, [r4, #20]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d01f      	beq.n	80037b2 <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003772:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003774:	f023 030f 	bic.w	r3, r3, #15
 8003778:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800377a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800377c:	f023 0303 	bic.w	r3, r3, #3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003786:	b003      	add	sp, #12
 8003788:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800378c:	f043 0310 	orr.w	r3, r3, #16
 8003790:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003792:	2001      	movs	r0, #1
}
 8003794:	b003      	add	sp, #12
 8003796:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003798:	2000      	movs	r0, #0
 800379a:	e787      	b.n	80036ac <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 800379c:	f7fc fdcc 	bl	8000338 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80037a0:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80037a2:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 80037a6:	e74f      	b.n	8003648 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80037a8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80037aa:	3901      	subs	r1, #1
 80037ac:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80037b0:	e7a4      	b.n	80036fc <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037b2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80037b4:	6a23      	ldr	r3, [r4, #32]
 80037b6:	f021 010f 	bic.w	r1, r1, #15
 80037ba:	3b01      	subs	r3, #1
 80037bc:	430b      	orrs	r3, r1
 80037be:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c0:	e7db      	b.n	800377a <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037c8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80037cc:	f36f 030d 	bfc	r3, #0, #14
 80037d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80037d4:	e7c2      	b.n	800375c <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037d6:	490f      	ldr	r1, [pc, #60]	@ (8003814 <HAL_ADC_Init+0x1e4>)
 80037d8:	6865      	ldr	r5, [r4, #4]
 80037da:	688b      	ldr	r3, [r1, #8]
 80037dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80037e0:	432b      	orrs	r3, r5
 80037e2:	608b      	str	r3, [r1, #8]
}
 80037e4:	e77c      	b.n	80036e0 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 80037e6:	6911      	ldr	r1, [r2, #16]
 80037e8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80037ea:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80037ec:	f36f 018a 	bfc	r1, #2, #9
 80037f0:	432b      	orrs	r3, r5
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80037fa:	430b      	orrs	r3, r1
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6113      	str	r3, [r2, #16]
 8003802:	e7b3      	b.n	800376c <HAL_ADC_Init+0x13c>
 8003804:	200002ec 	.word	0x200002ec
 8003808:	053e2d63 	.word	0x053e2d63
 800380c:	50000100 	.word	0x50000100
 8003810:	fff04007 	.word	0xfff04007
 8003814:	50000300 	.word	0x50000300

08003818 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8003818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800381c:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8003820:	b083      	sub	sp, #12
 8003822:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8003824:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003826:	f04f 0000 	mov.w	r0, #0
 800382a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800382c:	f000 8175 	beq.w	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x302>
 8003830:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003832:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8003834:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8003838:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800383c:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800383e:	2d00      	cmp	r5, #0
 8003840:	d072      	beq.n	8003928 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8003842:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003844:	2d01      	cmp	r5, #1
 8003846:	d06f      	beq.n	8003928 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003848:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800384a:	f000 001f 	and.w	r0, r0, #31
 800384e:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8003852:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003854:	2f00      	cmp	r7, #0
 8003856:	f040 811a 	bne.w	8003a8e <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800385a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800385c:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800385e:	2800      	cmp	r0, #0
 8003860:	f000 821e 	beq.w	8003ca0 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8003864:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003866:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 800386a:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800386c:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800386e:	4330      	orrs	r0, r6
 8003870:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003874:	6898      	ldr	r0, [r3, #8]
 8003876:	0700      	lsls	r0, r0, #28
 8003878:	d410      	bmi.n	800389c <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800387a:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800387e:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8003882:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8003884:	2d00      	cmp	r5, #0
 8003886:	f040 80f7 	bne.w	8003a78 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 800388a:	68dd      	ldr	r5, [r3, #12]
 800388c:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8003890:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8003894:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8003898:	4328      	orrs	r0, r5
 800389a:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800389c:	6898      	ldr	r0, [r3, #8]
 800389e:	f010 0004 	ands.w	r0, r0, #4
 80038a2:	d057      	beq.n	8003954 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038a4:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a6:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a8:	689d      	ldr	r5, [r3, #8]
 80038aa:	07ee      	lsls	r6, r5, #31
 80038ac:	d414      	bmi.n	80038d8 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80038ae:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80038b0:	4da3      	ldr	r5, [pc, #652]	@ (8003b40 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80038b2:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 80038b6:	f007 0c18 	and.w	ip, r7, #24
 80038ba:	fa25 f50c 	lsr.w	r5, r5, ip
 80038be:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 80038c2:	4025      	ands	r5, r4
 80038c4:	ea26 0c0e 	bic.w	ip, r6, lr
 80038c8:	ea45 050c 	orr.w	r5, r5, ip
 80038cc:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038d0:	4d9c      	ldr	r5, [pc, #624]	@ (8003b44 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80038d2:	42af      	cmp	r7, r5
 80038d4:	f000 80f6 	beq.w	8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80038d8:	499b      	ldr	r1, [pc, #620]	@ (8003b48 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80038da:	420c      	tst	r4, r1
 80038dc:	d01e      	beq.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80038de:	4e9b      	ldr	r6, [pc, #620]	@ (8003b4c <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80038e0:	4d9b      	ldr	r5, [pc, #620]	@ (8003b50 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 80038e2:	68b1      	ldr	r1, [r6, #8]
 80038e4:	42ac      	cmp	r4, r5
 80038e6:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 80038ea:	f000 809f 	beq.w	8003a2c <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038ee:	4d99      	ldr	r5, [pc, #612]	@ (8003b54 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 80038f0:	42ac      	cmp	r4, r5
 80038f2:	f000 809b 	beq.w	8003a2c <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80038f6:	4d98      	ldr	r5, [pc, #608]	@ (8003b58 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 80038f8:	42ac      	cmp	r4, r5
 80038fa:	f000 8112 	beq.w	8003b22 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80038fe:	4d97      	ldr	r5, [pc, #604]	@ (8003b5c <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8003900:	42ac      	cmp	r4, r5
 8003902:	d10b      	bne.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003904:	0249      	lsls	r1, r1, #9
 8003906:	d409      	bmi.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8003908:	4995      	ldr	r1, [pc, #596]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800390a:	428b      	cmp	r3, r1
 800390c:	d006      	beq.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800390e:	68b3      	ldr	r3, [r6, #8]
 8003910:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003914:	433b      	orrs	r3, r7
 8003916:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800391a:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391c:	2300      	movs	r3, #0
 800391e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003922:	b003      	add	sp, #12
 8003924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003928:	2809      	cmp	r0, #9
 800392a:	d1a3      	bne.n	8003874 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800392c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800392e:	0c65      	lsrs	r5, r4, #17
 8003930:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003934:	b120      	cbz	r0, 8003940 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003936:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003938:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800393c:	4330      	orrs	r0, r6
 800393e:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8003940:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003942:	4e88      	ldr	r6, [pc, #544]	@ (8003b64 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003944:	4030      	ands	r0, r6
 8003946:	4328      	orrs	r0, r5
 8003948:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800394a:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800394c:	6655      	str	r5, [r2, #100]	@ 0x64
 800394e:	0700      	lsls	r0, r0, #28
 8003950:	d4a4      	bmi.n	800389c <HAL_ADCEx_InjectedConfigChannel+0x84>
 8003952:	e792      	b.n	800387a <HAL_ADCEx_InjectedConfigChannel+0x62>
 8003954:	689d      	ldr	r5, [r3, #8]
 8003956:	072f      	lsls	r7, r5, #28
 8003958:	d4a6      	bmi.n	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800395a:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800395c:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003960:	2d00      	cmp	r5, #0
 8003962:	f040 80a6 	bne.w	8003ab2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003966:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003968:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800396a:	f000 819b 	beq.w	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800396e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8003972:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003974:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8003976:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800397a:	2d01      	cmp	r5, #1
 800397c:	f000 8185 	beq.w	8003c8a <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003980:	691d      	ldr	r5, [r3, #16]
 8003982:	f025 0502 	bic.w	r5, r5, #2
 8003986:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003988:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 800398a:	f3c4 5704 	ubfx	r7, r4, #20, #5
 800398e:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003990:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8003992:	40bd      	lsls	r5, r7
 8003994:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003998:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 800399c:	ea6f 0505 	mvn.w	r5, r5
 80039a0:	f000 8169 	beq.w	8003c76 <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039a4:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80039a8:	40be      	lsls	r6, r7
 80039aa:	f85c 7004 	ldr.w	r7, [ip, r4]
 80039ae:	403d      	ands	r5, r7
 80039b0:	4335      	orrs	r5, r6
 80039b2:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80039b6:	695c      	ldr	r4, [r3, #20]
 80039b8:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80039bc:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80039be:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80039c0:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80039c2:	694d      	ldr	r5, [r1, #20]
 80039c4:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80039c6:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 80039c8:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80039ca:	f000 810c 	beq.w	8003be6 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80039ce:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80039d2:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 80039d4:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 80039d8:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039dc:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 80039e0:	4e61      	ldr	r6, [pc, #388]	@ (8003b68 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80039e2:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 80039e6:	ea0e 0606 	and.w	r6, lr, r6
 80039ea:	ea46 060c 	orr.w	r6, r6, ip
 80039ee:	4334      	orrs	r4, r6
 80039f0:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80039f4:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039f8:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80039fa:	698e      	ldr	r6, [r1, #24]
 80039fc:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003a00:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8003a04:	4334      	orrs	r4, r6
 8003a06:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a0a:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8003a0c:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8003a0e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8003a12:	f1a6 0601 	sub.w	r6, r6, #1
 8003a16:	fab6 f686 	clz	r6, r6
 8003a1a:	0976      	lsrs	r6, r6, #5
 8003a1c:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8003a20:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8003a24:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003a28:	680c      	ldr	r4, [r1, #0]
}
 8003a2a:	e73d      	b.n	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a2c:	020d      	lsls	r5, r1, #8
 8003a2e:	f53f af75 	bmi.w	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a36:	f47f af71 	bne.w	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a3a:	4944      	ldr	r1, [pc, #272]	@ (8003b4c <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003a3c:	4c4b      	ldr	r4, [pc, #300]	@ (8003b6c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003a3e:	688b      	ldr	r3, [r1, #8]
 8003a40:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003a44:	433b      	orrs	r3, r7
 8003a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a4a:	608b      	str	r3, [r1, #8]
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	4948      	ldr	r1, [pc, #288]	@ (8003b70 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	fba1 1303 	umull	r1, r3, r1, r3
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003a60:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003a62:	9b01      	ldr	r3, [sp, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f43f af59 	beq.w	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 8003a6a:	9b01      	ldr	r3, [sp, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f9      	bne.n	8003a6a <HAL_ADCEx_InjectedConfigChannel+0x252>
 8003a76:	e751      	b.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 8003a78:	68dd      	ldr	r5, [r3, #12]
 8003a7a:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8003a7e:	4328      	orrs	r0, r5
 8003a80:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a82:	6898      	ldr	r0, [r3, #8]
 8003a84:	f010 0004 	ands.w	r0, r0, #4
 8003a88:	f43f af64 	beq.w	8003954 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8003a8c:	e70a      	b.n	80038a4 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003a8e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8003a90:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003a92:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8003a94:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8003a96:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003a98:	2f00      	cmp	r7, #0
 8003a9a:	f47f aeeb 	bne.w	8003874 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003a9e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003aa0:	4e30      	ldr	r6, [pc, #192]	@ (8003b64 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8003aa2:	4030      	ands	r0, r6
 8003aa4:	4328      	orrs	r0, r5
 8003aa6:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa8:	6898      	ldr	r0, [r3, #8]
 8003aaa:	0700      	lsls	r0, r0, #28
 8003aac:	f53f aef6 	bmi.w	800389c <HAL_ADCEx_InjectedConfigChannel+0x84>
 8003ab0:	e6e3      	b.n	800387a <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003ab2:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	f43f af56 	beq.w	8003966 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8003aba:	2801      	cmp	r0, #1
 8003abc:	f000 8118 	beq.w	8003cf0 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ac0:	68d8      	ldr	r0, [r3, #12]
 8003ac2:	e754      	b.n	800396e <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ac4:	f1be 0f00 	cmp.w	lr, #0
 8003ac8:	d154      	bne.n	8003b74 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8003aca:	0ea4      	lsrs	r4, r4, #26
 8003acc:	3401      	adds	r4, #1
 8003ace:	f004 061f 	and.w	r6, r4, #31
 8003ad2:	2501      	movs	r5, #1
 8003ad4:	06a4      	lsls	r4, r4, #26
 8003ad6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003ada:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003adc:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ade:	ea45 0504 	orr.w	r5, r5, r4
 8003ae2:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae6:	f200 80fe 	bhi.w	8003ce6 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aea:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003aee:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8003af0:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003af2:	f006 0604 	and.w	r6, r6, #4
 8003af6:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8003afa:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8003afe:	fa05 fc04 	lsl.w	ip, r5, r4
 8003b02:	f04f 0e07 	mov.w	lr, #7
 8003b06:	59bd      	ldr	r5, [r7, r6]
 8003b08:	fa0e f404 	lsl.w	r4, lr, r4
 8003b0c:	ea25 0404 	bic.w	r4, r5, r4
 8003b10:	ea44 040c 	orr.w	r4, r4, ip
 8003b14:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8003b16:	680c      	ldr	r4, [r1, #0]
}
 8003b18:	e6de      	b.n	80038d8 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8003b1a:	2002      	movs	r0, #2
}
 8003b1c:	b003      	add	sp, #12
 8003b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b22:	01cc      	lsls	r4, r1, #7
 8003b24:	f53f aefa 	bmi.w	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b28:	490d      	ldr	r1, [pc, #52]	@ (8003b60 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8003b2a:	428b      	cmp	r3, r1
 8003b2c:	f43f aef6 	beq.w	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b30:	68b3      	ldr	r3, [r6, #8]
 8003b32:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8003b36:	433b      	orrs	r3, r7
 8003b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3c:	60b3      	str	r3, [r6, #8]
}
 8003b3e:	e6ed      	b.n	800391c <HAL_ADCEx_InjectedConfigChannel+0x104>
 8003b40:	0007ffff 	.word	0x0007ffff
 8003b44:	407f0000 	.word	0x407f0000
 8003b48:	80080000 	.word	0x80080000
 8003b4c:	50000300 	.word	0x50000300
 8003b50:	c3210000 	.word	0xc3210000
 8003b54:	90c00010 	.word	0x90c00010
 8003b58:	c7520000 	.word	0xc7520000
 8003b5c:	cb840000 	.word	0xcb840000
 8003b60:	50000100 	.word	0x50000100
 8003b64:	04104000 	.word	0x04104000
 8003b68:	03fff000 	.word	0x03fff000
 8003b6c:	200002ec 	.word	0x200002ec
 8003b70:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003b78:	2d00      	cmp	r5, #0
 8003b7a:	f000 80be 	beq.w	8003cfa <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003b7e:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b82:	3501      	adds	r5, #1
 8003b84:	f005 051f 	and.w	r5, r5, #31
 8003b88:	2d09      	cmp	r5, #9
 8003b8a:	f240 80b6 	bls.w	8003cfa <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	f000 812b 	beq.w	8003dee <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8003b98:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	06ad      	lsls	r5, r5, #26
 8003ba0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba4:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	f000 811e 	beq.w	8003dea <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8003bae:	fab6 f686 	clz	r6, r6
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	f006 061f 	and.w	r6, r6, #31
 8003bb8:	2701      	movs	r7, #1
 8003bba:	fa07 f606 	lsl.w	r6, r7, r6
 8003bbe:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	f000 8109 	beq.w	8003ddc <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8003bca:	fab4 f484 	clz	r4, r4
 8003bce:	1c66      	adds	r6, r4, #1
 8003bd0:	f006 061f 	and.w	r6, r6, #31
 8003bd4:	2403      	movs	r4, #3
 8003bd6:	f06f 071d 	mvn.w	r7, #29
 8003bda:	fb14 7406 	smlabb	r4, r4, r6, r7
 8003bde:	0524      	lsls	r4, r4, #20
 8003be0:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8003be4:	e782      	b.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be6:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8003be8:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003bea:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bee:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003bf2:	2e00      	cmp	r6, #0
 8003bf4:	d05a      	beq.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003bfa:	b126      	cbz	r6, 8003c06 <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8003bfc:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c00:	42b5      	cmp	r5, r6
 8003c02:	f000 80ce 	beq.w	8003da2 <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8003c06:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003c08:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c0a:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c0e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003c12:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c16:	fa9c f7ac 	rbit	r7, ip
 8003c1a:	f105 0e08 	add.w	lr, r5, #8
 8003c1e:	46f1      	mov	r9, lr
  if (value == 0U)
 8003c20:	2f00      	cmp	r7, #0
 8003c22:	f000 80dd 	beq.w	8003de0 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 8003c26:	fab7 f787 	clz	r7, r7
 8003c2a:	42b7      	cmp	r7, r6
 8003c2c:	f000 80a3 	beq.w	8003d76 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c30:	f8de 6000 	ldr.w	r6, [lr]
 8003c34:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c38:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c40:	f105 070c 	add.w	r7, r5, #12
 8003c44:	46b9      	mov	r9, r7
  if (value == 0U)
 8003c46:	f1b8 0f00 	cmp.w	r8, #0
 8003c4a:	f000 80d3 	beq.w	8003df4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8003c4e:	fab8 f888 	clz	r8, r8
 8003c52:	45b0      	cmp	r8, r6
 8003c54:	d077      	beq.n	8003d46 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c56:	683d      	ldr	r5, [r7, #0]
 8003c58:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c5a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8003c62:	2e00      	cmp	r6, #0
 8003c64:	f43f ae20 	beq.w	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 8003c68:	fab6 f486 	clz	r4, r6
 8003c6c:	42ac      	cmp	r4, r5
 8003c6e:	f000 80af 	beq.w	8003dd0 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003c72:	4664      	mov	r4, ip
 8003c74:	e618      	b.n	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c76:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8003c7a:	593e      	ldr	r6, [r7, r4]
 8003c7c:	4035      	ands	r5, r6
 8003c7e:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c80:	695c      	ldr	r4, [r3, #20]
 8003c82:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8003c86:	615c      	str	r4, [r3, #20]
}
 8003c88:	e699      	b.n	80039be <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8003c8a:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8003c8e:	691e      	ldr	r6, [r3, #16]
 8003c90:	433d      	orrs	r5, r7
 8003c92:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8003c96:	4335      	orrs	r5, r6
 8003c98:	f045 0502 	orr.w	r5, r5, #2
 8003c9c:	611d      	str	r5, [r3, #16]
 8003c9e:	e673      	b.n	8003988 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	e5e4      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ca4:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8003ca8:	60d8      	str	r0, [r3, #12]
 8003caa:	e663      	b.n	8003974 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003cac:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d076      	beq.n	8003da2 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cb4:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003cb6:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cb8:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cbc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003cc0:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d054      	beq.n	8003d72 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cc8:	68ae      	ldr	r6, [r5, #8]
 8003cca:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ccc:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cd0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d034      	beq.n	8003d42 <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cd8:	68ee      	ldr	r6, [r5, #12]
 8003cda:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cdc:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ce0:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8003ce4:	e7c2      	b.n	8003c6c <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ce6:	3c1e      	subs	r4, #30
 8003ce8:	0524      	lsls	r4, r4, #20
 8003cea:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8003cee:	e6fd      	b.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cf0:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8003cf2:	f045 0520 	orr.w	r5, r5, #32
 8003cf6:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8003cf8:	e63d      	b.n	8003976 <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	f000 8082 	beq.w	8003e08 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8003d04:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d08:	3501      	adds	r5, #1
 8003d0a:	06ad      	lsls	r5, r5, #26
 8003d0c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003d14:	2e00      	cmp	r6, #0
 8003d16:	d075      	beq.n	8003e04 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d18:	fab6 f686 	clz	r6, r6
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	f006 061f 	and.w	r6, r6, #31
 8003d22:	2701      	movs	r7, #1
 8003d24:	fa07 f606 	lsl.w	r6, r7, r6
 8003d28:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003d2e:	2c00      	cmp	r4, #0
 8003d30:	d065      	beq.n	8003dfe <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8003d32:	fab4 f484 	clz	r4, r4
 8003d36:	3401      	adds	r4, #1
 8003d38:	f004 041f 	and.w	r4, r4, #31
 8003d3c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003d40:	e6d3      	b.n	8003aea <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8003d42:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8003d46:	f8de 4000 	ldr.w	r4, [lr]
 8003d4a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003d4e:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d52:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d56:	68ec      	ldr	r4, [r5, #12]
 8003d58:	68ed      	ldr	r5, [r5, #12]
 8003d5a:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d5e:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d60:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d64:	4664      	mov	r4, ip
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	f47f af79 	bne.w	8003c5e <HAL_ADCEx_InjectedConfigChannel+0x446>
 8003d6c:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003d70:	e77c      	b.n	8003c6c <HAL_ADCEx_InjectedConfigChannel+0x454>
 8003d72:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8003d76:	f8d8 4000 	ldr.w	r4, [r8]
 8003d7a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003d7e:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d82:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d86:	68ac      	ldr	r4, [r5, #8]
 8003d88:	68ae      	ldr	r6, [r5, #8]
 8003d8a:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d8e:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d90:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003d94:	4664      	mov	r4, ip
 8003d96:	2f00      	cmp	r7, #0
 8003d98:	f47f af50 	bne.w	8003c3c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8003d9c:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003da0:	e798      	b.n	8003cd4 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 8003da2:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8003da4:	461d      	mov	r5, r3
 8003da6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003daa:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003dae:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003db2:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8003db4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8003db6:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dba:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dbe:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8003dc2:	4664      	mov	r4, ip
 8003dc4:	2f00      	cmp	r7, #0
 8003dc6:	f47f af26 	bne.w	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8003dca:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8003dce:	e779      	b.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8003dd0:	683c      	ldr	r4, [r7, #0]
 8003dd2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003dd6:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8003dd8:	680c      	ldr	r4, [r1, #0]
}
 8003dda:	e565      	b.n	80038a8 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8003ddc:	4c0c      	ldr	r4, [pc, #48]	@ (8003e10 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8003dde:	e685      	b.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003de0:	68ae      	ldr	r6, [r5, #8]
 8003de2:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003de4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003de8:	e728      	b.n	8003c3c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8003dea:	2602      	movs	r6, #2
 8003dec:	e6e7      	b.n	8003bbe <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8003dee:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8003df2:	e6d7      	b.n	8003ba4 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8003df4:	68ee      	ldr	r6, [r5, #12]
 8003df6:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003df8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003dfc:	e72f      	b.n	8003c5e <HAL_ADCEx_InjectedConfigChannel+0x446>
 8003dfe:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8003e02:	e673      	b.n	8003aec <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 8003e04:	2602      	movs	r6, #2
 8003e06:	e78f      	b.n	8003d28 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8003e08:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8003e0c:	e780      	b.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8003e0e:	bf00      	nop
 8003e10:	fe500000 	.word	0xfe500000

08003e14 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e14:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8003e18:	2a01      	cmp	r2, #1
 8003e1a:	d045      	beq.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8003e1c:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e1e:	6804      	ldr	r4, [r0, #0]
{
 8003e20:	b09c      	sub	sp, #112	@ 0x70
 8003e22:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e24:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003e26:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e28:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e2c:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8003e2e:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e32:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003e34:	d008      	beq.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e36:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	f041 0120 	orr.w	r1, r1, #32
 8003e40:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003e42:	b01c      	add	sp, #112	@ 0x70
 8003e44:	bcf0      	pop	{r4, r5, r6, r7}
 8003e46:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8003e4a:	6890      	ldr	r0, [r2, #8]
 8003e4c:	0740      	lsls	r0, r0, #29
 8003e4e:	d50b      	bpl.n	8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003e50:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e52:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e54:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8003e62:	b01c      	add	sp, #112	@ 0x70
 8003e64:	bcf0      	pop	{r4, r5, r6, r7}
 8003e66:	4770      	bx	lr
 8003e68:	68a0      	ldr	r0, [r4, #8]
 8003e6a:	0745      	lsls	r5, r0, #29
 8003e6c:	d4f1      	bmi.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e6e:	680d      	ldr	r5, [r1, #0]
 8003e70:	b1e5      	cbz	r5, 8003eac <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e72:	4e19      	ldr	r6, [pc, #100]	@ (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8003e74:	684f      	ldr	r7, [r1, #4]
 8003e76:	68b0      	ldr	r0, [r6, #8]
 8003e78:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8003e7c:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003e80:	4338      	orrs	r0, r7
 8003e82:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003e86:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e88:	68a0      	ldr	r0, [r4, #8]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	07c0      	lsls	r0, r0, #31
 8003e8e:	d41e      	bmi.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003e90:	07d7      	lsls	r7, r2, #31
 8003e92:	d41c      	bmi.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8003e94:	68b2      	ldr	r2, [r6, #8]
 8003e96:	6889      	ldr	r1, [r1, #8]
 8003e98:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003e9c:	430d      	orrs	r5, r1
 8003e9e:	f022 020f 	bic.w	r2, r2, #15
 8003ea2:	4315      	orrs	r5, r2
 8003ea4:	60b5      	str	r5, [r6, #8]
 8003ea6:	e012      	b.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8003ea8:	2002      	movs	r0, #2
}
 8003eaa:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003eac:	480a      	ldr	r0, [pc, #40]	@ (8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8003eae:	6881      	ldr	r1, [r0, #8]
 8003eb0:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003eb4:	6081      	str	r1, [r0, #8]
 8003eb6:	68a1      	ldr	r1, [r4, #8]
 8003eb8:	6892      	ldr	r2, [r2, #8]
 8003eba:	07cd      	lsls	r5, r1, #31
 8003ebc:	d407      	bmi.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8003ebe:	07d4      	lsls	r4, r2, #31
 8003ec0:	d405      	bmi.n	8003ece <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ec2:	6882      	ldr	r2, [r0, #8]
 8003ec4:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003ec8:	f022 020f 	bic.w	r2, r2, #15
 8003ecc:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e7c4      	b.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003ed2:	bf00      	nop
 8003ed4:	50000100 	.word	0x50000100
 8003ed8:	50000300 	.word	0x50000300

08003edc <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003edc:	b1b0      	cbz	r0, 8003f0c <HAL_CORDIC_Init+0x30>
{
 8003ede:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003ee0:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003eea:	b153      	cbz	r3, 8003f02 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003eec:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003eee:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003ef0:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003ef2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8003ef6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8003efa:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003efe:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8003f00:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8003f02:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8003f06:	f7fc fa51 	bl	80003ac <HAL_CORDIC_MspInit>
 8003f0a:	e7ef      	b.n	8003eec <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8003f0c:	2001      	movs	r0, #1
}
 8003f0e:	4770      	bx	lr

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4907      	ldr	r1, [pc, #28]	@ (8003f30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f12:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f14:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f22:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003f2a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f34:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <HAL_NVIC_SetPriority+0x70>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3e:	f1c3 0e07 	rsb	lr, r3, #7
 8003f42:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f46:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4a:	bf28      	it	cs
 8003f4c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f50:	f1bc 0f06 	cmp.w	ip, #6
 8003f54:	d91c      	bls.n	8003f90 <HAL_NVIC_SetPriority+0x5c>
 8003f56:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f62:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f66:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6a:	fa03 f30e 	lsl.w	r3, r3, lr
 8003f6e:	ea21 0303 	bic.w	r3, r1, r3
 8003f72:	fa03 f30c 	lsl.w	r3, r3, ip
 8003f76:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003f7a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	db0a      	blt.n	8003f96 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003f84:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003f88:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f90:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	4694      	mov	ip, r2
 8003f94:	e7e7      	b.n	8003f66 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f96:	4a04      	ldr	r2, [pc, #16]	@ (8003fa8 <HAL_NVIC_SetPriority+0x74>)
 8003f98:	f000 000f 	and.w	r0, r0, #15
 8003f9c:	4402      	add	r2, r0
 8003f9e:	7613      	strb	r3, [r2, #24]
 8003fa0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fa4:	e000ed00 	.word	0xe000ed00
 8003fa8:	e000ecfc 	.word	0xe000ecfc

08003fac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003fac:	2800      	cmp	r0, #0
 8003fae:	db07      	blt.n	8003fc0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb0:	4a04      	ldr	r2, [pc, #16]	@ (8003fc4 <HAL_NVIC_EnableIRQ+0x18>)
 8003fb2:	0941      	lsrs	r1, r0, #5
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f000 001f 	and.w	r0, r0, #31
 8003fba:	4083      	lsls	r3, r0
 8003fbc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc8:	3801      	subs	r0, #1
 8003fca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003fce:	d301      	bcc.n	8003fd4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fd0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003fd2:	4770      	bx	lr
{
 8003fd4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	4c07      	ldr	r4, [pc, #28]	@ (8003ff8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fdc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fde:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003fe2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ff2:	6119      	str	r1, [r3, #16]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop

08004000 <HAL_SYSTICK_IRQHandler>:
{
 8004000:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004002:	f7ff fffb 	bl	8003ffc <HAL_SYSTICK_Callback>
}
 8004006:	bd08      	pop	{r3, pc}

08004008 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004008:	2800      	cmp	r0, #0
 800400a:	d076      	beq.n	80040fa <HAL_DMA_Init+0xf2>
{
 800400c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800400e:	4a3c      	ldr	r2, [pc, #240]	@ (8004100 <HAL_DMA_Init+0xf8>)
 8004010:	6804      	ldr	r4, [r0, #0]
 8004012:	4294      	cmp	r4, r2
 8004014:	4603      	mov	r3, r0
 8004016:	d95c      	bls.n	80040d2 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004018:	493a      	ldr	r1, [pc, #232]	@ (8004104 <HAL_DMA_Init+0xfc>)
 800401a:	4a3b      	ldr	r2, [pc, #236]	@ (8004108 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 800401c:	483b      	ldr	r0, [pc, #236]	@ (800410c <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800401e:	4421      	add	r1, r4
 8004020:	fba2 2101 	umull	r2, r1, r2, r1
 8004024:	0909      	lsrs	r1, r1, #4
 8004026:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004028:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800402a:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800402c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8004030:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004032:	4e35      	ldr	r6, [pc, #212]	@ (8004108 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004034:	4f36      	ldr	r7, [pc, #216]	@ (8004110 <HAL_DMA_Init+0x108>)
 8004036:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403a:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 800403c:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403e:	4302      	orrs	r2, r0
 8004040:	6958      	ldr	r0, [r3, #20]
 8004042:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004044:	6998      	ldr	r0, [r3, #24]
 8004046:	4302      	orrs	r2, r0
 8004048:	69d8      	ldr	r0, [r3, #28]
 800404a:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800404c:	b2e0      	uxtb	r0, r4
 800404e:	3808      	subs	r0, #8
 8004050:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8004054:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004056:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 800405a:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800405c:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8004060:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8004062:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8004066:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004068:	4e25      	ldr	r6, [pc, #148]	@ (8004100 <HAL_DMA_Init+0xf8>)
 800406a:	4a2a      	ldr	r2, [pc, #168]	@ (8004114 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800406c:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004070:	42b4      	cmp	r4, r6
 8004072:	bf98      	it	ls
 8004074:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004076:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800407a:	2401      	movs	r4, #1
 800407c:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004080:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004082:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004086:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800408a:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800408c:	649e      	str	r6, [r3, #72]	@ 0x48
 800408e:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004092:	d027      	beq.n	80040e4 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004094:	685e      	ldr	r6, [r3, #4]
 8004096:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004098:	3e01      	subs	r6, #1
 800409a:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800409c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040a4:	d824      	bhi.n	80040f0 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004118 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040a8:	481c      	ldr	r0, [pc, #112]	@ (800411c <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040aa:	442a      	add	r2, r5
 80040ac:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040ae:	3d01      	subs	r5, #1
 80040b0:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040b2:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040b4:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040b8:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040ba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_DMA_Init+0x118>)
 80040be:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c0:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80040c2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80040c6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80040ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80040ce:	bcf0      	pop	{r4, r5, r6, r7}
 80040d0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040d2:	4914      	ldr	r1, [pc, #80]	@ (8004124 <HAL_DMA_Init+0x11c>)
 80040d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 80040d6:	4814      	ldr	r0, [pc, #80]	@ (8004128 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040d8:	4421      	add	r1, r4
 80040da:	fba2 2101 	umull	r2, r1, r2, r1
 80040de:	0909      	lsrs	r1, r1, #4
 80040e0:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80040e2:	e7a1      	b.n	8004028 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040e4:	2400      	movs	r4, #0
 80040e6:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040e8:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ec:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80040f0:	2200      	movs	r2, #0
 80040f2:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040f8:	e7e2      	b.n	80040c0 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80040fa:	2001      	movs	r0, #1
}
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40020407 	.word	0x40020407
 8004104:	bffdfbf8 	.word	0xbffdfbf8
 8004108:	cccccccd 	.word	0xcccccccd
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020820 	.word	0x40020820
 8004118:	1000823f 	.word	0x1000823f
 800411c:	40020940 	.word	0x40020940
 8004120:	40020900 	.word	0x40020900
 8004124:	bffdfff8 	.word	0xbffdfff8
 8004128:	40020000 	.word	0x40020000

0800412c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800412c:	680b      	ldr	r3, [r1, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 8198 	beq.w	8004464 <HAL_GPIO_Init+0x338>
{
 8004134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004138:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800413c:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 800413e:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004142:	f04f 0b01 	mov.w	fp, #1
 8004146:	f000 810d 	beq.w	8004364 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800414a:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8004498 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800414e:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8004150:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004152:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8004156:	ea1c 0a03 	ands.w	sl, ip, r3
 800415a:	d077      	beq.n	800424c <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800415c:	684d      	ldr	r5, [r1, #4]
 800415e:	f005 0703 	and.w	r7, r5, #3
 8004162:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004164:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004166:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800416a:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800416e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004172:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004176:	f240 8119 	bls.w	80043ac <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417a:	2f03      	cmp	r7, #3
 800417c:	f040 8179 	bne.w	8004472 <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004180:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8004184:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004186:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004188:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800418a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800418e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004190:	d05c      	beq.n	800424c <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004192:	4ebe      	ldr	r6, [pc, #760]	@ (800448c <HAL_GPIO_Init+0x360>)
 8004194:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8004196:	f044 0401 	orr.w	r4, r4, #1
 800419a:	6634      	str	r4, [r6, #96]	@ 0x60
 800419c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800419e:	f004 0401 	and.w	r4, r4, #1
 80041a2:	9403      	str	r4, [sp, #12]
 80041a4:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80041a6:	f022 0403 	bic.w	r4, r2, #3
 80041aa:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ae:	f002 0703 	and.w	r7, r2, #3
 80041b2:	230f      	movs	r3, #15
 80041b4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80041b8:	00bf      	lsls	r7, r7, #2
 80041ba:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041be:	4bb4      	ldr	r3, [pc, #720]	@ (8004490 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80041c0:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c2:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041c4:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041c8:	f000 8140 	beq.w	800444c <HAL_GPIO_Init+0x320>
 80041cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004494 <HAL_GPIO_Init+0x368>)
 80041ce:	4298      	cmp	r0, r3
 80041d0:	f000 812d 	beq.w	800442e <HAL_GPIO_Init+0x302>
 80041d4:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 800449c <HAL_GPIO_Init+0x370>
 80041d8:	4560      	cmp	r0, ip
 80041da:	f000 813d 	beq.w	8004458 <HAL_GPIO_Init+0x32c>
 80041de:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80044a0 <HAL_GPIO_Init+0x374>
 80041e2:	4560      	cmp	r0, ip
 80041e4:	f000 813f 	beq.w	8004466 <HAL_GPIO_Init+0x33a>
 80041e8:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 80044a4 <HAL_GPIO_Init+0x378>
 80041ec:	4560      	cmp	r0, ip
 80041ee:	bf0c      	ite	eq
 80041f0:	f04f 0c05 	moveq.w	ip, #5
 80041f4:	f04f 0c06 	movne.w	ip, #6
 80041f8:	fa0c f707 	lsl.w	r7, ip, r7
 80041fc:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041fe:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8004200:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8004204:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004208:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 800420a:	bf54      	ite	pl
 800420c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800420e:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8004212:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8004216:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800421a:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 800421c:	bf54      	ite	pl
 800421e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004220:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8004224:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8004228:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800422c:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 800422e:	bf54      	ite	pl
 8004230:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004232:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8004236:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800423a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800423e:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8004240:	bf54      	ite	pl
 8004242:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004244:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8004248:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800424c:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 800424e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004250:	fa33 f402 	lsrs.w	r4, r3, r2
 8004254:	f47f af7c 	bne.w	8004150 <HAL_GPIO_Init+0x24>
  }
}
 8004258:	b005      	add	sp, #20
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800425e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004262:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004264:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004268:	fa06 f807 	lsl.w	r8, r6, r7
 800426c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8004270:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004274:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004278:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800427c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8004280:	fa0e fe02 	lsl.w	lr, lr, r2
 8004284:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8004288:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800428c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004290:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004292:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004296:	fa06 fe07 	lsl.w	lr, r6, r7
 800429a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800429e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80042a0:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a4:	d119      	bne.n	80042da <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 80042a6:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042aa:	690e      	ldr	r6, [r1, #16]
 80042ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042b0:	f002 0807 	and.w	r8, r2, #7
 80042b4:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 80042b8:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042bc:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 80042c0:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042c4:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042c6:	260f      	movs	r6, #15
 80042c8:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042cc:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042ce:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042d2:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80042d6:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042da:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80042dc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042de:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e2:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042e4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80042e8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ea:	d036      	beq.n	800435a <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4f67      	ldr	r7, [pc, #412]	@ (800448c <HAL_GPIO_Init+0x360>)
 80042ee:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80042f0:	f044 0401 	orr.w	r4, r4, #1
 80042f4:	663c      	str	r4, [r7, #96]	@ 0x60
 80042f6:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80042f8:	f004 0401 	and.w	r4, r4, #1
 80042fc:	9403      	str	r4, [sp, #12]
 80042fe:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004300:	f022 0403 	bic.w	r4, r2, #3
 8004304:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004308:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800430c:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004310:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004314:	260f      	movs	r6, #15
 8004316:	00bf      	lsls	r7, r7, #2
 8004318:	fa06 f707 	lsl.w	r7, r6, r7
 800431c:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004320:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8004322:	4c5d      	ldr	r4, [pc, #372]	@ (8004498 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004324:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8004326:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8004328:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800432c:	d47c      	bmi.n	8004428 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 800432e:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8004330:	4e59      	ldr	r6, [pc, #356]	@ (8004498 <HAL_GPIO_Init+0x36c>)
 8004332:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8004334:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004336:	02ae      	lsls	r6, r5, #10
 8004338:	f100 8085 	bmi.w	8004446 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 800433c:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 800433e:	4e56      	ldr	r6, [pc, #344]	@ (8004498 <HAL_GPIO_Init+0x36c>)
 8004340:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8004342:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004344:	03ae      	lsls	r6, r5, #14
 8004346:	d47b      	bmi.n	8004440 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8004348:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 800434a:	4e53      	ldr	r6, [pc, #332]	@ (8004498 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800434c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 800434e:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8004350:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004352:	d472      	bmi.n	800443a <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8004354:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8004356:	4d50      	ldr	r5, [pc, #320]	@ (8004498 <HAL_GPIO_Init+0x36c>)
 8004358:	602c      	str	r4, [r5, #0]
    position++;
 800435a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800435c:	fa33 f402 	lsrs.w	r4, r3, r2
 8004360:	f43f af7a 	beq.w	8004258 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004364:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8004368:	ea13 0c0e 	ands.w	ip, r3, lr
 800436c:	d0f5      	beq.n	800435a <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800436e:	684d      	ldr	r5, [r1, #4]
 8004370:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004372:	2603      	movs	r6, #3
 8004374:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004378:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800437c:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004380:	f104 38ff 	add.w	r8, r4, #4294967295
 8004384:	f1b8 0f01 	cmp.w	r8, #1
 8004388:	f67f af69 	bls.w	800425e <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438c:	2c03      	cmp	r4, #3
 800438e:	d0a4      	beq.n	80042da <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8004390:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004394:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8004396:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800439a:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800439e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a2:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 80043a6:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043aa:	e796      	b.n	80042da <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 80043ac:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b0:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043b2:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043b6:	fa03 f804 	lsl.w	r8, r3, r4
 80043ba:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80043be:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80043c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c6:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043c8:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043cc:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 80043d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80043d4:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 80043d8:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 80043dc:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e0:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e4:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e8:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ec:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 80043ee:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f2:	f47f aec5 	bne.w	8004180 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043f6:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80043f8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043fc:	f002 0c07 	and.w	ip, r2, #7
 8004400:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004404:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004408:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 800440c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004410:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004412:	230f      	movs	r3, #15
 8004414:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004418:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800441a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800441e:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	f8c8 c020 	str.w	ip, [r8, #32]
 8004426:	e6ab      	b.n	8004180 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8004428:	ea44 040c 	orr.w	r4, r4, ip
 800442c:	e780      	b.n	8004330 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800442e:	f04f 0c02 	mov.w	ip, #2
 8004432:	fa0c f707 	lsl.w	r7, ip, r7
 8004436:	433e      	orrs	r6, r7
 8004438:	e6e1      	b.n	80041fe <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 800443a:	ea4c 0404 	orr.w	r4, ip, r4
 800443e:	e78a      	b.n	8004356 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8004440:	ea44 040c 	orr.w	r4, r4, ip
 8004444:	e781      	b.n	800434a <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8004446:	ea4c 0404 	orr.w	r4, ip, r4
 800444a:	e778      	b.n	800433e <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800444c:	f04f 0c01 	mov.w	ip, #1
 8004450:	fa0c f707 	lsl.w	r7, ip, r7
 8004454:	433e      	orrs	r6, r7
 8004456:	e6d2      	b.n	80041fe <HAL_GPIO_Init+0xd2>
 8004458:	f04f 0c03 	mov.w	ip, #3
 800445c:	fa0c f707 	lsl.w	r7, ip, r7
 8004460:	433e      	orrs	r6, r7
 8004462:	e6cc      	b.n	80041fe <HAL_GPIO_Init+0xd2>
 8004464:	4770      	bx	lr
 8004466:	f04f 0c04 	mov.w	ip, #4
 800446a:	fa0c f707 	lsl.w	r7, ip, r7
 800446e:	433e      	orrs	r6, r7
 8004470:	e6c5      	b.n	80041fe <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8004472:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004476:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004478:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800447c:	fa03 fc04 	lsl.w	ip, r3, r4
 8004480:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8004484:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004488:	e67a      	b.n	8004180 <HAL_GPIO_Init+0x54>
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	48000400 	.word	0x48000400
 8004494:	48000800 	.word	0x48000800
 8004498:	40010400 	.word	0x40010400
 800449c:	48000c00 	.word	0x48000c00
 80044a0:	48001000 	.word	0x48001000
 80044a4:	48001400 	.word	0x48001400

080044a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044a8:	b10a      	cbz	r2, 80044ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044aa:	6181      	str	r1, [r0, #24]
 80044ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044ae:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop

080044b4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d054      	beq.n	8004562 <HAL_I2C_Init+0xae>
{
 80044b8:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ba:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80044be:	4604      	mov	r4, r0
 80044c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d047      	beq.n	8004558 <HAL_I2C_Init+0xa4>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044c8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80044d0:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 80044d4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80044dc:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044e0:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044ea:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044ec:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044ee:	d009      	beq.n	8004504 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f4:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044f6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f8:	d107      	bne.n	800450a <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	e006      	b.n	8004512 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004508:	609a      	str	r2, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004512:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004514:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004516:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800451a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800451e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004520:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004522:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004524:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004526:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004528:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800452c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004530:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004532:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004534:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004536:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004538:	4301      	orrs	r1, r0
 800453a:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	f041 0101 	orr.w	r1, r1, #1
 8004542:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004544:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004546:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800454a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800454e:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42

  return HAL_OK;
 8004554:	4610      	mov	r0, r2
}
 8004556:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004558:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800455c:	f7fc fc34 	bl	8000dc8 <HAL_I2C_MspInit>
 8004560:	e7b2      	b.n	80044c8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8004562:	2001      	movs	r0, #1
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004568:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800456c:	2a20      	cmp	r2, #32
 800456e:	d123      	bne.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8004570:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004574:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004578:	2a01      	cmp	r2, #1
 800457a:	4603      	mov	r3, r0
 800457c:	d01c      	beq.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800457e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	2024      	movs	r0, #36	@ 0x24
{
 8004582:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8004588:	6810      	ldr	r0, [r2, #0]
 800458a:	f020 0001 	bic.w	r0, r0, #1
 800458e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004590:	6810      	ldr	r0, [r2, #0]
 8004592:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004596:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004598:	6810      	ldr	r0, [r2, #0]
 800459a:	4301      	orrs	r1, r0
 800459c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800459e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 80045a4:	f041 0101 	orr.w	r1, r1, #1
 80045a8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80045ae:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 80045b2:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 80045b4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 80045b8:	2002      	movs	r0, #2
}
 80045ba:	4770      	bx	lr

080045bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045bc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80045c0:	2a20      	cmp	r2, #32
 80045c2:	d122      	bne.n	800460a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 80045c4:	b500      	push	{lr}
 80045c6:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ca:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80045ce:	2a01      	cmp	r2, #1
 80045d0:	4603      	mov	r3, r0
 80045d2:	d01c      	beq.n	800460e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d6:	2024      	movs	r0, #36	@ 0x24
 80045d8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 80045dc:	6810      	ldr	r0, [r2, #0]
 80045de:	f020 0001 	bic.w	r0, r0, #1
 80045e2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045e6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045ea:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045ee:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f0:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f2:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 80045f6:	f041 0101 	orr.w	r1, r1, #1
 80045fa:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004600:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8004604:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004606:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 800460a:	2002      	movs	r0, #2
}
 800460c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800460e:	2002      	movs	r0, #2
}
 8004610:	f85d fb04 	ldr.w	pc, [sp], #4

08004614 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <HAL_I2CEx_EnableFastModePlus+0x24>)

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004616:	4909      	ldr	r1, [pc, #36]	@ (800463c <HAL_I2CEx_EnableFastModePlus+0x28>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004618:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800461a:	f042 0201 	orr.w	r2, r2, #1
{
 800461e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004620:	661a      	str	r2, [r3, #96]	@ 0x60
 8004622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800462c:	684b      	ldr	r3, [r1, #4]
 800462e:	4303      	orrs	r3, r0
 8004630:	604b      	str	r3, [r1, #4]
}
 8004632:	b002      	add	sp, #8
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000

08004640 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004640:	2800      	cmp	r0, #0
 8004642:	d06f      	beq.n	8004724 <HAL_OPAMP_Init+0xe4>
{
 8004644:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004646:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800464a:	2b05      	cmp	r3, #5
{
 800464c:	b083      	sub	sp, #12
 800464e:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004650:	d056      	beq.n	8004700 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004652:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004656:	2b02      	cmp	r3, #2
 8004658:	d052      	beq.n	8004700 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800465a:	4b33      	ldr	r3, [pc, #204]	@ (8004728 <HAL_OPAMP_Init+0xe8>)
 800465c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	661a      	str	r2, [r3, #96]	@ 0x60
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800466e:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8004672:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004676:	b90b      	cbnz	r3, 800467c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004678:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800467c:	4620      	mov	r0, r4
 800467e:	f7fd f97b 	bl	8001978 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004682:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004684:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004686:	f023 0220 	bic.w	r2, r3, #32
 800468a:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004690:	d039      	beq.n	8004706 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004692:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8004694:	f021 0110 	bic.w	r1, r1, #16
 8004698:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 800469a:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 800469c:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 800469e:	432b      	orrs	r3, r5
 80046a0:	4303      	orrs	r3, r0
 80046a2:	6920      	ldr	r0, [r4, #16]
 80046a4:	6811      	ldr	r1, [r2, #0]
 80046a6:	4303      	orrs	r3, r0
 80046a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80046aa:	4303      	orrs	r3, r0
 80046ac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80046ae:	4303      	orrs	r3, r0
 80046b0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80046b2:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80046b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80046b8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80046bc:	481b      	ldr	r0, [pc, #108]	@ (800472c <HAL_OPAMP_Init+0xec>)
 80046be:	4008      	ands	r0, r1
 80046c0:	7d21      	ldrb	r1, [r4, #20]
 80046c2:	f1a1 0101 	sub.w	r1, r1, #1
 80046c6:	fab1 f181 	clz	r1, r1
 80046ca:	4303      	orrs	r3, r0
 80046cc:	0949      	lsrs	r1, r1, #5
 80046ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046d2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80046d4:	6993      	ldr	r3, [r2, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db09      	blt.n	80046ee <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80046da:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80046de:	6991      	ldr	r1, [r2, #24]
 80046e0:	4303      	orrs	r3, r0
 80046e2:	6a20      	ldr	r0, [r4, #32]
 80046e4:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80046e8:	4303      	orrs	r3, r0
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80046ee:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 80046f2:	b913      	cbnz	r3, 80046fa <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80046fa:	2000      	movs	r0, #0
  }
}
 80046fc:	b003      	add	sp, #12
 80046fe:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004700:	2001      	movs	r0, #1
}
 8004702:	b003      	add	sp, #12
 8004704:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004706:	f021 0110 	bic.w	r1, r1, #16
 800470a:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 800470c:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 800470e:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004710:	4303      	orrs	r3, r0
 8004712:	6920      	ldr	r0, [r4, #16]
 8004714:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004716:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8004718:	4303      	orrs	r3, r0
 800471a:	430b      	orrs	r3, r1
 800471c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800471e:	6811      	ldr	r1, [r2, #0]
 8004720:	432b      	orrs	r3, r5
 8004722:	e7c6      	b.n	80046b2 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8004724:	2001      	movs	r0, #1
}
 8004726:	4770      	bx	lr
 8004728:	40021000 	.word	0x40021000
 800472c:	e0003e11 	.word	0xe0003e11

08004730 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004730:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004732:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004734:	b960      	cbnz	r0, 8004750 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800473e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	d01b      	beq.n	800477c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800474c:	2000      	movs	r0, #0
}
 800474e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004750:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004754:	d006      	beq.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800475e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004760:	2000      	movs	r0, #0
}
 8004762:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004764:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004770:	d029      	beq.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004776:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800477a:	e7f1      	b.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004780:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004784:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004786:	4821      	ldr	r0, [pc, #132]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004788:	4921      	ldr	r1, [pc, #132]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800478a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800478e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004792:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004794:	6803      	ldr	r3, [r0, #0]
 8004796:	2032      	movs	r0, #50	@ 0x32
 8004798:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800479c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800479e:	fba1 1303 	umull	r1, r3, r1, r3
 80047a2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047aa:	d506      	bpl.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80047ac:	e000      	b.n	80047b0 <HAL_PWREx_ControlVoltageScaling+0x80>
 80047ae:	b123      	cbz	r3, 80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80047b0:	6951      	ldr	r1, [r2, #20]
 80047b2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80047b4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047b8:	d4f9      	bmi.n	80047ae <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ba:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	055b      	lsls	r3, r3, #21
 80047c0:	d5ce      	bpl.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80047c2:	2003      	movs	r0, #3
 80047c4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ce:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047d0:	480e      	ldr	r0, [pc, #56]	@ (800480c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047d2:	490f      	ldr	r1, [pc, #60]	@ (8004810 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047dc:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	2032      	movs	r0, #50	@ 0x32
 80047e2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e6:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047e8:	fba1 1303 	umull	r1, r3, r1, r3
 80047ec:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ee:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047f0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f4:	d5e1      	bpl.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80047f6:	e001      	b.n	80047fc <HAL_PWREx_ControlVoltageScaling+0xcc>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0de      	beq.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 80047fc:	6951      	ldr	r1, [r2, #20]
 80047fe:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004800:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004804:	d5d9      	bpl.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004806:	e7f7      	b.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8004808:	40007000 	.word	0x40007000
 800480c:	200002ec 	.word	0x200002ec
 8004810:	431bde83 	.word	0x431bde83

08004814 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004814:	4a02      	ldr	r2, [pc, #8]	@ (8004820 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004816:	6893      	ldr	r3, [r2, #8]
 8004818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800481c:	6093      	str	r3, [r2, #8]
}
 800481e:	4770      	bx	lr
 8004820:	40007000 	.word	0x40007000

08004824 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004824:	2800      	cmp	r0, #0
 8004826:	f000 81bd 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x380>
{
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800482e:	6803      	ldr	r3, [r0, #0]
 8004830:	07d9      	lsls	r1, r3, #31
{
 8004832:	b082      	sub	sp, #8
 8004834:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004836:	d512      	bpl.n	800485e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004838:	49a6      	ldr	r1, [pc, #664]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 800483a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800483c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004842:	2a0c      	cmp	r2, #12
 8004844:	f000 80d0 	beq.w	80049e8 <HAL_RCC_OscConfig+0x1c4>
 8004848:	2a08      	cmp	r2, #8
 800484a:	f040 80d2 	bne.w	80049f2 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800484e:	4aa1      	ldr	r2, [pc, #644]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 8004850:	6812      	ldr	r2, [r2, #0]
 8004852:	0392      	lsls	r2, r2, #14
 8004854:	d503      	bpl.n	800485e <HAL_RCC_OscConfig+0x3a>
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	2a00      	cmp	r2, #0
 800485a:	f000 8137 	beq.w	8004acc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485e:	079a      	lsls	r2, r3, #30
 8004860:	d522      	bpl.n	80048a8 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004862:	4a9c      	ldr	r2, [pc, #624]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 8004864:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004866:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004868:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800486c:	2b0c      	cmp	r3, #12
 800486e:	f000 80f8 	beq.w	8004a62 <HAL_RCC_OscConfig+0x23e>
 8004872:	2b04      	cmp	r3, #4
 8004874:	f040 80fa 	bne.w	8004a6c <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004878:	4b96      	ldr	r3, [pc, #600]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	055b      	lsls	r3, r3, #21
 800487e:	d503      	bpl.n	8004888 <HAL_RCC_OscConfig+0x64>
 8004880:	68e3      	ldr	r3, [r4, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8122 	beq.w	8004acc <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004888:	4a92      	ldr	r2, [pc, #584]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 800488a:	6920      	ldr	r0, [r4, #16]
 800488c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800488e:	4992      	ldr	r1, [pc, #584]	@ (8004ad8 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004894:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004898:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800489a:	6808      	ldr	r0, [r1, #0]
 800489c:	f7fe fe78 	bl	8003590 <HAL_InitTick>
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f040 8113 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	071a      	lsls	r2, r3, #28
 80048aa:	d519      	bpl.n	80048e0 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ac:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ae:	4d89      	ldr	r5, [pc, #548]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80c2 	beq.w	8004a3a <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80048b6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c2:	f7fe feaf 	bl	8003624 <HAL_GetTick>
 80048c6:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c8:	e005      	b.n	80048d6 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ca:	f7fe feab 	bl	8003624 <HAL_GetTick>
 80048ce:	1b80      	subs	r0, r0, r6
 80048d0:	2802      	cmp	r0, #2
 80048d2:	f200 8117 	bhi.w	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048d6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80048da:	079b      	lsls	r3, r3, #30
 80048dc:	d5f5      	bpl.n	80048ca <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	075d      	lsls	r5, r3, #29
 80048e2:	d541      	bpl.n	8004968 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048e4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 80048e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048e8:	00d0      	lsls	r0, r2, #3
 80048ea:	f100 810f 	bmi.w	8004b0c <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80048f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80048f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80048f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004900:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004902:	4e76      	ldr	r6, [pc, #472]	@ (8004adc <HAL_RCC_OscConfig+0x2b8>)
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	05d9      	lsls	r1, r3, #23
 8004908:	f140 812e 	bpl.w	8004b68 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490c:	68a3      	ldr	r3, [r4, #8]
 800490e:	2b01      	cmp	r3, #1
 8004910:	f000 80fe 	beq.w	8004b10 <HAL_RCC_OscConfig+0x2ec>
 8004914:	2b05      	cmp	r3, #5
 8004916:	f000 8184 	beq.w	8004c22 <HAL_RCC_OscConfig+0x3fe>
 800491a:	4e6e      	ldr	r6, [pc, #440]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 800491c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8004928:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800492c:	f022 0204 	bic.w	r2, r2, #4
 8004930:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004934:	2b00      	cmp	r3, #0
 8004936:	f040 80f2 	bne.w	8004b1e <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493a:	f7fe fe73 	bl	8003624 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800493e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004942:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004944:	e005      	b.n	8004952 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fe fe6d 	bl	8003624 <HAL_GetTick>
 800494a:	1bc0      	subs	r0, r0, r7
 800494c:	4540      	cmp	r0, r8
 800494e:	f200 80d9 	bhi.w	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004952:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8004956:	0799      	lsls	r1, r3, #30
 8004958:	d4f5      	bmi.n	8004946 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800495a:	b125      	cbz	r5, 8004966 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 800495e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	069a      	lsls	r2, r3, #26
 800496a:	d518      	bpl.n	800499e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800496c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800496e:	4d59      	ldr	r5, [pc, #356]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80e5 	beq.w	8004b40 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8004976:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fe fe4f 	bl	8003624 <HAL_GetTick>
 8004986:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004988:	e005      	b.n	8004996 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800498a:	f7fe fe4b 	bl	8003624 <HAL_GetTick>
 800498e:	1b80      	subs	r0, r0, r6
 8004990:	2802      	cmp	r0, #2
 8004992:	f200 80b7 	bhi.w	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004996:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800499a:	079b      	lsls	r3, r3, #30
 800499c:	d5f5      	bpl.n	800498a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800499e:	69e3      	ldr	r3, [r4, #28]
 80049a0:	b1f3      	cbz	r3, 80049e0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049a2:	4d4c      	ldr	r5, [pc, #304]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 80049a4:	68aa      	ldr	r2, [r5, #8]
 80049a6:	f002 020c 	and.w	r2, r2, #12
 80049aa:	2a0c      	cmp	r2, #12
 80049ac:	f000 8147 	beq.w	8004c3e <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049b0:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ba:	f000 80f5 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049be:	f7fe fe31 	bl	8003624 <HAL_GetTick>
 80049c2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	e005      	b.n	80049d2 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c6:	f7fe fe2d 	bl	8003624 <HAL_GetTick>
 80049ca:	1b00      	subs	r0, r0, r4
 80049cc:	2802      	cmp	r0, #2
 80049ce:	f200 8099 	bhi.w	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	d4f6      	bmi.n	80049c6 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049d8:	68ea      	ldr	r2, [r5, #12]
 80049da:	4b41      	ldr	r3, [pc, #260]	@ (8004ae0 <HAL_RCC_OscConfig+0x2bc>)
 80049dc:	4013      	ands	r3, r2
 80049de:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
}
 80049e2:	b002      	add	sp, #8
 80049e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049ec:	2903      	cmp	r1, #3
 80049ee:	f43f af2e 	beq.w	800484e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f2:	6863      	ldr	r3, [r4, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f8:	d055      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x282>
 80049fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049fe:	f000 80c4 	beq.w	8004b8a <HAL_RCC_OscConfig+0x366>
 8004a02:	4d34      	ldr	r5, [pc, #208]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 8004a04:	682a      	ldr	r2, [r5, #0]
 8004a06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a0a:	602a      	str	r2, [r5, #0]
 8004a0c:	682a      	ldr	r2, [r5, #0]
 8004a0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a12:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d14b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8004a18:	f7fe fe04 	bl	8003624 <HAL_GetTick>
 8004a1c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	e004      	b.n	8004a2a <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fe fe00 	bl	8003624 <HAL_GetTick>
 8004a24:	1b80      	subs	r0, r0, r6
 8004a26:	2864      	cmp	r0, #100	@ 0x64
 8004a28:	d86c      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a2a:	682b      	ldr	r3, [r5, #0]
 8004a2c:	0399      	lsls	r1, r3, #14
 8004a2e:	d4f7      	bmi.n	8004a20 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	079a      	lsls	r2, r3, #30
 8004a34:	f57f af38 	bpl.w	80048a8 <HAL_RCC_OscConfig+0x84>
 8004a38:	e713      	b.n	8004862 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8004a3a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004a46:	f7fe fded 	bl	8003624 <HAL_GetTick>
 8004a4a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a4c:	e004      	b.n	8004a58 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4e:	f7fe fde9 	bl	8003624 <HAL_GetTick>
 8004a52:	1b80      	subs	r0, r0, r6
 8004a54:	2802      	cmp	r0, #2
 8004a56:	d855      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a58:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004a5c:	079f      	lsls	r7, r3, #30
 8004a5e:	d4f6      	bmi.n	8004a4e <HAL_RCC_OscConfig+0x22a>
 8004a60:	e73d      	b.n	80048de <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a62:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a66:	2a02      	cmp	r2, #2
 8004a68:	f43f af06 	beq.w	8004878 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004a6e:	4d19      	ldr	r5, [pc, #100]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d037      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fdd2 	bl	8003624 <HAL_GetTick>
 8004a80:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a82:	e004      	b.n	8004a8e <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fe fdce 	bl	8003624 <HAL_GetTick>
 8004a88:	1b80      	subs	r0, r0, r6
 8004a8a:	2802      	cmp	r0, #2
 8004a8c:	d83a      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	055f      	lsls	r7, r3, #21
 8004a92:	d5f7      	bpl.n	8004a84 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a94:	686b      	ldr	r3, [r5, #4]
 8004a96:	6922      	ldr	r2, [r4, #16]
 8004a98:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004aa0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	e700      	b.n	80048a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ab0:	f7fe fdb8 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab4:	4e07      	ldr	r6, [pc, #28]	@ (8004ad4 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004ab6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab8:	e004      	b.n	8004ac4 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aba:	f7fe fdb3 	bl	8003624 <HAL_GetTick>
 8004abe:	1b40      	subs	r0, r0, r5
 8004ac0:	2864      	cmp	r0, #100	@ 0x64
 8004ac2:	d81f      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	039f      	lsls	r7, r3, #14
 8004ac8:	d5f7      	bpl.n	8004aba <HAL_RCC_OscConfig+0x296>
 8004aca:	e7b1      	b.n	8004a30 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8004acc:	2001      	movs	r0, #1
}
 8004ace:	b002      	add	sp, #8
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	200002f4 	.word	0x200002f4
 8004adc:	40007000 	.word	0x40007000
 8004ae0:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004aec:	f7fe fd9a 	bl	8003624 <HAL_GetTick>
 8004af0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	0559      	lsls	r1, r3, #21
 8004af6:	f57f aed6 	bpl.w	80048a6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afa:	f7fe fd93 	bl	8003624 <HAL_GetTick>
 8004afe:	1b80      	subs	r0, r0, r6
 8004b00:	2802      	cmp	r0, #2
 8004b02:	d9f6      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8004b04:	2003      	movs	r0, #3
}
 8004b06:	b002      	add	sp, #8
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004b0c:	2500      	movs	r5, #0
 8004b0e:	e6f8      	b.n	8004902 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	4a65      	ldr	r2, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x484>)
 8004b12:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004b1e:	f7fe fd81 	bl	8003624 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	4f61      	ldr	r7, [pc, #388]	@ (8004ca8 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8004b24:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b2a:	e004      	b.n	8004b36 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2c:	f7fe fd7a 	bl	8003624 <HAL_GetTick>
 8004b30:	1b80      	subs	r0, r0, r6
 8004b32:	4540      	cmp	r0, r8
 8004b34:	d8e6      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	d5f6      	bpl.n	8004b2c <HAL_RCC_OscConfig+0x308>
 8004b3e:	e70c      	b.n	800495a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8004b40:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004b4c:	f7fe fd6a 	bl	8003624 <HAL_GetTick>
 8004b50:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b52:	e004      	b.n	8004b5e <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b54:	f7fe fd66 	bl	8003624 <HAL_GetTick>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	2802      	cmp	r0, #2
 8004b5c:	d8d2      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b5e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8004b62:	079f      	lsls	r7, r3, #30
 8004b64:	d4f6      	bmi.n	8004b54 <HAL_RCC_OscConfig+0x330>
 8004b66:	e71a      	b.n	800499e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b68:	6833      	ldr	r3, [r6, #0]
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004b70:	f7fe fd58 	bl	8003624 <HAL_GetTick>
 8004b74:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	05da      	lsls	r2, r3, #23
 8004b7a:	f53f aec7 	bmi.w	800490c <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fe fd51 	bl	8003624 <HAL_GetTick>
 8004b82:	1bc0      	subs	r0, r0, r7
 8004b84:	2802      	cmp	r0, #2
 8004b86:	d9f6      	bls.n	8004b76 <HAL_RCC_OscConfig+0x352>
 8004b88:	e7bc      	b.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b8e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004ba0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba2:	e785      	b.n	8004ab0 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8004ba4:	2001      	movs	r0, #1
}
 8004ba6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fd3c 	bl	8003624 <HAL_GetTick>
 8004bac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bae:	e004      	b.n	8004bba <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fe fd38 	bl	8003624 <HAL_GetTick>
 8004bb4:	1b80      	subs	r0, r0, r6
 8004bb6:	2802      	cmp	r0, #2
 8004bb8:	d8a4      	bhi.n	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	0199      	lsls	r1, r3, #6
 8004bbe:	d4f7      	bmi.n	8004bb0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bc0:	68e9      	ldr	r1, [r5, #12]
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004cac <HAL_RCC_OscConfig+0x488>)
 8004bc4:	6a22      	ldr	r2, [r4, #32]
 8004bc6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004bc8:	400b      	ands	r3, r1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8004bd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004bd4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004bd8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8004bdc:	3801      	subs	r0, #1
 8004bde:	0849      	lsrs	r1, r1, #1
 8004be0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004be4:	3901      	subs	r1, #1
 8004be6:	0852      	lsrs	r2, r2, #1
 8004be8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004bec:	3a01      	subs	r2, #1
 8004bee:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004bf2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bfa:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bfc:	68eb      	ldr	r3, [r5, #12]
 8004bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c02:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004c04:	f7fe fd0e 	bl	8003624 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c08:	4d27      	ldr	r5, [pc, #156]	@ (8004ca8 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8004c0a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0c:	e005      	b.n	8004c1a <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0e:	f7fe fd09 	bl	8003624 <HAL_GetTick>
 8004c12:	1b00      	subs	r0, r0, r4
 8004c14:	2802      	cmp	r0, #2
 8004c16:	f63f af75 	bhi.w	8004b04 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1a:	682b      	ldr	r3, [r5, #0]
 8004c1c:	019a      	lsls	r2, r3, #6
 8004c1e:	d5f6      	bpl.n	8004c0e <HAL_RCC_OscConfig+0x3ea>
 8004c20:	e6de      	b.n	80049e0 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c22:	4b21      	ldr	r3, [pc, #132]	@ (8004ca8 <HAL_RCC_OscConfig+0x484>)
 8004c24:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004c28:	f042 0204 	orr.w	r2, r2, #4
 8004c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004c30:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c3c:	e76f      	b.n	8004b1e <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	f43f af44 	beq.w	8004acc <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8004c44:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	6a22      	ldr	r2, [r4, #32]
 8004c48:	f003 0103 	and.w	r1, r3, #3
 8004c4c:	4291      	cmp	r1, r2
 8004c4e:	f47f af3d 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c52:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c58:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004c5e:	f47f af35 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004c64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c68:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004c6c:	f47f af2e 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004c72:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c76:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004c7a:	f47f af27 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8004c86:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c88:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004c8c:	f47f af1e 	bne.w	8004acc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c90:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004c92:	0852      	lsrs	r2, r2, #1
 8004c94:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004c98:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c9a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004c9e:	bf14      	ite	ne
 8004ca0:	2001      	movne	r0, #1
 8004ca2:	2000      	moveq	r0, #0
 8004ca4:	e69d      	b.n	80049e2 <HAL_RCC_OscConfig+0x1be>
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	019f800c 	.word	0x019f800c

08004cb0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cb0:	4b18      	ldr	r3, [pc, #96]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x64>)
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	f002 020c 	and.w	r2, r2, #12
 8004cb8:	2a04      	cmp	r2, #4
 8004cba:	d026      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	f002 020c 	and.w	r2, r2, #12
 8004cc2:	2a08      	cmp	r2, #8
 8004cc4:	d023      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	f002 020c 	and.w	r2, r2, #12
 8004ccc:	2a0c      	cmp	r2, #12
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004cd0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8004cd2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cd4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd6:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cd8:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cda:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8004cde:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ce0:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce4:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ce8:	bf0c      	ite	eq
 8004cea:	4b0b      	ldreq	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cec:	4b0b      	ldrne	r3, [pc, #44]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cee:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cf4:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0x64>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004d00:	3301      	adds	r3, #1
 8004d02:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004d04:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004d08:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004d0a:	4804      	ldr	r0, [pc, #16]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0x6c>)
 8004d0c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004d0e:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0x68>)
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	016e3600 	.word	0x016e3600
 8004d1c:	00f42400 	.word	0x00f42400

08004d20 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f000 80ee 	beq.w	8004f02 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d26:	4a78      	ldr	r2, [pc, #480]	@ (8004f08 <HAL_RCC_ClockConfig+0x1e8>)
{
 8004d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d2c:	6813      	ldr	r3, [r2, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	428b      	cmp	r3, r1
 8004d34:	460d      	mov	r5, r1
 8004d36:	4604      	mov	r4, r0
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	f023 030f 	bic.w	r3, r3, #15
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	428b      	cmp	r3, r1
 8004d4c:	d002      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004d4e:	2001      	movs	r0, #1
}
 8004d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07df      	lsls	r7, r3, #31
 8004d58:	d569      	bpl.n	8004e2e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d5a:	6867      	ldr	r7, [r4, #4]
 8004d5c:	2f03      	cmp	r7, #3
 8004d5e:	f000 80a0 	beq.w	8004ea2 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d62:	4b6a      	ldr	r3, [pc, #424]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d64:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d68:	f000 8097 	beq.w	8004e9a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d6c:	055b      	lsls	r3, r3, #21
 8004d6e:	d5ee      	bpl.n	8004d4e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d70:	f7ff ff9e 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8004d74:	4b66      	ldr	r3, [pc, #408]	@ (8004f10 <HAL_RCC_ClockConfig+0x1f0>)
 8004d76:	4298      	cmp	r0, r3
 8004d78:	f240 80c0 	bls.w	8004efc <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d7c:	4a63      	ldr	r2, [pc, #396]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004d7e:	6893      	ldr	r3, [r2, #8]
 8004d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004d8a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4e5f      	ldr	r6, [pc, #380]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004d90:	68b3      	ldr	r3, [r6, #8]
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	433b      	orrs	r3, r7
 8004d98:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004d9a:	f7fe fc43 	bl	8003624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004da2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da4:	e004      	b.n	8004db0 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da6:	f7fe fc3d 	bl	8003624 <HAL_GetTick>
 8004daa:	1bc0      	subs	r0, r0, r7
 8004dac:	4540      	cmp	r0, r8
 8004dae:	d871      	bhi.n	8004e94 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db0:	68b3      	ldr	r3, [r6, #8]
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	f003 030c 	and.w	r3, r3, #12
 8004db8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004dbc:	d1f3      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	079f      	lsls	r7, r3, #30
 8004dc2:	d436      	bmi.n	8004e32 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8004dc4:	f1b9 0f00 	cmp.w	r9, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004dca:	68b3      	ldr	r3, [r6, #8]
 8004dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dd0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd2:	4e4d      	ldr	r6, [pc, #308]	@ (8004f08 <HAL_RCC_ClockConfig+0x1e8>)
 8004dd4:	6833      	ldr	r3, [r6, #0]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	42ab      	cmp	r3, r5
 8004ddc:	d846      	bhi.n	8004e6c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	075a      	lsls	r2, r3, #29
 8004de2:	d506      	bpl.n	8004df2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	4949      	ldr	r1, [pc, #292]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004de6:	68e0      	ldr	r0, [r4, #12]
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dee:	4302      	orrs	r2, r0
 8004df0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	d507      	bpl.n	8004e06 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df6:	4a45      	ldr	r2, [pc, #276]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004df8:	6921      	ldr	r1, [r4, #16]
 8004dfa:	6893      	ldr	r3, [r2, #8]
 8004dfc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004e00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e04:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e06:	f7ff ff53 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004e0a:	4a40      	ldr	r2, [pc, #256]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004e0c:	4c41      	ldr	r4, [pc, #260]	@ (8004f14 <HAL_RCC_ClockConfig+0x1f4>)
 8004e0e:	6892      	ldr	r2, [r2, #8]
 8004e10:	4941      	ldr	r1, [pc, #260]	@ (8004f18 <HAL_RCC_ClockConfig+0x1f8>)
 8004e12:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004e16:	4603      	mov	r3, r0
 8004e18:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004e1a:	4840      	ldr	r0, [pc, #256]	@ (8004f1c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e1c:	f002 021f 	and.w	r2, r2, #31
 8004e20:	40d3      	lsrs	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004e24:	6800      	ldr	r0, [r0, #0]
}
 8004e26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004e2a:	f7fe bbb1 	b.w	8003590 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2e:	079e      	lsls	r6, r3, #30
 8004e30:	d5cf      	bpl.n	8004dd2 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e32:	0758      	lsls	r0, r3, #29
 8004e34:	d504      	bpl.n	8004e40 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e36:	4935      	ldr	r1, [pc, #212]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004e38:	688a      	ldr	r2, [r1, #8]
 8004e3a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004e3e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e40:	0719      	lsls	r1, r3, #28
 8004e42:	d506      	bpl.n	8004e52 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e44:	4a31      	ldr	r2, [pc, #196]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004e46:	6893      	ldr	r3, [r2, #8]
 8004e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e4c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e50:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e52:	4a2e      	ldr	r2, [pc, #184]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004e54:	68a1      	ldr	r1, [r4, #8]
 8004e56:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e58:	4e2b      	ldr	r6, [pc, #172]	@ (8004f08 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e62:	6833      	ldr	r3, [r6, #0]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	d9b8      	bls.n	8004dde <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6c:	6833      	ldr	r3, [r6, #0]
 8004e6e:	f023 030f 	bic.w	r3, r3, #15
 8004e72:	432b      	orrs	r3, r5
 8004e74:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004e76:	f7fe fbd5 	bl	8003624 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004e7e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e80:	6833      	ldr	r3, [r6, #0]
 8004e82:	f003 030f 	and.w	r3, r3, #15
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	d0a9      	beq.n	8004dde <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8a:	f7fe fbcb 	bl	8003624 <HAL_GetTick>
 8004e8e:	1bc0      	subs	r0, r0, r7
 8004e90:	4540      	cmp	r0, r8
 8004e92:	d9f5      	bls.n	8004e80 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8004e94:	2003      	movs	r0, #3
}
 8004e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e9a:	039a      	lsls	r2, r3, #14
 8004e9c:	f53f af68 	bmi.w	8004d70 <HAL_RCC_ClockConfig+0x50>
 8004ea0:	e755      	b.n	8004d4e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	0188      	lsls	r0, r1, #6
 8004ea8:	f57f af51 	bpl.w	8004d4e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eac:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eae:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004eb0:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8004eb2:	4e17      	ldr	r6, [pc, #92]	@ (8004f10 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004eb4:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8004eb8:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eba:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ebe:	bf0c      	ite	eq
 8004ec0:	4817      	ldreq	r0, [pc, #92]	@ (8004f20 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ec2:	4818      	ldrne	r0, [pc, #96]	@ (8004f24 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ec4:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ec6:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004eca:	4810      	ldr	r0, [pc, #64]	@ (8004f0c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ecc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8004ed0:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ed4:	68c1      	ldr	r1, [r0, #12]
 8004ed6:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004eda:	3101      	adds	r1, #1
 8004edc:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8004ede:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8004ee2:	42b2      	cmp	r2, r6
 8004ee4:	d90a      	bls.n	8004efc <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ee6:	6882      	ldr	r2, [r0, #8]
 8004ee8:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8004eec:	f43f af46 	beq.w	8004d7c <HAL_RCC_ClockConfig+0x5c>
 8004ef0:	0799      	lsls	r1, r3, #30
 8004ef2:	d503      	bpl.n	8004efc <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f43f af40 	beq.w	8004d7c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004efc:	f04f 0900 	mov.w	r9, #0
 8004f00:	e745      	b.n	8004d8e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8004f02:	2001      	movs	r0, #1
}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40022000 	.word	0x40022000
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	04c4b400 	.word	0x04c4b400
 8004f14:	08006bac 	.word	0x08006bac
 8004f18:	200002ec 	.word	0x200002ec
 8004f1c:	200002f4 	.word	0x200002f4
 8004f20:	016e3600 	.word	0x016e3600
 8004f24:	00f42400 	.word	0x00f42400

08004f28 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004f28:	4b01      	ldr	r3, [pc, #4]	@ (8004f30 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	200002ec 	.word	0x200002ec

08004f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f38:	6803      	ldr	r3, [r0, #0]
{
 8004f3a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f3c:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8004f40:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f42:	d041      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f44:	4ba0      	ldr	r3, [pc, #640]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004f46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f48:	00d5      	lsls	r5, r2, #3
 8004f4a:	f140 80f7 	bpl.w	800513c <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8004f4e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f50:	4d9e      	ldr	r5, [pc, #632]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f5a:	f7fe fb63 	bl	8003624 <HAL_GetTick>
 8004f5e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f60:	e004      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fe fb5f 	bl	8003624 <HAL_GetTick>
 8004f66:	1b83      	subs	r3, r0, r6
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d828      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	05d8      	lsls	r0, r3, #23
 8004f70:	d5f7      	bpl.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f72:	4d95      	ldr	r5, [pc, #596]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f74:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f76:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f7a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004f7e:	f000 8119 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004f82:	4293      	cmp	r3, r2
 8004f84:	f000 8116 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f88:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f8c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f94:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f98:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa0:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fa4:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fa8:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8004faa:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fae:	f140 8101 	bpl.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fe fb37 	bl	8003624 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004fba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fbc:	e0f5      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fbe:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc0:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	f040 80c5 	bne.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc8:	07de      	lsls	r6, r3, #31
 8004fca:	d508      	bpl.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fcc:	497e      	ldr	r1, [pc, #504]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004fce:	6865      	ldr	r5, [r4, #4]
 8004fd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004fd4:	f022 0203 	bic.w	r2, r2, #3
 8004fd8:	432a      	orrs	r2, r5
 8004fda:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fde:	079d      	lsls	r5, r3, #30
 8004fe0:	d508      	bpl.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe2:	4979      	ldr	r1, [pc, #484]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004fe4:	68a5      	ldr	r5, [r4, #8]
 8004fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004fea:	f022 020c 	bic.w	r2, r2, #12
 8004fee:	432a      	orrs	r2, r5
 8004ff0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff4:	0759      	lsls	r1, r3, #29
 8004ff6:	d508      	bpl.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff8:	4973      	ldr	r1, [pc, #460]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004ffa:	68e5      	ldr	r5, [r4, #12]
 8004ffc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005000:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005004:	432a      	orrs	r2, r5
 8005006:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800500a:	071a      	lsls	r2, r3, #28
 800500c:	d508      	bpl.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500e:	496e      	ldr	r1, [pc, #440]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005010:	6925      	ldr	r5, [r4, #16]
 8005012:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005016:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800501a:	432a      	orrs	r2, r5
 800501c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005020:	069f      	lsls	r7, r3, #26
 8005022:	d508      	bpl.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005024:	4968      	ldr	r1, [pc, #416]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005026:	6965      	ldr	r5, [r4, #20]
 8005028:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800502c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005030:	432a      	orrs	r2, r5
 8005032:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005036:	065e      	lsls	r6, r3, #25
 8005038:	d508      	bpl.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800503a:	4963      	ldr	r1, [pc, #396]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800503c:	69a5      	ldr	r5, [r4, #24]
 800503e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005042:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005046:	432a      	orrs	r2, r5
 8005048:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800504c:	061d      	lsls	r5, r3, #24
 800504e:	d508      	bpl.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005050:	495d      	ldr	r1, [pc, #372]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005052:	69e5      	ldr	r5, [r4, #28]
 8005054:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005058:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800505c:	432a      	orrs	r2, r5
 800505e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005062:	05d9      	lsls	r1, r3, #23
 8005064:	d508      	bpl.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005066:	4958      	ldr	r1, [pc, #352]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005068:	6a25      	ldr	r5, [r4, #32]
 800506a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800506e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005072:	432a      	orrs	r2, r5
 8005074:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005078:	059a      	lsls	r2, r3, #22
 800507a:	d508      	bpl.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800507c:	4952      	ldr	r1, [pc, #328]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800507e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8005080:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005084:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005088:	432a      	orrs	r2, r5
 800508a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800508e:	055f      	lsls	r7, r3, #21
 8005090:	d50b      	bpl.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005092:	494d      	ldr	r1, [pc, #308]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005094:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005096:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800509a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800509e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050a0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050a8:	d059      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80050aa:	051e      	lsls	r6, r3, #20
 80050ac:	d50b      	bpl.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050ae:	4946      	ldr	r1, [pc, #280]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050b0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80050b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80050b6:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80050ba:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050bc:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050c0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050c4:	d050      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050c6:	04dd      	lsls	r5, r3, #19
 80050c8:	d50b      	bpl.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050ca:	493f      	ldr	r1, [pc, #252]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050cc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80050ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80050d2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80050d6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050d8:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050dc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050e0:	d047      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050e2:	0499      	lsls	r1, r3, #18
 80050e4:	d50b      	bpl.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050e6:	4938      	ldr	r1, [pc, #224]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80050e8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80050ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80050ee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80050f2:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050f4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050f8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050fc:	d03e      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050fe:	045a      	lsls	r2, r3, #17
 8005100:	d50b      	bpl.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005102:	4931      	ldr	r1, [pc, #196]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005104:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005106:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800510a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800510e:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005110:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005114:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005118:	d035      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800511a:	041b      	lsls	r3, r3, #16
 800511c:	d50b      	bpl.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800511e:	4a2a      	ldr	r2, [pc, #168]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005120:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005122:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005126:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800512a:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800512c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005134:	d02c      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 8005136:	b002      	add	sp, #8
 8005138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800513c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800513e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005142:	659a      	str	r2, [r3, #88]	@ 0x58
 8005144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800514e:	2701      	movs	r7, #1
 8005150:	e6fe      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005152:	491d      	ldr	r1, [pc, #116]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005154:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005156:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800515a:	658a      	str	r2, [r1, #88]	@ 0x58
 800515c:	e734      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515e:	68ca      	ldr	r2, [r1, #12]
 8005160:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005164:	60ca      	str	r2, [r1, #12]
 8005166:	e7a0      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	68ca      	ldr	r2, [r1, #12]
 800516a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800516e:	60ca      	str	r2, [r1, #12]
 8005170:	e7a9      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005172:	68ca      	ldr	r2, [r1, #12]
 8005174:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005178:	60ca      	str	r2, [r1, #12]
 800517a:	e7b2      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	68ca      	ldr	r2, [r1, #12]
 800517e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005182:	60ca      	str	r2, [r1, #12]
 8005184:	e7bb      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005186:	68ca      	ldr	r2, [r1, #12]
 8005188:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800518c:	60ca      	str	r2, [r1, #12]
 800518e:	e7c4      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005190:	68d3      	ldr	r3, [r2, #12]
 8005192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005196:	60d3      	str	r3, [r2, #12]
}
 8005198:	b002      	add	sp, #8
 800519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fe fa41 	bl	8003624 <HAL_GetTick>
 80051a2:	1b80      	subs	r0, r0, r6
 80051a4:	4540      	cmp	r0, r8
 80051a6:	f63f af0a 	bhi.w	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051aa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80051ae:	079b      	lsls	r3, r3, #30
 80051b0:	d5f5      	bpl.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80051b4:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051b6:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80051ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051c4:	2000      	movs	r0, #0
 80051c6:	e6fb      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40007000 	.word	0x40007000

080051d0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051d2:	6a02      	ldr	r2, [r0, #32]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
{
 80051d8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80051e6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80051ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80051ee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80051f2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f4:	4d13      	ldr	r5, [pc, #76]	@ (8005244 <TIM_OC1_SetConfig+0x74>)
 80051f6:	42a8      	cmp	r0, r5
 80051f8:	d00f      	beq.n	800521a <TIM_OC1_SetConfig+0x4a>
 80051fa:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80051fe:	42a8      	cmp	r0, r5
 8005200:	d00b      	beq.n	800521a <TIM_OC1_SetConfig+0x4a>
 8005202:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005206:	42a8      	cmp	r0, r5
 8005208:	d007      	beq.n	800521a <TIM_OC1_SetConfig+0x4a>
 800520a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800520e:	42a8      	cmp	r0, r5
 8005210:	d003      	beq.n	800521a <TIM_OC1_SetConfig+0x4a>
 8005212:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005216:	42a8      	cmp	r0, r5
 8005218:	d10d      	bne.n	8005236 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800521a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800521c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005220:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005222:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005226:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800522a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800522e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005232:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005236:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005238:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800523a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800523c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800523e:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8005240:	6203      	str	r3, [r0, #32]
}
 8005242:	4770      	bx	lr
 8005244:	40012c00 	.word	0x40012c00

08005248 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005248:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800524a:	6a02      	ldr	r2, [r0, #32]
 800524c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8005250:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005252:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005256:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800525a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800525e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005262:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005264:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005266:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800526a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800526e:	4d14      	ldr	r5, [pc, #80]	@ (80052c0 <TIM_OC3_SetConfig+0x78>)
 8005270:	42a8      	cmp	r0, r5
 8005272:	d00f      	beq.n	8005294 <TIM_OC3_SetConfig+0x4c>
 8005274:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8005278:	42a8      	cmp	r0, r5
 800527a:	d00b      	beq.n	8005294 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005280:	42a8      	cmp	r0, r5
 8005282:	d00e      	beq.n	80052a2 <TIM_OC3_SetConfig+0x5a>
 8005284:	4d0f      	ldr	r5, [pc, #60]	@ (80052c4 <TIM_OC3_SetConfig+0x7c>)
 8005286:	42a8      	cmp	r0, r5
 8005288:	d00b      	beq.n	80052a2 <TIM_OC3_SetConfig+0x5a>
 800528a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800528e:	42a8      	cmp	r0, r5
 8005290:	d10f      	bne.n	80052b2 <TIM_OC3_SetConfig+0x6a>
 8005292:	e006      	b.n	80052a2 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005294:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800529e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052a6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	ea46 0c05 	orr.w	ip, r6, r5
 80052ae:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80052b4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80052b6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80052b8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80052bc:	6203      	str	r3, [r0, #32]
}
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40014400 	.word	0x40014400

080052c8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ca:	6a02      	ldr	r2, [r0, #32]
 80052cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 80052d0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052d2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052da:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80052de:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052e6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80052e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052f0:	4d14      	ldr	r5, [pc, #80]	@ (8005344 <TIM_OC4_SetConfig+0x7c>)
 80052f2:	42a8      	cmp	r0, r5
 80052f4:	d00f      	beq.n	8005316 <TIM_OC4_SetConfig+0x4e>
 80052f6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80052fa:	42a8      	cmp	r0, r5
 80052fc:	d00b      	beq.n	8005316 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8005302:	42a8      	cmp	r0, r5
 8005304:	d00e      	beq.n	8005324 <TIM_OC4_SetConfig+0x5c>
 8005306:	4d10      	ldr	r5, [pc, #64]	@ (8005348 <TIM_OC4_SetConfig+0x80>)
 8005308:	42a8      	cmp	r0, r5
 800530a:	d00b      	beq.n	8005324 <TIM_OC4_SetConfig+0x5c>
 800530c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005310:	42a8      	cmp	r0, r5
 8005312:	d10f      	bne.n	8005334 <TIM_OC4_SetConfig+0x6c>
 8005314:	e006      	b.n	8005324 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005316:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005318:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800531c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005324:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005328:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800532c:	ea46 0c05 	orr.w	ip, r6, r5
 8005330:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005334:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005336:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005338:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800533a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800533c:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800533e:	6203      	str	r3, [r0, #32]
}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40014400 	.word	0x40014400

0800534c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800534c:	2800      	cmp	r0, #0
 800534e:	d075      	beq.n	800543c <HAL_TIM_Base_Init+0xf0>
{
 8005350:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005356:	4604      	mov	r4, r0
 8005358:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800535c:	2b00      	cmp	r3, #0
 800535e:	d068      	beq.n	8005432 <HAL_TIM_Base_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005362:	4e37      	ldr	r6, [pc, #220]	@ (8005440 <HAL_TIM_Base_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8005364:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005366:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800536a:	2202      	movs	r2, #2
 800536c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005370:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005372:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005374:	d04c      	beq.n	8005410 <HAL_TIM_Base_Init+0xc4>
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537a:	d017      	beq.n	80053ac <HAL_TIM_Base_Init+0x60>
 800537c:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8005380:	42b3      	cmp	r3, r6
 8005382:	d013      	beq.n	80053ac <HAL_TIM_Base_Init+0x60>
 8005384:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005388:	42b3      	cmp	r3, r6
 800538a:	d00f      	beq.n	80053ac <HAL_TIM_Base_Init+0x60>
 800538c:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8005390:	42b3      	cmp	r3, r6
 8005392:	d03d      	beq.n	8005410 <HAL_TIM_Base_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005394:	4e2b      	ldr	r6, [pc, #172]	@ (8005444 <HAL_TIM_Base_Init+0xf8>)
 8005396:	42b3      	cmp	r3, r6
 8005398:	d03e      	beq.n	8005418 <HAL_TIM_Base_Init+0xcc>
 800539a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800539e:	42b3      	cmp	r3, r6
 80053a0:	d03a      	beq.n	8005418 <HAL_TIM_Base_Init+0xcc>
 80053a2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80053a6:	42b3      	cmp	r3, r6
 80053a8:	d108      	bne.n	80053bc <HAL_TIM_Base_Init+0x70>
 80053aa:	e035      	b.n	8005418 <HAL_TIM_Base_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 80053ac:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80053b2:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ba:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053c0:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80053c2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053c4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80053c6:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80053c8:	2201      	movs	r2, #1
 80053ca:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	07d2      	lsls	r2, r2, #31
 80053d0:	d503      	bpl.n	80053da <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053da:	2301      	movs	r3, #1
 80053dc:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80053e4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80053e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80053ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80053f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80053fc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005400:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005404:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005408:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800540c:	2000      	movs	r0, #0
}
 800540e:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8005410:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005412:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005416:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005418:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800541a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005424:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005426:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800542a:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800542c:	6962      	ldr	r2, [r4, #20]
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005430:	e7ca      	b.n	80053c8 <HAL_TIM_Base_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8005432:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005436:	f7fd ff39 	bl	80032ac <HAL_TIM_Base_MspInit>
 800543a:	e791      	b.n	8005360 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 800543c:	2001      	movs	r0, #1
}
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40014000 	.word	0x40014000

08005448 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005448:	2800      	cmp	r0, #0
 800544a:	d075      	beq.n	8005538 <HAL_TIM_PWM_Init+0xf0>
{
 800544c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005452:	4604      	mov	r4, r0
 8005454:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005458:	2b00      	cmp	r3, #0
 800545a:	d068      	beq.n	800552e <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800545e:	4e37      	ldr	r6, [pc, #220]	@ (800553c <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8005460:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005462:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005464:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8005466:	2202      	movs	r2, #2
 8005468:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800546c:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800546e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005470:	d04c      	beq.n	800550c <HAL_TIM_PWM_Init+0xc4>
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005476:	d017      	beq.n	80054a8 <HAL_TIM_PWM_Init+0x60>
 8005478:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 800547c:	42b3      	cmp	r3, r6
 800547e:	d013      	beq.n	80054a8 <HAL_TIM_PWM_Init+0x60>
 8005480:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005484:	42b3      	cmp	r3, r6
 8005486:	d00f      	beq.n	80054a8 <HAL_TIM_PWM_Init+0x60>
 8005488:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800548c:	42b3      	cmp	r3, r6
 800548e:	d03d      	beq.n	800550c <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005490:	4e2b      	ldr	r6, [pc, #172]	@ (8005540 <HAL_TIM_PWM_Init+0xf8>)
 8005492:	42b3      	cmp	r3, r6
 8005494:	d03e      	beq.n	8005514 <HAL_TIM_PWM_Init+0xcc>
 8005496:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800549a:	42b3      	cmp	r3, r6
 800549c:	d03a      	beq.n	8005514 <HAL_TIM_PWM_Init+0xcc>
 800549e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80054a2:	42b3      	cmp	r3, r6
 80054a4:	d108      	bne.n	80054b8 <HAL_TIM_PWM_Init+0x70>
 80054a6:	e035      	b.n	8005514 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 80054a8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80054ae:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054bc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80054be:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054c2:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	2201      	movs	r2, #1
 80054c6:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	07d2      	lsls	r2, r2, #31
 80054cc:	d503      	bpl.n	80054d6 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054dc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80054e0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80054e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80054e8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80054f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80054fc:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005500:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005504:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005508:	2000      	movs	r0, #0
}
 800550a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 800550c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005512:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005514:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005516:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005520:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005522:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005524:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005526:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005528:	6962      	ldr	r2, [r4, #20]
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
 800552c:	e7ca      	b.n	80054c4 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 800552e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005532:	f7fd fe81 	bl	8003238 <HAL_TIM_PWM_MspInit>
 8005536:	e791      	b.n	800545c <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8005538:	2001      	movs	r0, #1
}
 800553a:	4770      	bx	lr
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40014000 	.word	0x40014000

08005544 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005544:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8005548:	2a01      	cmp	r2, #1
 800554a:	d073      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0xf0>
 800554c:	4603      	mov	r3, r0
{
 800554e:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8005550:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005552:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8005554:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005556:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800555a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800555e:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	4c5d      	ldr	r4, [pc, #372]	@ (80056d8 <HAL_TIM_ConfigClockSource+0x194>)
 8005562:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8005564:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005566:	680c      	ldr	r4, [r1, #0]
 8005568:	2c70      	cmp	r4, #112	@ 0x70
 800556a:	f000 808f 	beq.w	800568c <HAL_TIM_ConfigClockSource+0x148>
 800556e:	d827      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x7c>
 8005570:	2c50      	cmp	r4, #80	@ 0x50
 8005572:	d061      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0xf4>
 8005574:	d82d      	bhi.n	80055d2 <HAL_TIM_ConfigClockSource+0x8e>
 8005576:	2c40      	cmp	r4, #64	@ 0x40
 8005578:	f040 8098 	bne.w	80056ac <HAL_TIM_ConfigClockSource+0x168>
                               sClockSourceConfig->ClockPolarity,
 800557c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800557e:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005580:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005582:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005586:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005588:	6a11      	ldr	r1, [r2, #32]
 800558a:	f021 0101 	bic.w	r1, r1, #1
 800558e:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005590:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005592:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005596:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800559c:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800559e:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a0:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80055a4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a8:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ac:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80055b2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80055bc:	bc30      	pop	{r4, r5}
 80055be:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80055c0:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80055c4:	d052      	beq.n	800566c <HAL_TIM_ConfigClockSource+0x128>
 80055c6:	d821      	bhi.n	800560c <HAL_TIM_ConfigClockSource+0xc8>
 80055c8:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 80055cc:	bf18      	it	ne
 80055ce:	2001      	movne	r0, #1
 80055d0:	e7ee      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
 80055d2:	2c60      	cmp	r4, #96	@ 0x60
 80055d4:	d1ec      	bne.n	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
                               sClockSourceConfig->ClockPolarity,
 80055d6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80055d8:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80055da:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055dc:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e4:	6a10      	ldr	r0, [r2, #32]
 80055e6:	f020 0010 	bic.w	r0, r0, #16
 80055ea:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ec:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ee:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f2:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80055f6:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80055f8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80055fa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055fc:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005600:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005604:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8005608:	6091      	str	r1, [r2, #8]
}
 800560a:	e7d0      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 800560c:	4933      	ldr	r1, [pc, #204]	@ (80056dc <HAL_TIM_ConfigClockSource+0x198>)
 800560e:	428c      	cmp	r4, r1
 8005610:	d006      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 8005612:	d854      	bhi.n	80056be <HAL_TIM_ConfigClockSource+0x17a>
 8005614:	f1b4 1f10 	cmp.w	r4, #1048592	@ 0x100010
 8005618:	d002      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 800561a:	3910      	subs	r1, #16
 800561c:	428c      	cmp	r4, r1
 800561e:	d1c7      	bne.n	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 8005620:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005622:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005626:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562a:	4321      	orrs	r1, r4
 800562c:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8005630:	6091      	str	r1, [r2, #8]
}
 8005632:	e7bc      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x6a>
  __HAL_LOCK(htim);
 8005634:	2002      	movs	r0, #2
}
 8005636:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8005638:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800563c:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800563e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005642:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005644:	6a11      	ldr	r1, [r2, #32]
 8005646:	f021 0101 	bic.w	r1, r1, #1
 800564a:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564c:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800564e:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005652:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005656:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8005658:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800565a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800565c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8005660:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005664:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8005668:	6091      	str	r1, [r2, #8]
}
 800566a:	e7a0      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x6a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005670:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005672:	4328      	orrs	r0, r5
 8005674:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005676:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800567e:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005680:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005682:	6891      	ldr	r1, [r2, #8]
 8005684:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8005688:	6091      	str	r1, [r2, #8]
      break;
 800568a:	e790      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x6a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568c:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8005690:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005692:	4328      	orrs	r0, r5
 8005694:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005696:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800569a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800569e:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80056a0:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80056a2:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a4:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80056a8:	6091      	str	r1, [r2, #8]
      break;
 80056aa:	e780      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80056ac:	d880      	bhi.n	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
 80056ae:	2c20      	cmp	r4, #32
 80056b0:	d0b6      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 80056b2:	d80c      	bhi.n	80056ce <HAL_TIM_ConfigClockSource+0x18a>
 80056b4:	f034 0110 	bics.w	r1, r4, #16
 80056b8:	f47f af7a 	bne.w	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
 80056bc:	e7b0      	b.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 80056be:	4908      	ldr	r1, [pc, #32]	@ (80056e0 <HAL_TIM_ConfigClockSource+0x19c>)
 80056c0:	428c      	cmp	r4, r1
 80056c2:	d0ad      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 80056c4:	3130      	adds	r1, #48	@ 0x30
 80056c6:	428c      	cmp	r4, r1
 80056c8:	f47f af72 	bne.w	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
 80056cc:	e7a8      	b.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
 80056ce:	2c30      	cmp	r4, #48	@ 0x30
 80056d0:	d0a6      	beq.n	8005620 <HAL_TIM_ConfigClockSource+0xdc>
      status = HAL_ERROR;
 80056d2:	2001      	movs	r0, #1
 80056d4:	e76c      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x6c>
 80056d6:	bf00      	nop
 80056d8:	ffce0088 	.word	0xffce0088
 80056dc:	00100030 	.word	0x00100030
 80056e0:	00100040 	.word	0x00100040

080056e4 <TIM_Base_SetConfig>:
{
 80056e4:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e6:	4e26      	ldr	r6, [pc, #152]	@ (8005780 <TIM_Base_SetConfig+0x9c>)
  TIMx->PSC = Structure->Prescaler;
 80056e8:	680a      	ldr	r2, [r1, #0]
  tmpcr1 = TIMx->CR1;
 80056ea:	6803      	ldr	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ee:	694d      	ldr	r5, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f0:	42b0      	cmp	r0, r6
 80056f2:	d033      	beq.n	800575c <TIM_Base_SetConfig+0x78>
 80056f4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80056f8:	d017      	beq.n	800572a <TIM_Base_SetConfig+0x46>
 80056fa:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80056fe:	42b0      	cmp	r0, r6
 8005700:	d013      	beq.n	800572a <TIM_Base_SetConfig+0x46>
 8005702:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005706:	42b0      	cmp	r0, r6
 8005708:	d00f      	beq.n	800572a <TIM_Base_SetConfig+0x46>
 800570a:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 800570e:	42b0      	cmp	r0, r6
 8005710:	d024      	beq.n	800575c <TIM_Base_SetConfig+0x78>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005712:	4e1c      	ldr	r6, [pc, #112]	@ (8005784 <TIM_Base_SetConfig+0xa0>)
 8005714:	42b0      	cmp	r0, r6
 8005716:	d025      	beq.n	8005764 <TIM_Base_SetConfig+0x80>
 8005718:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800571c:	42b0      	cmp	r0, r6
 800571e:	d021      	beq.n	8005764 <TIM_Base_SetConfig+0x80>
 8005720:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005724:	42b0      	cmp	r0, r6
 8005726:	d108      	bne.n	800573a <TIM_Base_SetConfig+0x56>
 8005728:	e01c      	b.n	8005764 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= Structure->CounterMode;
 800572a:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572c:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005732:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005738:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800573a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005740:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005742:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005744:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005746:	2301      	movs	r3, #1
 8005748:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800574a:	6903      	ldr	r3, [r0, #16]
 800574c:	07db      	lsls	r3, r3, #31
 800574e:	d503      	bpl.n	8005758 <TIM_Base_SetConfig+0x74>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005750:	6903      	ldr	r3, [r0, #16]
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	6103      	str	r3, [r0, #16]
}
 8005758:	bc70      	pop	{r4, r5, r6}
 800575a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800575c:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005762:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005764:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800576c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005770:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005772:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005774:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005776:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	690b      	ldr	r3, [r1, #16]
 800577a:	6303      	str	r3, [r0, #48]	@ 0x30
 800577c:	e7e3      	b.n	8005746 <TIM_Base_SetConfig+0x62>
 800577e:	bf00      	nop
 8005780:	40012c00 	.word	0x40012c00
 8005784:	40014000 	.word	0x40014000

08005788 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005788:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800578a:	6a02      	ldr	r2, [r0, #32]
 800578c:	f022 0210 	bic.w	r2, r2, #16
{
 8005790:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005792:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005794:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005796:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800579a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800579e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80057a8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	4d14      	ldr	r5, [pc, #80]	@ (8005804 <TIM_OC2_SetConfig+0x7c>)
 80057b2:	42a8      	cmp	r0, r5
 80057b4:	d00f      	beq.n	80057d6 <TIM_OC2_SetConfig+0x4e>
 80057b6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80057ba:	42a8      	cmp	r0, r5
 80057bc:	d00b      	beq.n	80057d6 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057be:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80057c2:	42a8      	cmp	r0, r5
 80057c4:	d00e      	beq.n	80057e4 <TIM_OC2_SetConfig+0x5c>
 80057c6:	4d10      	ldr	r5, [pc, #64]	@ (8005808 <TIM_OC2_SetConfig+0x80>)
 80057c8:	42a8      	cmp	r0, r5
 80057ca:	d00b      	beq.n	80057e4 <TIM_OC2_SetConfig+0x5c>
 80057cc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80057d0:	42a8      	cmp	r0, r5
 80057d2:	d10f      	bne.n	80057f4 <TIM_OC2_SetConfig+0x6c>
 80057d4:	e006      	b.n	80057e4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80057d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057e8:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057ec:	ea46 0c05 	orr.w	ip, r6, r5
 80057f0:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80057f4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80057f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80057f8:	6182      	str	r2, [r0, #24]
}
 80057fa:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80057fc:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80057fe:	6203      	str	r3, [r0, #32]
}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40014400 	.word	0x40014400

0800580c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800580c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	f000 80dc 	beq.w	80059ce <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8005816:	2301      	movs	r3, #1
{
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4604      	mov	r4, r0
 800581c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800581e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005822:	2a14      	cmp	r2, #20
 8005824:	d80c      	bhi.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005826:	e8df f002 	tbb	[pc, r2]
 800582a:	0b4f      	.short	0x0b4f
 800582c:	0b630b0b 	.word	0x0b630b0b
 8005830:	0b740b0b 	.word	0x0b740b0b
 8005834:	0b840b0b 	.word	0x0b840b0b
 8005838:	0b950b0b 	.word	0x0b950b0b
 800583c:	0b0b      	.short	0x0b0b
 800583e:	10          	.byte	0x10
 800583f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005840:	2300      	movs	r3, #0
 8005842:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8005846:	2001      	movs	r0, #1
}
 8005848:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800584a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 800584e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005850:	6a19      	ldr	r1, [r3, #32]
 8005852:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8005856:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005858:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800585a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800585c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005860:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005864:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005868:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800586a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800586e:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	4e58      	ldr	r6, [pc, #352]	@ (80059d4 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8005874:	42b3      	cmp	r3, r6
 8005876:	d00f      	beq.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005878:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 800587c:	42b3      	cmp	r3, r6
 800587e:	d00b      	beq.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005880:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8005884:	42b3      	cmp	r3, r6
 8005886:	d007      	beq.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005888:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800588c:	42b3      	cmp	r3, r6
 800588e:	d003      	beq.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005890:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005894:	42b3      	cmp	r3, r6
 8005896:	d104      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005898:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800589a:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800589e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80058a2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80058a4:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80058a6:	6869      	ldr	r1, [r5, #4]
 80058a8:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 80058aa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058ae:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b4:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058bc:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80058be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80058c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80058c6:	e00e      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c8:	6800      	ldr	r0, [r0, #0]
 80058ca:	f7ff fc81 	bl	80051d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058ce:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058d0:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d2:	f043 0308 	orr.w	r3, r3, #8
 80058d6:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058e0:	6983      	ldr	r3, [r0, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 80058e6:	2300      	movs	r3, #0
 80058e8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2000      	movs	r0, #0
}
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058f0:	6800      	ldr	r0, [r0, #0]
 80058f2:	f7ff ff49 	bl	8005788 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058f6:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058f8:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058fe:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005900:	6983      	ldr	r3, [r0, #24]
 8005902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005906:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800590e:	6183      	str	r3, [r0, #24]
      break;
 8005910:	e7e9      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005912:	6800      	ldr	r0, [r0, #0]
 8005914:	f7ff fc98 	bl	8005248 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005918:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800591c:	f043 0308 	orr.w	r3, r3, #8
 8005920:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005922:	69c3      	ldr	r3, [r0, #28]
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800592a:	69c3      	ldr	r3, [r0, #28]
 800592c:	4313      	orrs	r3, r2
 800592e:	61c3      	str	r3, [r0, #28]
      break;
 8005930:	e7d9      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005932:	6800      	ldr	r0, [r0, #0]
 8005934:	f7ff fcc8 	bl	80052c8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005938:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800593a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005940:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005942:	69c3      	ldr	r3, [r0, #28]
 8005944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005948:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800594a:	69c3      	ldr	r3, [r0, #28]
 800594c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005950:	61c3      	str	r3, [r0, #28]
      break;
 8005952:	e7c8      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005954:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005956:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8005958:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800595a:	6a19      	ldr	r1, [r3, #32]
 800595c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8005960:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005962:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005964:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005966:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800596a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800596e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005970:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005972:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005976:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	4e16      	ldr	r6, [pc, #88]	@ (80059d4 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 800597c:	42b3      	cmp	r3, r6
 800597e:	d00f      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005980:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005984:	42b3      	cmp	r3, r6
 8005986:	d00b      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005988:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 800598c:	42b3      	cmp	r3, r6
 800598e:	d007      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005990:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005994:	42b3      	cmp	r3, r6
 8005996:	d003      	beq.n	80059a0 <HAL_TIM_PWM_ConfigChannel+0x194>
 8005998:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800599c:	42b3      	cmp	r3, r6
 800599e:	d104      	bne.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059a0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059a2:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059a6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80059aa:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80059ac:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80059ae:	6869      	ldr	r1, [r5, #4]
 80059b0:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 80059b2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059b6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c0:	f022 0204 	bic.w	r2, r2, #4
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059c8:	430a      	orrs	r2, r1
 80059ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059cc:	e78b      	b.n	80058e6 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 80059ce:	2002      	movs	r0, #2
}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00

080059d8 <TIM_TI1_SetConfig>:
{
 80059d8:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 80059da:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059dc:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059de:	4e16      	ldr	r6, [pc, #88]	@ (8005a38 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e0:	f024 0401 	bic.w	r4, r4, #1
 80059e4:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059e6:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80059e8:	6984      	ldr	r4, [r0, #24]
{
 80059ea:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059ec:	d014      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
 80059ee:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80059f2:	d011      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
 80059f4:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <TIM_TI1_SetConfig+0x64>)
 80059f6:	4290      	cmp	r0, r2
 80059f8:	d00e      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
 80059fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80059fe:	4290      	cmp	r0, r2
 8005a00:	d00a      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
 8005a02:	f502 3296 	add.w	r2, r2, #76800	@ 0x12c00
 8005a06:	4290      	cmp	r0, r2
 8005a08:	d006      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
 8005a0a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005a0e:	4290      	cmp	r0, r2
 8005a10:	d002      	beq.n	8005a18 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a12:	f044 0201 	orr.w	r2, r4, #1
 8005a16:	e003      	b.n	8005a20 <TIM_TI1_SetConfig+0x48>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a18:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8005a1c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a20:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a24:	f001 010a 	and.w	r1, r1, #10
 8005a28:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a2a:	f363 1207 	bfi	r2, r3, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 8005a2e:	6182      	str	r2, [r0, #24]
}
 8005a30:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8005a32:	6201      	str	r1, [r0, #32]
}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40000400 	.word	0x40000400

08005a40 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d065      	beq.n	8005b14 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8005a48:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a4a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 8005a4e:	b089      	sub	sp, #36	@ 0x24
 8005a50:	460d      	mov	r5, r1
 8005a52:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a54:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d056      	beq.n	8005b0a <HAL_TIMEx_HallSensor_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	f851 0b04 	ldr.w	r0, [r1], #4
 8005a68:	f7ff fe3c 	bl	80056e4 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005a6c:	68ab      	ldr	r3, [r5, #8]
 8005a6e:	6829      	ldr	r1, [r5, #0]
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	2203      	movs	r2, #3
 8005a74:	f7ff ffb0 	bl	80059d8 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a78:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005a7a:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a7c:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a7e:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005a80:	f023 030c 	bic.w	r3, r3, #12
 8005a84:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005a86:	6983      	ldr	r3, [r0, #24]
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005a8c:	6843      	ldr	r3, [r0, #4]
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a92:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005a94:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005a96:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005a98:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa0:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005aa2:	6883      	ldr	r3, [r0, #8]
 8005aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005aaa:	6883      	ldr	r3, [r0, #8]
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab0:	f023 0307 	bic.w	r3, r3, #7
 8005ab4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005ab6:	6883      	ldr	r3, [r0, #8]
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005abe:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005ac0:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005ac2:	2370      	movs	r3, #112	@ 0x70
 8005ac4:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ac6:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aca:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ace:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005ad0:	f7ff fe5a 	bl	8005788 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005ad4:	6821      	ldr	r1, [r4, #0]
 8005ad6:	684a      	ldr	r2, [r1, #4]
 8005ad8:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8005adc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005ae0:	604a      	str	r2, [r1, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005ae2:	684a      	ldr	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	2301      	movs	r3, #1
  return HAL_OK;
 8005ae6:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005ae8:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8005aec:	604a      	str	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aee:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005af2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005afa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005afe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005b06:	b009      	add	sp, #36	@ 0x24
 8005b08:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005b0a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005b0e:	f7ff ff97 	bl	8005a40 <HAL_TIMEx_HallSensor_MspInit>
 8005b12:	e7a3      	b.n	8005a5c <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8005b14:	2001      	movs	r0, #1
}
 8005b16:	4770      	bx	lr

08005b18 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b18:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d046      	beq.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8005b20:	b470      	push	{r4, r5, r6}
 8005b22:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b24:	4e23      	ldr	r6, [pc, #140]	@ (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8005b26:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	2302      	movs	r3, #2
 8005b2a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b2e:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8005b30:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b32:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b36:	d024      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005b38:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8005b3c:	42b0      	cmp	r0, r6
 8005b3e:	d02b      	beq.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b48:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005b4e:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	d00a      	beq.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005b52:	4b19      	ldr	r3, [pc, #100]	@ (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8005b54:	4298      	cmp	r0, r3
 8005b56:	d007      	beq.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	d003      	beq.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8005b60:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8005b64:	4298      	cmp	r0, r3
 8005b66:	d104      	bne.n	8005b72 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b68:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b6e:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b70:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005b72:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8005b7a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8005b7e:	bc70      	pop	{r4, r5, r6}
 8005b80:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b82:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b88:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b92:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005b94:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	e7e7      	b.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b98:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b9e:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ba0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ba8:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8005baa:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bac:	e7dc      	b.n	8005b68 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8005bae:	2002      	movs	r0, #2
}
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40000400 	.word	0x40000400

08005bbc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bbc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d045      	beq.n	8005c50 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8005bc4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bc6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bce:	4602      	mov	r2, r0
 8005bd0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bd2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bd4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005be2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005be8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bf0:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bf2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bf8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bfa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bfc:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c00:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c0a:	4c12      	ldr	r4, [pc, #72]	@ (8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c0c:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c0e:	6810      	ldr	r0, [r2, #0]
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d00b      	beq.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8005c14:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005c1c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005c1e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005c20:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8005c24:	4608      	mov	r0, r1
}
 8005c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c2a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c2c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8005c2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c32:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c36:	6a0c      	ldr	r4, [r1, #32]
 8005c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c3c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c3e:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c40:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c42:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c46:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	e7e5      	b.n	8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8005c50:	2002      	movs	r0, #2
}
 8005c52:	4770      	bx	lr
 8005c54:	40012c00 	.word	0x40012c00

08005c58 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005c5c:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5e:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	f000 808e 	beq.w	8005d84 <LL_GPIO_Init+0x12c>
  return __builtin_clz(value);
 8005c68:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005c6c:	fa35 f302 	lsrs.w	r3, r5, r2
 8005c70:	f000 8088 	beq.w	8005d84 <LL_GPIO_Init+0x12c>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005c74:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005c78:	f04f 0e03 	mov.w	lr, #3
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005c7c:	43ef      	mvns	r7, r5
 8005c7e:	e036      	b.n	8005cee <LL_GPIO_Init+0x96>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005c80:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c84:	f8d0 800c 	ldr.w	r8, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c88:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005c8c:	b134      	cbz	r4, 8005c9c <LL_GPIO_Init+0x44>
  return __builtin_clz(value);
 8005c8e:	fab4 f484 	clz	r4, r4
 8005c92:	0064      	lsls	r4, r4, #1
 8005c94:	fa0e f404 	lsl.w	r4, lr, r4
 8005c98:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005ca0:	b134      	cbz	r4, 8005cb0 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 8005ca2:	fab4 f484 	clz	r4, r4
 8005ca6:	0064      	lsls	r4, r4, #1
 8005ca8:	fa09 f904 	lsl.w	r9, r9, r4
 8005cac:	ea48 0809 	orr.w	r8, r8, r9

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005cb0:	2e02      	cmp	r6, #2
 8005cb2:	f8c0 800c 	str.w	r8, [r0, #12]
 8005cb6:	d046      	beq.n	8005d46 <LL_GPIO_Init+0xee>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005cb8:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005cc0:	b134      	cbz	r4, 8005cd0 <LL_GPIO_Init+0x78>
  return __builtin_clz(value);
 8005cc2:	fab4 f484 	clz	r4, r4
 8005cc6:	0064      	lsls	r4, r4, #1
 8005cc8:	fa0e f404 	lsl.w	r4, lr, r4
 8005ccc:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005cd4:	b12b      	cbz	r3, 8005ce2 <LL_GPIO_Init+0x8a>
  return __builtin_clz(value);
 8005cd6:	fab3 f383 	clz	r3, r3
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	409e      	lsls	r6, r3
 8005cde:	ea48 0806 	orr.w	r8, r8, r6
 8005ce2:	f8c0 8000 	str.w	r8, [r0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8005ce6:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005ce8:	fa35 f302 	lsrs.w	r3, r5, r2
 8005cec:	d04a      	beq.n	8005d84 <LL_GPIO_Init+0x12c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005cee:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 8005cf2:	402b      	ands	r3, r5
 8005cf4:	d0f7      	beq.n	8005ce6 <LL_GPIO_Init+0x8e>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005cf6:	684e      	ldr	r6, [r1, #4]
 8005cf8:	1e74      	subs	r4, r6, #1
 8005cfa:	2c01      	cmp	r4, #1
 8005cfc:	d8c0      	bhi.n	8005c80 <LL_GPIO_Init+0x28>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005cfe:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005d02:	f8d0 8008 	ldr.w	r8, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005d0a:	b134      	cbz	r4, 8005d1a <LL_GPIO_Init+0xc2>
  return __builtin_clz(value);
 8005d0c:	fab4 f484 	clz	r4, r4
 8005d10:	0064      	lsls	r4, r4, #1
 8005d12:	fa0e f404 	lsl.w	r4, lr, r4
 8005d16:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005d1e:	b134      	cbz	r4, 8005d2e <LL_GPIO_Init+0xd6>
  return __builtin_clz(value);
 8005d20:	fab4 f484 	clz	r4, r4
 8005d24:	0064      	lsls	r4, r4, #1
 8005d26:	fa09 f904 	lsl.w	r9, r9, r4
 8005d2a:	ea48 0809 	orr.w	r8, r8, r9
 8005d2e:	f8c0 8008 	str.w	r8, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d32:	6844      	ldr	r4, [r0, #4]
 8005d34:	ea07 0804 	and.w	r8, r7, r4
 8005d38:	68cc      	ldr	r4, [r1, #12]
 8005d3a:	fb05 f404 	mul.w	r4, r5, r4
 8005d3e:	ea48 0404 	orr.w	r4, r8, r4
 8005d42:	6044      	str	r4, [r0, #4]
}
 8005d44:	e79c      	b.n	8005c80 <LL_GPIO_Init+0x28>
        if (currentpin < LL_GPIO_PIN_8)
 8005d46:	2bff      	cmp	r3, #255	@ 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005d48:	f8d1 8014 	ldr.w	r8, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8005d4c:	d81d      	bhi.n	8005d8a <LL_GPIO_Init+0x132>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005d4e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005d56:	b144      	cbz	r4, 8005d6a <LL_GPIO_Init+0x112>
  return __builtin_clz(value);
 8005d58:	fab4 f484 	clz	r4, r4
 8005d5c:	00a4      	lsls	r4, r4, #2
 8005d5e:	f04f 0a0f 	mov.w	sl, #15
 8005d62:	fa0a f404 	lsl.w	r4, sl, r4
 8005d66:	ea29 0904 	bic.w	r9, r9, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005d6e:	b134      	cbz	r4, 8005d7e <LL_GPIO_Init+0x126>
  return __builtin_clz(value);
 8005d70:	fab4 f484 	clz	r4, r4
 8005d74:	00a4      	lsls	r4, r4, #2
 8005d76:	fa08 f404 	lsl.w	r4, r8, r4
 8005d7a:	ea49 0904 	orr.w	r9, r9, r4
 8005d7e:	f8c0 9020 	str.w	r9, [r0, #32]
}
 8005d82:	e799      	b.n	8005cb8 <LL_GPIO_Init+0x60>
  }
  return (SUCCESS);
}
 8005d84:	2000      	movs	r0, #0
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005d8a:	f8d0 9024 	ldr.w	r9, [r0, #36]	@ 0x24
 8005d8e:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d90:	fa94 faa4 	rbit	sl, r4
  if (value == 0U)
 8005d94:	f1ba 0f00 	cmp.w	sl, #0
 8005d98:	d009      	beq.n	8005dae <LL_GPIO_Init+0x156>
  return __builtin_clz(value);
 8005d9a:	faba fa8a 	clz	sl, sl
 8005d9e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005da2:	f04f 0b0f 	mov.w	fp, #15
 8005da6:	fa0b fa0a 	lsl.w	sl, fp, sl
 8005daa:	ea29 090a 	bic.w	r9, r9, sl
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005db2:	b134      	cbz	r4, 8005dc2 <LL_GPIO_Init+0x16a>
  return __builtin_clz(value);
 8005db4:	fab4 f484 	clz	r4, r4
 8005db8:	00a4      	lsls	r4, r4, #2
 8005dba:	fa08 f804 	lsl.w	r8, r8, r4
 8005dbe:	ea49 0908 	orr.w	r9, r9, r8
 8005dc2:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
}
 8005dc6:	e777      	b.n	8005cb8 <LL_GPIO_Init+0x60>

08005dc8 <LL_RCC_GetSystemClocksFreq>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005dc8:	4a23      	ldr	r2, [pc, #140]	@ (8005e58 <LL_RCC_GetSystemClocksFreq+0x90>)
 8005dca:	6893      	ldr	r3, [r2, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
static uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005dd0:	2b08      	cmp	r3, #8
{
 8005dd2:	b410      	push	{r4}
  switch (LL_RCC_GetSysClkSource())
 8005dd4:	d03d      	beq.n	8005e52 <LL_RCC_GetSystemClocksFreq+0x8a>
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d139      	bne.n	8005e4e <LL_RCC_GetSystemClocksFreq+0x86>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005dda:	68d3      	ldr	r3, [r2, #12]
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005ddc:	491f      	ldr	r1, [pc, #124]	@ (8005e5c <LL_RCC_GetSystemClocksFreq+0x94>)
 8005dde:	4c20      	ldr	r4, [pc, #128]	@ (8005e60 <LL_RCC_GetSystemClocksFreq+0x98>)
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	bf18      	it	ne
 8005de8:	460c      	movne	r4, r1
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005dea:	68d3      	ldr	r3, [r2, #12]
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005dec:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005dee:	68d2      	ldr	r2, [r2, #12]

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005df0:	f3c2 6241 	ubfx	r2, r2, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005df4:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8005df8:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005dfc:	3201      	adds	r2, #1
 8005dfe:	fb04 f303 	mul.w	r3, r4, r3
 8005e02:	3101      	adds	r1, #1
 8005e04:	0052      	lsls	r2, r2, #1
 8005e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e0a:	fbb3 f3f2 	udiv	r3, r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005e0e:	4912      	ldr	r1, [pc, #72]	@ (8005e58 <LL_RCC_GetSystemClocksFreq+0x90>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005e10:	6003      	str	r3, [r0, #0]
 8005e12:	688a      	ldr	r2, [r1, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e14:	4c13      	ldr	r4, [pc, #76]	@ (8005e64 <LL_RCC_GetSystemClocksFreq+0x9c>)
 8005e16:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005e1a:	5ca2      	ldrb	r2, [r4, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005e1c:	4c12      	ldr	r4, [pc, #72]	@ (8005e68 <LL_RCC_GetSystemClocksFreq+0xa0>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e1e:	f002 021f 	and.w	r2, r2, #31
 8005e22:	40d3      	lsrs	r3, r2
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005e24:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005e26:	688a      	ldr	r2, [r1, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005e28:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005e2c:	5ca2      	ldrb	r2, [r4, r2]
 8005e2e:	f002 021f 	and.w	r2, r2, #31
 8005e32:	fa23 f202 	lsr.w	r2, r3, r2
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005e36:	6082      	str	r2, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005e38:	688a      	ldr	r2, [r1, #8]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005e3a:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8005e3e:	5ca2      	ldrb	r2, [r4, r2]
}
 8005e40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005e44:	f002 021f 	and.w	r2, r2, #31
 8005e48:	40d3      	lsrs	r3, r2
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005e4a:	60c3      	str	r3, [r0, #12]
}
 8005e4c:	4770      	bx	lr
      frequency = HSI_VALUE;
 8005e4e:	4b03      	ldr	r3, [pc, #12]	@ (8005e5c <LL_RCC_GetSystemClocksFreq+0x94>)
 8005e50:	e7dd      	b.n	8005e0e <LL_RCC_GetSystemClocksFreq+0x46>
  switch (LL_RCC_GetSysClkSource())
 8005e52:	4b03      	ldr	r3, [pc, #12]	@ (8005e60 <LL_RCC_GetSystemClocksFreq+0x98>)
 8005e54:	e7db      	b.n	8005e0e <LL_RCC_GetSystemClocksFreq+0x46>
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	00f42400 	.word	0x00f42400
 8005e60:	016e3600 	.word	0x016e3600
 8005e64:	08006bac 	.word	0x08006bac
 8005e68:	08006ba4 	.word	0x08006ba4

08005e6c <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005e6c:	2803      	cmp	r0, #3
{
 8005e6e:	b430      	push	{r4, r5}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005e70:	d04e      	beq.n	8005f10 <LL_RCC_GetUSARTClockFreq+0xa4>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005e72:	280c      	cmp	r0, #12
 8005e74:	d005      	beq.n	8005e82 <LL_RCC_GetUSARTClockFreq+0x16>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005e76:	2830      	cmp	r0, #48	@ 0x30
 8005e78:	f000 8094 	beq.w	8005fa4 <LL_RCC_GetUSARTClockFreq+0x138>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005e7c:	2000      	movs	r0, #0
}
 8005e7e:	bc30      	pop	{r4, r5}
 8005e80:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005e82:	4a68      	ldr	r2, [pc, #416]	@ (8006024 <LL_RCC_GetUSARTClockFreq+0x1b8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005e84:	4968      	ldr	r1, [pc, #416]	@ (8006028 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8005e86:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8005e92:	428b      	cmp	r3, r1
 8005e94:	d07e      	beq.n	8005f94 <LL_RCC_GetUSARTClockFreq+0x128>
 8005e96:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005e9a:	d074      	beq.n	8005f86 <LL_RCC_GetUSARTClockFreq+0x11a>
 8005e9c:	3904      	subs	r1, #4
 8005e9e:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ea0:	6893      	ldr	r3, [r2, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	f000 8091 	beq.w	8005fcc <LL_RCC_GetUSARTClockFreq+0x160>
  switch (LL_RCC_GetSysClkSource())
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	f000 80b5 	beq.w	800601a <LL_RCC_GetUSARTClockFreq+0x1ae>
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	f040 80ae 	bne.w	8006012 <LL_RCC_GetUSARTClockFreq+0x1a6>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005eb6:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005eb8:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005eba:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005ebc:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSI_VALUE;
 8005ebe:	4c5b      	ldr	r4, [pc, #364]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ec0:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSI_VALUE;
 8005ec4:	495a      	ldr	r1, [pc, #360]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005ec6:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005eca:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005ece:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005ed2:	3301      	adds	r3, #1
      pllinputfreq = HSI_VALUE;
 8005ed4:	2d03      	cmp	r5, #3
 8005ed6:	bf08      	it	eq
 8005ed8:	4621      	moveq	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005eda:	3201      	adds	r2, #1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fb01 f000 	mul.w	r0, r1, r0
 8005ee2:	fbb0 f0f2 	udiv	r0, r0, r2
 8005ee6:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005eea:	4b4e      	ldr	r3, [pc, #312]	@ (8006024 <LL_RCC_GetUSARTClockFreq+0x1b8>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005eec:	4951      	ldr	r1, [pc, #324]	@ (8006034 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8005eee:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005ef6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005efa:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005efc:	494e      	ldr	r1, [pc, #312]	@ (8006038 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005f00:	f002 021f 	and.w	r2, r2, #31
 8005f04:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	40d8      	lsrs	r0, r3
}
 8005f0c:	bc30      	pop	{r4, r5}
 8005f0e:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005f10:	4a44      	ldr	r2, [pc, #272]	@ (8006024 <LL_RCC_GetUSARTClockFreq+0x1b8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005f12:	494a      	ldr	r1, [pc, #296]	@ (800603c <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8005f14:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8005f20:	428b      	cmp	r3, r1
 8005f22:	d037      	beq.n	8005f94 <LL_RCC_GetUSARTClockFreq+0x128>
 8005f24:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005f28:	d02d      	beq.n	8005f86 <LL_RCC_GetUSARTClockFreq+0x11a>
 8005f2a:	3901      	subs	r1, #1
 8005f2c:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f2e:	6893      	ldr	r3, [r2, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	d04a      	beq.n	8005fcc <LL_RCC_GetUSARTClockFreq+0x160>
  switch (LL_RCC_GetSysClkSource())
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d071      	beq.n	800601e <LL_RCC_GetUSARTClockFreq+0x1b2>
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d16b      	bne.n	8006016 <LL_RCC_GetUSARTClockFreq+0x1aa>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f3e:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f40:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005f42:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005f44:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSI_VALUE;
 8005f46:	4c39      	ldr	r4, [pc, #228]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f48:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSI_VALUE;
 8005f4c:	4938      	ldr	r1, [pc, #224]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f4e:	f005 0c03 	and.w	ip, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f52:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005f56:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005f5a:	3301      	adds	r3, #1
      pllinputfreq = HSI_VALUE;
 8005f5c:	f1bc 0f03 	cmp.w	ip, #3
 8005f60:	bf08      	it	eq
 8005f62:	4621      	moveq	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f64:	3201      	adds	r2, #1
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	fb01 f000 	mul.w	r0, r1, r0
 8005f6c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005f70:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005f74:	4b2b      	ldr	r3, [pc, #172]	@ (8006024 <LL_RCC_GetUSARTClockFreq+0x1b8>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005f76:	492f      	ldr	r1, [pc, #188]	@ (8006034 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8005f78:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005f80:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005f84:	e7b9      	b.n	8005efa <LL_RCC_GetUSARTClockFreq+0x8e>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f86:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 8005f8a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8005f8e:	03c0      	lsls	r0, r0, #15
}
 8005f90:	bc30      	pop	{r4, r5}
 8005f92:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f94:	6810      	ldr	r0, [r2, #0]
          usart_frequency = HSI_VALUE;
 8005f96:	4b26      	ldr	r3, [pc, #152]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8005f98:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 8005f9c:	bf18      	it	ne
 8005f9e:	4618      	movne	r0, r3
}
 8005fa0:	bc30      	pop	{r4, r5}
 8005fa2:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8005fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8006024 <LL_RCC_GetUSARTClockFreq+0x1b8>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005fa6:	4926      	ldr	r1, [pc, #152]	@ (8006040 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8005fa8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005fac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005fb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fb4:	428b      	cmp	r3, r1
 8005fb6:	d0ed      	beq.n	8005f94 <LL_RCC_GetUSARTClockFreq+0x128>
 8005fb8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005fbc:	d0e3      	beq.n	8005f86 <LL_RCC_GetUSARTClockFreq+0x11a>
 8005fbe:	3910      	subs	r1, #16
 8005fc0:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fc2:	6893      	ldr	r3, [r2, #8]
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	f47f af6f 	bne.w	8005eaa <LL_RCC_GetUSARTClockFreq+0x3e>
  switch (LL_RCC_GetSysClkSource())
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d01e      	beq.n	800600e <LL_RCC_GetUSARTClockFreq+0x1a2>
 8005fd0:	2b0c      	cmp	r3, #12
 8005fd2:	d11a      	bne.n	800600a <LL_RCC_GetUSARTClockFreq+0x19e>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fd4:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005fd6:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005fd8:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005fda:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSI_VALUE;
 8005fdc:	4c13      	ldr	r4, [pc, #76]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fde:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSI_VALUE;
 8005fe2:	4913      	ldr	r1, [pc, #76]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005fe4:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fe8:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005fec:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8005ff0:	3301      	adds	r3, #1
      pllinputfreq = HSI_VALUE;
 8005ff2:	2d03      	cmp	r5, #3
 8005ff4:	bf08      	it	eq
 8005ff6:	4621      	moveq	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005ff8:	3201      	adds	r2, #1
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	fb01 f000 	mul.w	r0, r1, r0
 8006000:	fbb0 f0f2 	udiv	r0, r0, r2
 8006004:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006008:	e739      	b.n	8005e7e <LL_RCC_GetUSARTClockFreq+0x12>
          usart_frequency = HSI_VALUE;
 800600a:	4809      	ldr	r0, [pc, #36]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800600c:	e737      	b.n	8005e7e <LL_RCC_GetUSARTClockFreq+0x12>
      frequency = HSE_VALUE;
 800600e:	4807      	ldr	r0, [pc, #28]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006010:	e735      	b.n	8005e7e <LL_RCC_GetUSARTClockFreq+0x12>
      frequency = HSI_VALUE;
 8006012:	4807      	ldr	r0, [pc, #28]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006014:	e769      	b.n	8005eea <LL_RCC_GetUSARTClockFreq+0x7e>
 8006016:	4806      	ldr	r0, [pc, #24]	@ (8006030 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8006018:	e7ac      	b.n	8005f74 <LL_RCC_GetUSARTClockFreq+0x108>
  switch (LL_RCC_GetSysClkSource())
 800601a:	4804      	ldr	r0, [pc, #16]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800601c:	e765      	b.n	8005eea <LL_RCC_GetUSARTClockFreq+0x7e>
 800601e:	4803      	ldr	r0, [pc, #12]	@ (800602c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8006020:	e7a8      	b.n	8005f74 <LL_RCC_GetUSARTClockFreq+0x108>
 8006022:	bf00      	nop
 8006024:	40021000 	.word	0x40021000
 8006028:	000c0008 	.word	0x000c0008
 800602c:	016e3600 	.word	0x016e3600
 8006030:	00f42400 	.word	0x00f42400
 8006034:	08006bac 	.word	0x08006bac
 8006038:	08006ba4 	.word	0x08006ba4
 800603c:	00030002 	.word	0x00030002
 8006040:	00300020 	.word	0x00300020

08006044 <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8006044:	28c0      	cmp	r0, #192	@ 0xc0
 8006046:	d001      	beq.n	800604c <LL_RCC_GetUARTClockFreq+0x8>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8006048:	2000      	movs	r0, #0
}
 800604a:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800604c:	4a3c      	ldr	r2, [pc, #240]	@ (8006140 <LL_RCC_GetUARTClockFreq+0xfc>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800604e:	493d      	ldr	r1, [pc, #244]	@ (8006144 <LL_RCC_GetUARTClockFreq+0x100>)
 8006050:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006054:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006058:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800605c:	428b      	cmp	r3, r1
 800605e:	d015      	beq.n	800608c <LL_RCC_GetUARTClockFreq+0x48>
 8006060:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8006064:	d00c      	beq.n	8006080 <LL_RCC_GetUARTClockFreq+0x3c>
 8006066:	3940      	subs	r1, #64	@ 0x40
 8006068:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800606a:	6893      	ldr	r3, [r2, #8]
{
 800606c:	b430      	push	{r4, r5}
 800606e:	f003 030c 	and.w	r3, r3, #12
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8006072:	d112      	bne.n	800609a <LL_RCC_GetUARTClockFreq+0x56>
  switch (LL_RCC_GetSysClkSource())
 8006074:	2b08      	cmp	r3, #8
 8006076:	d061      	beq.n	800613c <LL_RCC_GetUARTClockFreq+0xf8>
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d042      	beq.n	8006102 <LL_RCC_GetUARTClockFreq+0xbe>
          uart_frequency = HSI_VALUE;
 800607c:	4832      	ldr	r0, [pc, #200]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x104>)
 800607e:	e03c      	b.n	80060fa <LL_RCC_GetUARTClockFreq+0xb6>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006080:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 8006084:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8006088:	03c0      	lsls	r0, r0, #15
 800608a:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800608c:	6810      	ldr	r0, [r2, #0]
 800608e:	4b2e      	ldr	r3, [pc, #184]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x104>)
 8006090:	f410 6080 	ands.w	r0, r0, #1024	@ 0x400
 8006094:	bf18      	it	ne
 8006096:	4618      	movne	r0, r3
 8006098:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 800609a:	2b08      	cmp	r3, #8
 800609c:	d04c      	beq.n	8006138 <LL_RCC_GetUARTClockFreq+0xf4>
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d12d      	bne.n	80060fe <LL_RCC_GetUARTClockFreq+0xba>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060a2:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80060a4:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80060a6:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80060a8:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSI_VALUE;
 80060aa:	4c28      	ldr	r4, [pc, #160]	@ (800614c <LL_RCC_GetUARTClockFreq+0x108>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060ac:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSI_VALUE;
 80060b0:	4925      	ldr	r1, [pc, #148]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x104>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060b2:	f005 0c03 	and.w	ip, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060b6:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80060ba:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80060be:	3301      	adds	r3, #1
      pllinputfreq = HSI_VALUE;
 80060c0:	f1bc 0f03 	cmp.w	ip, #3
 80060c4:	bf08      	it	eq
 80060c6:	4621      	moveq	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060c8:	3201      	adds	r2, #1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	fb01 f000 	mul.w	r0, r1, r0
 80060d0:	fbb0 f0f2 	udiv	r0, r0, r2
 80060d4:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060d8:	4b19      	ldr	r3, [pc, #100]	@ (8006140 <LL_RCC_GetUARTClockFreq+0xfc>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80060da:	491d      	ldr	r1, [pc, #116]	@ (8006150 <LL_RCC_GetUARTClockFreq+0x10c>)
 80060dc:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80060e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80060e8:	5c8a      	ldrb	r2, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80060ea:	491a      	ldr	r1, [pc, #104]	@ (8006154 <LL_RCC_GetUARTClockFreq+0x110>)
 80060ec:	5ccb      	ldrb	r3, [r1, r3]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80060ee:	f002 021f 	and.w	r2, r2, #31
 80060f2:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80060f4:	f003 031f 	and.w	r3, r3, #31
 80060f8:	40d8      	lsrs	r0, r3
}
 80060fa:	bc30      	pop	{r4, r5}
 80060fc:	4770      	bx	lr
      frequency = HSI_VALUE;
 80060fe:	4812      	ldr	r0, [pc, #72]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x104>)
 8006100:	e7ea      	b.n	80060d8 <LL_RCC_GetUARTClockFreq+0x94>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006102:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006104:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006106:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006108:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSI_VALUE;
 800610a:	4c10      	ldr	r4, [pc, #64]	@ (800614c <LL_RCC_GetUARTClockFreq+0x108>)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800610c:	f3c1 1203 	ubfx	r2, r1, #4, #4
      pllinputfreq = HSI_VALUE;
 8006110:	490d      	ldr	r1, [pc, #52]	@ (8006148 <LL_RCC_GetUARTClockFreq+0x104>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006112:	f005 0503 	and.w	r5, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006116:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800611a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800611e:	3301      	adds	r3, #1
      pllinputfreq = HSI_VALUE;
 8006120:	2d03      	cmp	r5, #3
 8006122:	bf08      	it	eq
 8006124:	4621      	moveq	r1, r4
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006126:	3201      	adds	r2, #1
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	fb01 f000 	mul.w	r0, r1, r0
 800612e:	fbb0 f0f2 	udiv	r0, r0, r2
 8006132:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006136:	e7e0      	b.n	80060fa <LL_RCC_GetUARTClockFreq+0xb6>
  switch (LL_RCC_GetSysClkSource())
 8006138:	4804      	ldr	r0, [pc, #16]	@ (800614c <LL_RCC_GetUARTClockFreq+0x108>)
 800613a:	e7cd      	b.n	80060d8 <LL_RCC_GetUARTClockFreq+0x94>
 800613c:	4803      	ldr	r0, [pc, #12]	@ (800614c <LL_RCC_GetUARTClockFreq+0x108>)
 800613e:	e7dc      	b.n	80060fa <LL_RCC_GetUARTClockFreq+0xb6>
 8006140:	40021000 	.word	0x40021000
 8006144:	00c00080 	.word	0x00c00080
 8006148:	00f42400 	.word	0x00f42400
 800614c:	016e3600 	.word	0x016e3600
 8006150:	08006bac 	.word	0x08006bac
 8006154:	08006ba4 	.word	0x08006ba4

08006158 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006158:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	07db      	lsls	r3, r3, #31
 800615e:	d42e      	bmi.n	80061be <LL_USART_Init+0x66>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006160:	4604      	mov	r4, r0
 8006162:	e9d1 0204 	ldrd	r0, r2, [r1, #16]
 8006166:	688b      	ldr	r3, [r1, #8]
 8006168:	460d      	mov	r5, r1
 800616a:	4303      	orrs	r3, r0
 800616c:	4313      	orrs	r3, r2
 800616e:	69ea      	ldr	r2, [r5, #28]
 8006170:	6821      	ldr	r1, [r4, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	4a2e      	ldr	r2, [pc, #184]	@ (8006230 <LL_USART_Init+0xd8>)
 8006176:	400a      	ands	r2, r1
 8006178:	4313      	orrs	r3, r2
 800617a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800617c:	6863      	ldr	r3, [r4, #4]
 800617e:	68ea      	ldr	r2, [r5, #12]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006180:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006182:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006186:	4313      	orrs	r3, r2
 8006188:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800618a:	68a3      	ldr	r3, [r4, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800618c:	4a29      	ldr	r2, [pc, #164]	@ (8006234 <LL_USART_Init+0xdc>)
 800618e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006192:	430b      	orrs	r3, r1
 8006194:	4294      	cmp	r4, r2
 8006196:	60a3      	str	r3, [r4, #8]
 8006198:	d013      	beq.n	80061c2 <LL_USART_Init+0x6a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800619a:	4b27      	ldr	r3, [pc, #156]	@ (8006238 <LL_USART_Init+0xe0>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d019      	beq.n	80061d4 <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80061a0:	4b26      	ldr	r3, [pc, #152]	@ (800623c <LL_USART_Init+0xe4>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d01a      	beq.n	80061dc <LL_USART_Init+0x84>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80061a6:	4b26      	ldr	r3, [pc, #152]	@ (8006240 <LL_USART_Init+0xe8>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	d01b      	beq.n	80061e4 <LL_USART_Init+0x8c>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80061ac:	682a      	ldr	r2, [r5, #0]
  ErrorStatus status = ERROR;
 80061ae:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80061b0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80061b2:	b292      	uxth	r2, r2
 80061b4:	f023 030f 	bic.w	r3, r3, #15
 80061b8:	4313      	orrs	r3, r2
 80061ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
  ErrorStatus status = ERROR;
 80061be:	2001      	movs	r0, #1
}
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80061c2:	2003      	movs	r0, #3
 80061c4:	f7ff fe52 	bl	8005e6c <LL_RCC_GetUSARTClockFreq>
                           USART_InitStruct->PrescalerValue,
 80061c8:	682a      	ldr	r2, [r5, #0]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80061ca:	b108      	cbz	r0, 80061d0 <LL_USART_Init+0x78>
        && (USART_InitStruct->BaudRate != 0U))
 80061cc:	6869      	ldr	r1, [r5, #4]
 80061ce:	b969      	cbnz	r1, 80061ec <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 80061d0:	2001      	movs	r0, #1
 80061d2:	e7ed      	b.n	80061b0 <LL_USART_Init+0x58>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80061d4:	200c      	movs	r0, #12
 80061d6:	f7ff fe49 	bl	8005e6c <LL_RCC_GetUSARTClockFreq>
 80061da:	e7f5      	b.n	80061c8 <LL_USART_Init+0x70>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80061dc:	2030      	movs	r0, #48	@ 0x30
 80061de:	f7ff fe45 	bl	8005e6c <LL_RCC_GetUSARTClockFreq>
 80061e2:	e7f1      	b.n	80061c8 <LL_USART_Init+0x70>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80061e4:	20c0      	movs	r0, #192	@ 0xc0
 80061e6:	f7ff ff2d 	bl	8006044 <LL_RCC_GetUARTClockFreq>
 80061ea:	e7ed      	b.n	80061c8 <LL_USART_Init+0x70>
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80061ec:	2a0b      	cmp	r2, #11
 80061ee:	d901      	bls.n	80061f4 <LL_USART_Init+0x9c>
      status = SUCCESS;
 80061f0:	2000      	movs	r0, #0
 80061f2:	e7dd      	b.n	80061b0 <LL_USART_Init+0x58>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061f4:	69ed      	ldr	r5, [r5, #28]
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80061f6:	4b13      	ldr	r3, [pc, #76]	@ (8006244 <LL_USART_Init+0xec>)
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80061f8:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80061fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006200:	fbb0 f0f3 	udiv	r0, r0, r3
 8006204:	ea4f 0351 	mov.w	r3, r1, lsr #1
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006208:	d005      	beq.n	8006216 <LL_USART_Init+0xbe>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800620a:	4403      	add	r3, r0
 800620c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006210:	b29b      	uxth	r3, r3
 8006212:	60e3      	str	r3, [r4, #12]
 8006214:	e7ec      	b.n	80061f0 <LL_USART_Init+0x98>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8006216:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    brrtemp = usartdiv & 0xFFF0U;
 800621a:	f64f 70f0 	movw	r0, #65520	@ 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800621e:	fbb3 f3f1 	udiv	r3, r3, r1
    brrtemp = usartdiv & 0xFFF0U;
 8006222:	ea03 0100 	and.w	r1, r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006226:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800622a:	430b      	orrs	r3, r1
    USARTx->BRR = brrtemp;
 800622c:	60e3      	str	r3, [r4, #12]
 800622e:	e7df      	b.n	80061f0 <LL_USART_Init+0x98>
 8006230:	efff69f3 	.word	0xefff69f3
 8006234:	40013800 	.word	0x40013800
 8006238:	40004400 	.word	0x40004400
 800623c:	40004800 	.word	0x40004800
 8006240:	40004c00 	.word	0x40004c00
 8006244:	08006bbc 	.word	0x08006bbc

08006248 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006248:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800624a:	8803      	ldrh	r3, [r0, #0]
 800624c:	140d      	asrs	r5, r1, #16
 800624e:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006250:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8006254:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006258:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800625c:	428b      	cmp	r3, r1
{
 800625e:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8006260:	da0f      	bge.n	8006282 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8006262:	8846      	ldrh	r6, [r0, #2]
 8006264:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006268:	4282      	cmp	r2, r0
 800626a:	dd13      	ble.n	8006294 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800626c:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800626e:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8006272:	bfb8      	it	lt
 8006274:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8006276:	f7fa ffcb 	bl	8001210 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800627a:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800627c:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800627e:	db0e      	blt.n	800629e <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8006280:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8006282:	b2a4      	uxth	r4, r4
 8006284:	2000      	movs	r0, #0
 8006286:	f364 000f 	bfi	r0, r4, #0, #16
 800628a:	b2ad      	uxth	r5, r5
 800628c:	f365 401f 	bfi	r0, r5, #16, #16
}
 8006290:	b004      	add	sp, #16
 8006292:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8006294:	1a98      	subs	r0, r3, r2
 8006296:	f7fa ffbb 	bl	8001210 <MCM_Sqrt>
        if (Vqd.q < 0)
 800629a:	2c00      	cmp	r4, #0
 800629c:	daf0      	bge.n	8006280 <Circle_Limitation+0x38>
          new_q = - new_q;
 800629e:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 80062a0:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 80062a2:	e7ee      	b.n	8006282 <Circle_Limitation+0x3a>

080062a4 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80062a4:	7803      	ldrb	r3, [r0, #0]
 80062a6:	b94b      	cbnz	r3, 80062bc <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 80062a8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfcc      	ite	gt
 80062b0:	2300      	movgt	r3, #0
 80062b2:	2301      	movle	r3, #1
 80062b4:	425b      	negs	r3, r3
 80062b6:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 80062b8:	8043      	strh	r3, [r0, #2]
}
 80062ba:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80062bc:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 80062be:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 80062c0:	2200      	movs	r2, #0
 80062c2:	8102      	strh	r2, [r0, #8]
}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop

080062c8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80062c8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80062ca:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80062cc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80062ce:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80062d0:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80062d2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80062d4:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80062d6:	4770      	bx	lr

080062d8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80062d8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80062da:	4770      	bx	lr

080062dc <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80062dc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80062e0:	4603      	mov	r3, r0
 80062e2:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80062e4:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80062e8:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80062ec:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80062f0:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80062f4:	b17c      	cbz	r4, 8006316 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80062f6:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80062fa:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 80062fe:	eb15 0e01 	adds.w	lr, r5, r1
 8006302:	d41d      	bmi.n	8006340 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006304:	420d      	tst	r5, r1
 8006306:	4914      	ldr	r1, [pc, #80]	@ (8006358 <PI_Controller+0x7c>)
 8006308:	bf48      	it	mi
 800630a:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800630c:	45a6      	cmp	lr, r4
 800630e:	dc02      	bgt.n	8006316 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006310:	691c      	ldr	r4, [r3, #16]
 8006312:	4574      	cmp	r4, lr
 8006314:	dd1d      	ble.n	8006352 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006316:	8b99      	ldrh	r1, [r3, #28]
 8006318:	410a      	asrs	r2, r1
 800631a:	8bd9      	ldrh	r1, [r3, #30]
 800631c:	fa44 f101 	asr.w	r1, r4, r1
 8006320:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006322:	4290      	cmp	r0, r2
 8006324:	da03      	bge.n	800632e <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006326:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006328:	4414      	add	r4, r2
 800632a:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 800632c:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 800632e:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006330:	bfc5      	ittet	gt
 8006332:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006336:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8006338:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 800633a:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 800633c:	609c      	str	r4, [r3, #8]
}
 800633e:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8006340:	2d00      	cmp	r5, #0
 8006342:	dde3      	ble.n	800630c <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8006344:	2900      	cmp	r1, #0
 8006346:	dde1      	ble.n	800630c <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006348:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800634c:	428c      	cmp	r4, r1
 800634e:	d1e2      	bne.n	8006316 <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8006350:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006352:	4674      	mov	r4, lr
 8006354:	e7df      	b.n	8006316 <PI_Controller+0x3a>
 8006356:	bf00      	nop
 8006358:	80000001 	.word	0x80000001

0800635c <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 800635c:	6882      	ldr	r2, [r0, #8]
{
 800635e:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006360:	89d1      	ldrh	r1, [r2, #14]
 8006362:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006366:	8993      	ldrh	r3, [r2, #12]
 8006368:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800636c:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8006370:	fb13 230c 	smlabb	r3, r3, ip, r2
 8006374:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006376:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800637a:	bfbc      	itt	lt
 800637c:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8006380:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8006382:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8006386:	bf48      	it	mi
 8006388:	330f      	addmi	r3, #15
 800638a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 800638e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8006390:	f85d fb04 	ldr.w	pc, [sp], #4

08006394 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8006394:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006396:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006398:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800639c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 80063a0:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80063a2:	4770      	bx	lr

080063a4 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80063a4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop

080063ac <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 80063ac:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 80063b0:	4603      	mov	r3, r0
 80063b2:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 80063b4:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 80063b8:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 80063bc:	bfb8      	it	lt
 80063be:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80063c0:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80063c4:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80063c6:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80063c8:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 80063ca:	bfb8      	it	lt
 80063cc:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80063ce:	458c      	cmp	ip, r1
 80063d0:	d818      	bhi.n	8006404 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80063d2:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80063d6:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 80063da:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 80063de:	bfb8      	it	lt
 80063e0:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80063e4:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80063e8:	bfb8      	it	lt
 80063ea:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80063ee:	45e6      	cmp	lr, ip
 80063f0:	d308      	bcc.n	8006404 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80063f2:	428c      	cmp	r4, r1
 80063f4:	d306      	bcc.n	8006404 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80063f6:	4290      	cmp	r0, r2
 80063f8:	d809      	bhi.n	800640e <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80063fa:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80063fc:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 80063fe:	bf18      	it	ne
 8006400:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8006402:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006404:	4290      	cmp	r0, r2
 8006406:	d9f8      	bls.n	80063fa <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8006408:	3201      	adds	r2, #1
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	e7f5      	b.n	80063fa <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800640e:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006410:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8006412:	2001      	movs	r0, #1
}
 8006414:	bd10      	pop	{r4, pc}
 8006416:	bf00      	nop

08006418 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 8006418:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800641a:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800641e:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006420:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 8006424:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 8006428:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800642a:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800642c:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006430:	0409      	lsls	r1, r1, #16
 8006432:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 8006436:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8006438:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800643c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800643e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006440:	6183      	str	r3, [r0, #24]
}
 8006442:	4770      	bx	lr

08006444 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006444:	7803      	ldrb	r3, [r0, #0]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d000      	beq.n	800644c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800644a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800644c:	6900      	ldr	r0, [r0, #16]
 800644e:	2100      	movs	r1, #0
 8006450:	f7ff bf42 	b.w	80062d8 <PID_SetIntegralTerm>

08006454 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006454:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8006456:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8006458:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800645a:	4770      	bx	lr

0800645c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800645c:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800645e:	7803      	ldrb	r3, [r0, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d019      	beq.n	8006498 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006464:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 8006468:	458c      	cmp	ip, r1
 800646a:	da03      	bge.n	8006474 <STC_ExecRamp+0x18>
 800646c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800646e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006472:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006474:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 8006478:	428c      	cmp	r4, r1
 800647a:	dcf7      	bgt.n	800646c <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800647c:	8c04      	ldrh	r4, [r0, #32]
 800647e:	428c      	cmp	r4, r1
 8006480:	dd03      	ble.n	800648a <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8006482:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 8006486:	428c      	cmp	r4, r1
 8006488:	dbf0      	blt.n	800646c <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800648a:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800648c:	b9aa      	cbnz	r2, 80064ba <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800648e:	2b03      	cmp	r3, #3
 8006490:	d10a      	bne.n	80064a8 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006492:	0409      	lsls	r1, r1, #16
 8006494:	6041      	str	r1, [r0, #4]
 8006496:	e009      	b.n	80064ac <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006498:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800649a:	428b      	cmp	r3, r1
 800649c:	dbe6      	blt.n	800646c <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800649e:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 80064a2:	428b      	cmp	r3, r1
 80064a4:	dce2      	bgt.n	800646c <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 80064a6:	b9e2      	cbnz	r2, 80064e2 <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80064a8:	0409      	lsls	r1, r1, #16
 80064aa:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 80064b0:	6183      	str	r3, [r0, #24]
{
 80064b2:	2001      	movs	r0, #1
}
 80064b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064b8:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80064ba:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80064be:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 80064c0:	4c09      	ldr	r4, [pc, #36]	@ (80064e8 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 80064c2:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 80064c8:	fba4 4303 	umull	r4, r3, r4, r3
 80064cc:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 80064ce:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80064d0:	eba1 0c0c 	sub.w	ip, r1, ip
 80064d4:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 80064d8:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80064da:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 80064de:	6182      	str	r2, [r0, #24]
 80064e0:	e7e7      	b.n	80064b2 <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80064e2:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80064e6:	e7ea      	b.n	80064be <STC_ExecRamp+0x62>
 80064e8:	10624dd3 	.word	0x10624dd3

080064ec <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80064ec:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80064ee:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80064f0:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80064f2:	2a04      	cmp	r2, #4
{
 80064f4:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80064f6:	d012      	beq.n	800651e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 80064f8:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80064fa:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80064fc:	d908      	bls.n	8006510 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80064fe:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8006500:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006502:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8006504:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8006506:	2a03      	cmp	r2, #3
 8006508:	d011      	beq.n	800652e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800650a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800650c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800650e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006510:	d1f9      	bne.n	8006506 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006512:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8006516:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006518:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800651a:	60c3      	str	r3, [r0, #12]
 800651c:	e7f3      	b.n	8006506 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800651e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8006520:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8006522:	d911      	bls.n	8006548 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8006524:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 8006526:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006528:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800652a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800652c:	e7ed      	b.n	800650a <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800652e:	6960      	ldr	r0, [r4, #20]
 8006530:	f7ff ff38 	bl	80063a4 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8006534:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006538:	b209      	sxth	r1, r1
 800653a:	6920      	ldr	r0, [r4, #16]
 800653c:	f7ff fece 	bl	80062dc <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8006540:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006542:	0405      	lsls	r5, r0, #16
 8006544:	60a5      	str	r5, [r4, #8]
}
 8006546:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006548:	d1df      	bne.n	800650a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800654a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800654e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006550:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8006552:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8006554:	e7d9      	b.n	800650a <STC_CalcTorqueReference+0x1e>
 8006556:	bf00      	nop

08006558 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8006558:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop

08006560 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 8006560:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 8006564:	b082      	sub	sp, #8
}
 8006566:	b002      	add	sp, #8
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800656c:	b510      	push	{r4, lr}
 800656e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006570:	6940      	ldr	r0, [r0, #20]
 8006572:	f7ff ff17 	bl	80063a4 <SPD_GetAvrgMecSpeedUnit>
 8006576:	0400      	lsls	r0, r0, #16
 8006578:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800657a:	bd10      	pop	{r4, pc}

0800657c <STSPIN32G4_readReg.part.0>:
#endif

  return status;
}

STSPIN32G4_StatusTypeDef STSPIN32G4_readReg(STSPIN32G4_HandleTypeDef *hdl, uint8_t regAddr, uint8_t *value)
 800657c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657e:	b085      	sub	sp, #20
 8006580:	4606      	mov	r6, r0
  }

#if defined(USE_FULL_LL_DRIVER)

  LL_RCC_ClocksTypeDef RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8006582:	4668      	mov	r0, sp
STSPIN32G4_StatusTypeDef STSPIN32G4_readReg(STSPIN32G4_HandleTypeDef *hdl, uint8_t regAddr, uint8_t *value)
 8006584:	460c      	mov	r4, r1
 8006586:	4615      	mov	r5, r2
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8006588:	f7ff fc1e 	bl	8005dc8 <LL_RCC_GetSystemClocksFreq>

  uint32_t tickFreq = RCC_Clocks.HCLK_Frequency /  (SysTick->LOAD + 1);
 800658c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8006590:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
 8006594:	695a      	ldr	r2, [r3, #20]
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  */
__STATIC_INLINE uint32_t LL_SYSTICK_GetClkSource(void)
{
  return READ_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8006596:	6919      	ldr	r1, [r3, #16]
 8006598:	9b01      	ldr	r3, [sp, #4]
 800659a:	3201      	adds	r2, #1
 800659c:	fbb3 f3f2 	udiv	r3, r3, r2

  if (LL_SYSTICK_GetClkSource() == LL_SYSTICK_CLKSOURCE_HCLK_DIV8)
 80065a0:	074a      	lsls	r2, r1, #29
  {
    tickFreq /= 8;
 80065a2:	bf58      	it	pl
 80065a4:	08db      	lsrpl	r3, r3, #3
  }

  uint8_t stat = 0;
  uint32_t ticks = (STSPIN32G4_I2C_TIMEOUT * tickFreq) / 1000 + 1;
 80065a6:	2264      	movs	r2, #100	@ 0x64
 80065a8:	fb03 f202 	mul.w	r2, r3, r2
 80065ac:	4b34      	ldr	r3, [pc, #208]	@ (8006680 <STSPIN32G4_readReg.part.0+0x104>)
 80065ae:	6831      	ldr	r1, [r6, #0]
 80065b0:	fba3 3202 	umull	r3, r2, r3, r2
 80065b4:	0992      	lsrs	r2, r2, #6
 80065b6:	3201      	adds	r2, #1
  uint8_t stat = 0;
 80065b8:	2300      	movs	r3, #0

  while (true)
  {
    switch (stat)
 80065ba:	3b01      	subs	r3, #1
 80065bc:	2b08      	cmp	r3, #8
 80065be:	d858      	bhi.n	8006672 <STSPIN32G4_readReg.part.0+0xf6>
 80065c0:	e8df f003 	tbb	[pc, r3]
 80065c4:	332b4538 	.word	0x332b4538
 80065c8:	140c2619 	.word	0x140c2619
 80065cc:	05          	.byte	0x05
 80065cd:	00          	.byte	0x00
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80065ce:	69cb      	ldr	r3, [r1, #28]
      break;

      case 9:
      LL_I2C_ClearFlag_STOP(hdl->i2cHdl);
      status = STSPIN32G4_OK;
      return status;
 80065d0:	2000      	movs	r0, #0
 80065d2:	f043 0320 	orr.w	r3, r3, #32
 80065d6:	61cb      	str	r3, [r1, #28]
  return status;


#endif

}
 80065d8:	b005      	add	sp, #20
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80065dc:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80065de:	702b      	strb	r3, [r5, #0]
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80065e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	03db      	lsls	r3, r3, #15
 80065e8:	d440      	bmi.n	800666c <STSPIN32G4_readReg.part.0+0xf0>
      stat += !LL_I2C_IsActiveFlag_BUSY(hdl->i2cHdl);
 80065ea:	6831      	ldr	r1, [r6, #0]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80065ec:	698b      	ldr	r3, [r1, #24]
 80065ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
      stat += LL_I2C_IsActiveFlag_STOP(hdl->i2cHdl);
 80065f2:	3308      	adds	r3, #8
      break;
 80065f4:	e02f      	b.n	8006656 <STSPIN32G4_readReg.part.0+0xda>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80065f6:	684f      	ldr	r7, [r1, #4]
 80065f8:	4b22      	ldr	r3, [pc, #136]	@ (8006684 <STSPIN32G4_readReg.part.0+0x108>)
 80065fa:	401f      	ands	r7, r3
 80065fc:	4b22      	ldr	r3, [pc, #136]	@ (8006688 <STSPIN32G4_readReg.part.0+0x10c>)
 80065fe:	433b      	orrs	r3, r7
 8006600:	604b      	str	r3, [r1, #4]
 8006602:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	03df      	lsls	r7, r3, #15
 800660a:	d501      	bpl.n	8006610 <STSPIN32G4_readReg.part.0+0x94>
    if(ticks == 0)
 800660c:	3a01      	subs	r2, #1
 800660e:	d027      	beq.n	8006660 <STSPIN32G4_readReg.part.0+0xe4>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8006610:	698b      	ldr	r3, [r1, #24]
 8006612:	f3c3 0380 	ubfx	r3, r3, #2, #1
      stat += LL_I2C_IsActiveFlag_RXNE(hdl->i2cHdl);
 8006616:	3306      	adds	r3, #6
      break;
 8006618:	e01d      	b.n	8006656 <STSPIN32G4_readReg.part.0+0xda>
 800661a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800661e:	628c      	str	r4, [r1, #40]	@ 0x28
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	03db      	lsls	r3, r3, #15
 8006624:	d501      	bpl.n	800662a <STSPIN32G4_readReg.part.0+0xae>
    if(ticks == 0)
 8006626:	3a01      	subs	r2, #1
 8006628:	d01a      	beq.n	8006660 <STSPIN32G4_readReg.part.0+0xe4>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800662a:	698b      	ldr	r3, [r1, #24]
 800662c:	f3c3 1380 	ubfx	r3, r3, #6, #1
      stat += LL_I2C_IsActiveFlag_TC(hdl->i2cHdl);
 8006630:	3304      	adds	r3, #4
      break;
 8006632:	e010      	b.n	8006656 <STSPIN32G4_readReg.part.0+0xda>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8006634:	684b      	ldr	r3, [r1, #4]
 8006636:	4f13      	ldr	r7, [pc, #76]	@ (8006684 <STSPIN32G4_readReg.part.0+0x108>)
 8006638:	403b      	ands	r3, r7
 800663a:	f443 3390 	orr.w	r3, r3, #73728	@ 0x12000
 800663e:	f043 038e 	orr.w	r3, r3, #142	@ 0x8e
 8006642:	604b      	str	r3, [r1, #4]
 8006644:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	03df      	lsls	r7, r3, #15
 800664c:	d40b      	bmi.n	8006666 <STSPIN32G4_readReg.part.0+0xea>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800664e:	698b      	ldr	r3, [r1, #24]
 8006650:	f3c3 0340 	ubfx	r3, r3, #1, #1
      stat += LL_I2C_IsActiveFlag_TXIS(hdl->i2cHdl);
 8006654:	3302      	adds	r3, #2
 8006656:	6907      	ldr	r7, [r0, #16]
 8006658:	03ff      	lsls	r7, r7, #15
 800665a:	d5ae      	bpl.n	80065ba <STSPIN32G4_readReg.part.0+0x3e>
    if(ticks == 0)
 800665c:	3a01      	subs	r2, #1
 800665e:	d1ac      	bne.n	80065ba <STSPIN32G4_readReg.part.0+0x3e>
      return status;
 8006660:	2003      	movs	r0, #3
}
 8006662:	b005      	add	sp, #20
 8006664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(ticks == 0)
 8006666:	3a01      	subs	r2, #1
 8006668:	d1f1      	bne.n	800664e <STSPIN32G4_readReg.part.0+0xd2>
 800666a:	e7f9      	b.n	8006660 <STSPIN32G4_readReg.part.0+0xe4>
 800666c:	3a01      	subs	r2, #1
 800666e:	d1bc      	bne.n	80065ea <STSPIN32G4_readReg.part.0+0x6e>
 8006670:	e7f6      	b.n	8006660 <STSPIN32G4_readReg.part.0+0xe4>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8006672:	698b      	ldr	r3, [r1, #24]
      stat += !LL_I2C_IsActiveFlag_BUSY(hdl->i2cHdl);
 8006674:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8006678:	f3c3 33c0 	ubfx	r3, r3, #15, #1
      break;
 800667c:	e7eb      	b.n	8006656 <STSPIN32G4_readReg.part.0+0xda>
 800667e:	bf00      	nop
 8006680:	10624dd3 	.word	0x10624dd3
 8006684:	fc008000 	.word	0xfc008000
 8006688:	0201248e 	.word	0x0201248e

0800668c <STSPIN32G4_writeReg.part.0>:

STSPIN32G4_StatusTypeDef STSPIN32G4_writeReg(STSPIN32G4_HandleTypeDef *hdl, uint8_t regAddr, uint8_t value)
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	4606      	mov	r6, r0
  }

#if defined(USE_FULL_LL_DRIVER)

  LL_RCC_ClocksTypeDef RCC_Clocks;
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8006692:	4668      	mov	r0, sp
STSPIN32G4_StatusTypeDef STSPIN32G4_writeReg(STSPIN32G4_HandleTypeDef *hdl, uint8_t regAddr, uint8_t value)
 8006694:	460c      	mov	r4, r1
 8006696:	4615      	mov	r5, r2
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8006698:	f7ff fb96 	bl	8005dc8 <LL_RCC_GetSystemClocksFreq>

  uint32_t tickFreq = RCC_Clocks.HCLK_Frequency /  (SysTick->LOAD + 1);
 800669c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066a0:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
 80066a4:	695a      	ldr	r2, [r3, #20]
  return READ_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80066a6:	6919      	ldr	r1, [r3, #16]
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	3201      	adds	r2, #1
 80066ac:	fbb3 f3f2 	udiv	r3, r3, r2

  if (LL_SYSTICK_GetClkSource() == LL_SYSTICK_CLKSOURCE_HCLK_DIV8)
 80066b0:	074a      	lsls	r2, r1, #29
  {
    tickFreq /= 8;
 80066b2:	bf58      	it	pl
 80066b4:	08db      	lsrpl	r3, r3, #3
  }

  uint8_t stat = 0;
  uint32_t ticks = (STSPIN32G4_I2C_TIMEOUT * tickFreq) / 1000 + 1;
 80066b6:	2264      	movs	r2, #100	@ 0x64
 80066b8:	fb03 f202 	mul.w	r2, r3, r2
 80066bc:	4b31      	ldr	r3, [pc, #196]	@ (8006784 <STSPIN32G4_writeReg.part.0+0xf8>)
  while (true)
  {
    switch (stat)
    {
    case 0:
      stat += !LL_I2C_IsActiveFlag_BUSY(hdl->i2cHdl);
 80066be:	6831      	ldr	r1, [r6, #0]
  uint32_t ticks = (STSPIN32G4_I2C_TIMEOUT * tickFreq) / 1000 + 1;
 80066c0:	fba3 3202 	umull	r3, r2, r3, r2
 80066c4:	0992      	lsrs	r2, r2, #6
 80066c6:	3201      	adds	r2, #1
  uint8_t stat = 0;
 80066c8:	2300      	movs	r3, #0
    switch (stat)
 80066ca:	3b01      	subs	r3, #1
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d853      	bhi.n	8006778 <STSPIN32G4_writeReg.part.0+0xec>
 80066d0:	e8df f003 	tbb	[pc, r3]
 80066d4:	332b4338 	.word	0x332b4338
 80066d8:	140c2619 	.word	0x140c2619
 80066dc:	05          	.byte	0x05
 80066dd:	00          	.byte	0x00
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80066de:	69cb      	ldr	r3, [r1, #28]
      break;

    case 9:
      LL_I2C_ClearFlag_STOP(hdl->i2cHdl);
	    status = STSPIN32G4_OK;
      return status;
 80066e0:	2000      	movs	r0, #0
 80066e2:	f043 0320 	orr.w	r3, r3, #32
 80066e6:	61cb      	str	r3, [r1, #28]
  status = (STSPIN32G4_StatusTypeDef) HAL_I2C_Mem_Write(hdl->i2cHdl, STSPIN32G4_I2C_ADDR, (uint16_t) regAddr, 1, &value, 1, ticks);
  return status;

#endif

}
 80066e8:	b004      	add	sp, #16
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80066ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  WRITE_REG(I2Cx->TXDR, Data);
 80066f0:	628d      	str	r5, [r1, #40]	@ 0x28
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	03db      	lsls	r3, r3, #15
 80066f6:	d501      	bpl.n	80066fc <STSPIN32G4_writeReg.part.0+0x70>
    if(ticks == 0)
 80066f8:	3a01      	subs	r2, #1
 80066fa:	d037      	beq.n	800676c <STSPIN32G4_writeReg.part.0+0xe0>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80066fc:	698b      	ldr	r3, [r1, #24]
 80066fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
      stat += LL_I2C_IsActiveFlag_STOP(hdl->i2cHdl);
 8006702:	3308      	adds	r3, #8
      break;
 8006704:	e02d      	b.n	8006762 <STSPIN32G4_writeReg.part.0+0xd6>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8006706:	684e      	ldr	r6, [r1, #4]
 8006708:	4b1f      	ldr	r3, [pc, #124]	@ (8006788 <STSPIN32G4_writeReg.part.0+0xfc>)
 800670a:	401e      	ands	r6, r3
 800670c:	4b1f      	ldr	r3, [pc, #124]	@ (800678c <STSPIN32G4_writeReg.part.0+0x100>)
 800670e:	4333      	orrs	r3, r6
 8006710:	604b      	str	r3, [r1, #4]
 8006712:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	03de      	lsls	r6, r3, #15
 800671a:	d501      	bpl.n	8006720 <STSPIN32G4_writeReg.part.0+0x94>
    if(ticks == 0)
 800671c:	3a01      	subs	r2, #1
 800671e:	d025      	beq.n	800676c <STSPIN32G4_writeReg.part.0+0xe0>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8006720:	698b      	ldr	r3, [r1, #24]
 8006722:	f3c3 0340 	ubfx	r3, r3, #1, #1
      stat += LL_I2C_IsActiveFlag_TXIS(hdl->i2cHdl);
 8006726:	3306      	adds	r3, #6
      break;
 8006728:	e01b      	b.n	8006762 <STSPIN32G4_writeReg.part.0+0xd6>
 800672a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  WRITE_REG(I2Cx->TXDR, Data);
 800672e:	628c      	str	r4, [r1, #40]	@ 0x28
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	03db      	lsls	r3, r3, #15
 8006734:	d501      	bpl.n	800673a <STSPIN32G4_writeReg.part.0+0xae>
    if(ticks == 0)
 8006736:	3a01      	subs	r2, #1
 8006738:	d018      	beq.n	800676c <STSPIN32G4_writeReg.part.0+0xe0>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 800673a:	698b      	ldr	r3, [r1, #24]
 800673c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
      stat += LL_I2C_IsActiveFlag_TCR(hdl->i2cHdl);
 8006740:	3304      	adds	r3, #4
      break;
 8006742:	e00e      	b.n	8006762 <STSPIN32G4_writeReg.part.0+0xd6>
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8006744:	684e      	ldr	r6, [r1, #4]
 8006746:	4b12      	ldr	r3, [pc, #72]	@ (8006790 <STSPIN32G4_writeReg.part.0+0x104>)
 8006748:	401e      	ands	r6, r3
 800674a:	4b12      	ldr	r3, [pc, #72]	@ (8006794 <STSPIN32G4_writeReg.part.0+0x108>)
 800674c:	4333      	orrs	r3, r6
 800674e:	604b      	str	r3, [r1, #4]
 8006750:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	03de      	lsls	r6, r3, #15
 8006758:	d40b      	bmi.n	8006772 <STSPIN32G4_writeReg.part.0+0xe6>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800675a:	698b      	ldr	r3, [r1, #24]
 800675c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      stat += LL_I2C_IsActiveFlag_TXIS(hdl->i2cHdl);
 8006760:	3302      	adds	r3, #2
 8006762:	6906      	ldr	r6, [r0, #16]
 8006764:	03f6      	lsls	r6, r6, #15
 8006766:	d5b0      	bpl.n	80066ca <STSPIN32G4_writeReg.part.0+0x3e>
    if(ticks == 0)
 8006768:	3a01      	subs	r2, #1
 800676a:	d1ae      	bne.n	80066ca <STSPIN32G4_writeReg.part.0+0x3e>
      return status;
 800676c:	2003      	movs	r0, #3
}
 800676e:	b004      	add	sp, #16
 8006770:	bd70      	pop	{r4, r5, r6, pc}
    if(ticks == 0)
 8006772:	3a01      	subs	r2, #1
 8006774:	d1f1      	bne.n	800675a <STSPIN32G4_writeReg.part.0+0xce>
 8006776:	e7f9      	b.n	800676c <STSPIN32G4_writeReg.part.0+0xe0>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8006778:	698b      	ldr	r3, [r1, #24]
      stat += !LL_I2C_IsActiveFlag_BUSY(hdl->i2cHdl);
 800677a:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 800677e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
      break;
 8006782:	e7ee      	b.n	8006762 <STSPIN32G4_writeReg.part.0+0xd6>
 8006784:	10624dd3 	.word	0x10624dd3
 8006788:	fc008400 	.word	0xfc008400
 800678c:	0201008e 	.word	0x0201008e
 8006790:	fc008000 	.word	0xfc008000
 8006794:	0101208e 	.word	0x0101208e

08006798 <STSPIN32G4_init>:
  if (hdl == NULL)
 8006798:	b118      	cbz	r0, 80067a2 <STSPIN32G4_init+0xa>
  hdl->i2cHdl = I2C3;
 800679a:	4b03      	ldr	r3, [pc, #12]	@ (80067a8 <STSPIN32G4_init+0x10>)
 800679c:	6003      	str	r3, [r0, #0]
  return status;
 800679e:	2000      	movs	r0, #0
 80067a0:	4770      	bx	lr
    return STSPIN32G4_ERROR;
 80067a2:	2001      	movs	r0, #1
}
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40007800 	.word	0x40007800

080067ac <STSPIN32G4_setVCC>:

  return status;
}

STSPIN32G4_StatusTypeDef STSPIN32G4_setVCC(STSPIN32G4_HandleTypeDef *hdl, STSPIN32G4_confVCC vcc)
{
 80067ac:	b530      	push	{r4, r5, lr}
 80067ae:	b085      	sub	sp, #20
  STSPIN32G4_StatusTypeDef status;
  uint8_t i2cReg = 0;
 80067b0:	2300      	movs	r3, #0
{
 80067b2:	9101      	str	r1, [sp, #4]
  uint8_t i2cReg = 0;
 80067b4:	f88d 300f 	strb.w	r3, [sp, #15]

  if (hdl == NULL)
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d043      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
  if (hdl->i2cHdl == NULL)
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	4604      	mov	r4, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d03f      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
  if (value == NULL)
 80067c4:	f10d 020f 	add.w	r2, sp, #15
 80067c8:	2101      	movs	r1, #1
 80067ca:	f7ff fed7 	bl	800657c <STSPIN32G4_readReg.part.0>
    return STSPIN32G4_ERROR;
  }

  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_POWMNG, &i2cReg);

  if (status == STSPIN32G4_OK)
 80067ce:	b1d0      	cbz	r0, 8006806 <STSPIN32G4_setVCC+0x5a>
  if (hdl->i2cHdl == NULL)
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d036      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
 80067d6:	22dd      	movs	r2, #221	@ 0xdd
 80067d8:	210b      	movs	r1, #11
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff ff56 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 80067e0:	4605      	mov	r5, r0
 80067e2:	b968      	cbnz	r0, 8006800 <STSPIN32G4_setVCC+0x54>
  if (hdl->i2cHdl == NULL)
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	b36b      	cbz	r3, 8006844 <STSPIN32G4_setVCC+0x98>
  if (value == NULL)
 80067e8:	aa03      	add	r2, sp, #12
 80067ea:	2180      	movs	r1, #128	@ 0x80
 80067ec:	4620      	mov	r0, r4
 80067ee:	f7ff fec5 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK)
 80067f2:	4605      	mov	r5, r0
 80067f4:	b920      	cbnz	r0, 8006800 <STSPIN32G4_setVCC+0x54>
    if (statusReg.lock != 1)
 80067f6:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80067fa:	43ed      	mvns	r5, r5
 80067fc:	f3c5 15c0 	ubfx	r5, r5, #7, #1
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 8006800:	4628      	mov	r0, r5
 8006802:	b005      	add	sp, #20
 8006804:	bd30      	pop	{r4, r5, pc}
  if (hdl->i2cHdl == NULL)
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	b1e3      	cbz	r3, 8006844 <STSPIN32G4_setVCC+0x98>
 800680a:	222d      	movs	r2, #45	@ 0x2d
 800680c:	210b      	movs	r1, #11
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff ff3c 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006814:	2800      	cmp	r0, #0
 8006816:	d1db      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
  if (hdl->i2cHdl == NULL)
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	b19b      	cbz	r3, 8006844 <STSPIN32G4_setVCC+0x98>
  if (value == NULL)
 800681c:	aa03      	add	r2, sp, #12
 800681e:	2180      	movs	r1, #128	@ 0x80
 8006820:	4620      	mov	r0, r4
 8006822:	f7ff feab 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK)
 8006826:	2800      	cmp	r0, #0
 8006828:	d1d2      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
    if (statusReg.lock == 1)
 800682a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dbce      	blt.n	80067d0 <STSPIN32G4_setVCC+0x24>
    switch (vcc.voltage)
 8006832:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006836:	2b04      	cmp	r3, #4
 8006838:	d8ca      	bhi.n	80067d0 <STSPIN32G4_setVCC+0x24>
 800683a:	e8df f003 	tbb	[pc, r3]
 800683e:	787d      	.short	0x787d
 8006840:	6a71      	.short	0x6a71
 8006842:	07          	.byte	0x07
 8006843:	00          	.byte	0x00
    return STSPIN32G4_ERROR;
 8006844:	2501      	movs	r5, #1
}
 8006846:	4628      	mov	r0, r5
 8006848:	b005      	add	sp, #20
 800684a:	bd30      	pop	{r4, r5, pc}
        i2cReg &= ~STSPIN32G4_I2C_VCC_DIS;
 800684c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8006850:	f022 0220 	bic.w	r2, r2, #32
        i2cReg |= STSPIN32G4_I2C_VCC_VAL_3;
 8006854:	f042 0203 	orr.w	r2, r2, #3
  if (hdl->i2cHdl == NULL)
 8006858:	6823      	ldr	r3, [r4, #0]
        i2cReg |= STSPIN32G4_I2C_VCC_VAL_3;
 800685a:	f88d 200f 	strb.w	r2, [sp, #15]
  if (hdl->i2cHdl == NULL)
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0f0      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
 8006862:	2101      	movs	r1, #1
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff ff11 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 800686a:	2800      	cmp	r0, #0
 800686c:	d1b0      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
  if (hdl->i2cHdl == NULL)
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0e7      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
  if (value == NULL)
 8006874:	f10d 020f 	add.w	r2, sp, #15
 8006878:	2108      	movs	r1, #8
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff fe7e 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK) // configuration of nFAULT pin
 8006880:	2800      	cmp	r0, #0
 8006882:	d1a5      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
    if (vcc.useNFAULT)
 8006884:	f89d 3005 	ldrb.w	r3, [sp, #5]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 8006888:	f89d 200f 	ldrb.w	r2, [sp, #15]
    if (vcc.useNFAULT)
 800688c:	2b00      	cmp	r3, #0
 800688e:	d058      	beq.n	8006942 <STSPIN32G4_setVCC+0x196>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_FLT;
 8006890:	f042 0201 	orr.w	r2, r2, #1
  if (hdl->i2cHdl == NULL)
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	f88d 200f 	strb.w	r2, [sp, #15]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0d2      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
 800689e:	2108      	movs	r1, #8
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7ff fef3 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d192      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
  if (hdl->i2cHdl == NULL)
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c9      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
  if (value == NULL)
 80068b0:	f10d 020f 	add.w	r2, sp, #15
 80068b4:	2107      	movs	r1, #7
 80068b6:	4620      	mov	r0, r4
 80068b8:	f7ff fe60 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK) // configuration of READY pin
 80068bc:	2800      	cmp	r0, #0
 80068be:	d187      	bne.n	80067d0 <STSPIN32G4_setVCC+0x24>
    if (vcc.useREADY)
 80068c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 80068c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    if (vcc.useREADY)
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d03d      	beq.n	8006948 <STSPIN32G4_setVCC+0x19c>
      i2cReg |= STSPIN32G4_I2C_VCC_UVLO_RDY;
 80068cc:	f042 0201 	orr.w	r2, r2, #1
  if (hdl->i2cHdl == NULL)
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	f88d 200f 	strb.w	r2, [sp, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0b4      	beq.n	8006844 <STSPIN32G4_setVCC+0x98>
 80068da:	2107      	movs	r1, #7
 80068dc:	4620      	mov	r0, r4
 80068de:	f7ff fed5 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 80068e2:	4605      	mov	r5, r0
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f47f af73 	bne.w	80067d0 <STSPIN32G4_setVCC+0x24>
  if (hdl->i2cHdl == NULL)
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d087      	beq.n	8006800 <STSPIN32G4_setVCC+0x54>
 80068f0:	22dd      	movs	r2, #221	@ 0xdd
 80068f2:	210b      	movs	r1, #11
 80068f4:	4620      	mov	r0, r4
 80068f6:	f7ff fec9 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d180      	bne.n	8006800 <STSPIN32G4_setVCC+0x54>
  if (hdl->i2cHdl == NULL)
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f43f af7d 	beq.w	8006800 <STSPIN32G4_setVCC+0x54>
  if (value == NULL)
 8006906:	aa03      	add	r2, sp, #12
 8006908:	2180      	movs	r1, #128	@ 0x80
 800690a:	4620      	mov	r0, r4
 800690c:	f7ff fe36 	bl	800657c <STSPIN32G4_readReg.part.0>
    return status;
 8006910:	e776      	b.n	8006800 <STSPIN32G4_setVCC+0x54>
        i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS | STSPIN32G4_I2C_VCC_VAL_3);
 8006912:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8006916:	f022 0223 	bic.w	r2, r2, #35	@ 0x23
        i2cReg |= STSPIN32G4_I2C_VCC_VAL_2;
 800691a:	f042 0202 	orr.w	r2, r2, #2
        break;
 800691e:	e79b      	b.n	8006858 <STSPIN32G4_setVCC+0xac>
        i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS | STSPIN32G4_I2C_VCC_VAL_3);
 8006920:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8006924:	f022 0223 	bic.w	r2, r2, #35	@ 0x23
        i2cReg |= STSPIN32G4_I2C_VCC_VAL_1;
 8006928:	f042 0201 	orr.w	r2, r2, #1
        break;
 800692c:	e794      	b.n	8006858 <STSPIN32G4_setVCC+0xac>
        i2cReg &= ~(STSPIN32G4_I2C_VCC_DIS | STSPIN32G4_I2C_VCC_VAL_3);
 800692e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8006932:	f002 02dc 	and.w	r2, r2, #220	@ 0xdc
        break;
 8006936:	e78f      	b.n	8006858 <STSPIN32G4_setVCC+0xac>
        i2cReg |= STSPIN32G4_I2C_VCC_DIS;
 8006938:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800693c:	f042 0220 	orr.w	r2, r2, #32
        break;
 8006940:	e78a      	b.n	8006858 <STSPIN32G4_setVCC+0xac>
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_FLT;
 8006942:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006946:	e7a5      	b.n	8006894 <STSPIN32G4_setVCC+0xe8>
      i2cReg &= ~STSPIN32G4_I2C_VCC_UVLO_RDY;
 8006948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800694c:	e7c0      	b.n	80068d0 <STSPIN32G4_setVCC+0x124>
 800694e:	bf00      	nop

08006950 <STSPIN32G4_setVDSP>:

  return status;
}

STSPIN32G4_StatusTypeDef STSPIN32G4_setVDSP(STSPIN32G4_HandleTypeDef *hdl, STSPIN32G4_confVDSP vdsp)
{
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	b085      	sub	sp, #20
  STSPIN32G4_StatusTypeDef status;
  uint8_t i2cReg = 0;
 8006954:	2300      	movs	r3, #0
{
 8006956:	f8ad 1004 	strh.w	r1, [sp, #4]
  uint8_t i2cReg = 0;
 800695a:	f88d 300f 	strb.w	r3, [sp, #15]

  if (hdl == NULL)
 800695e:	2800      	cmp	r0, #0
 8006960:	d048      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
  if (hdl->i2cHdl == NULL)
 8006962:	6803      	ldr	r3, [r0, #0]
 8006964:	4604      	mov	r4, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d044      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
  if (value == NULL)
 800696a:	f10d 020f 	add.w	r2, sp, #15
 800696e:	2102      	movs	r1, #2
 8006970:	f7ff fe04 	bl	800657c <STSPIN32G4_readReg.part.0>
    return STSPIN32G4_ERROR;
  }

  status = STSPIN32G4_readReg(hdl, STSPIN32G4_I2C_LOGIC, &i2cReg);

  if (status == STSPIN32G4_OK)
 8006974:	b1d0      	cbz	r0, 80069ac <STSPIN32G4_setVDSP+0x5c>
  if (hdl->i2cHdl == NULL)
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d03b      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
 800697c:	22dd      	movs	r2, #221	@ 0xdd
 800697e:	210b      	movs	r1, #11
 8006980:	4620      	mov	r0, r4
 8006982:	f7ff fe83 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006986:	4605      	mov	r5, r0
 8006988:	b968      	cbnz	r0, 80069a6 <STSPIN32G4_setVDSP+0x56>
  if (hdl->i2cHdl == NULL)
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	b393      	cbz	r3, 80069f4 <STSPIN32G4_setVDSP+0xa4>
  if (value == NULL)
 800698e:	aa03      	add	r2, sp, #12
 8006990:	2180      	movs	r1, #128	@ 0x80
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fdf2 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK)
 8006998:	4605      	mov	r5, r0
 800699a:	b920      	cbnz	r0, 80069a6 <STSPIN32G4_setVDSP+0x56>
    if (statusReg.lock != 1)
 800699c:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80069a0:	43ed      	mvns	r5, r5
 80069a2:	f3c5 15c0 	ubfx	r5, r5, #7, #1
  }
  else
  {
    return STSPIN32G4_lockReg(hdl);
  }
}
 80069a6:	4628      	mov	r0, r5
 80069a8:	b005      	add	sp, #20
 80069aa:	bd30      	pop	{r4, r5, pc}
  if (hdl->i2cHdl == NULL)
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	b30b      	cbz	r3, 80069f4 <STSPIN32G4_setVDSP+0xa4>
 80069b0:	222d      	movs	r2, #45	@ 0x2d
 80069b2:	210b      	movs	r1, #11
 80069b4:	4620      	mov	r0, r4
 80069b6:	f7ff fe69 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d1db      	bne.n	8006976 <STSPIN32G4_setVDSP+0x26>
  if (hdl->i2cHdl == NULL)
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	b1c3      	cbz	r3, 80069f4 <STSPIN32G4_setVDSP+0xa4>
  if (value == NULL)
 80069c2:	aa03      	add	r2, sp, #12
 80069c4:	2180      	movs	r1, #128	@ 0x80
 80069c6:	4620      	mov	r0, r4
 80069c8:	f7ff fdd8 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK)
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1d2      	bne.n	8006976 <STSPIN32G4_setVDSP+0x26>
    if (statusReg.lock == 1)
 80069d0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	dbce      	blt.n	8006976 <STSPIN32G4_setVDSP+0x26>
    i2cReg &= ~STSPIN32G4_I2C_VDS_P_DEG_3;
 80069d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    switch (vdsp.deglitchTime)
 80069dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    i2cReg &= ~STSPIN32G4_I2C_VDS_P_DEG_3;
 80069e0:	f002 02f3 	and.w	r2, r2, #243	@ 0xf3
 80069e4:	f88d 200f 	strb.w	r2, [sp, #15]
    switch (vdsp.deglitchTime)
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d8c4      	bhi.n	8006976 <STSPIN32G4_setVDSP+0x26>
 80069ec:	e8df f003 	tbb	[pc, r3]
 80069f0:	4406490a 	.word	0x4406490a
    return STSPIN32G4_ERROR;
 80069f4:	2501      	movs	r5, #1
}
 80069f6:	4628      	mov	r0, r5
 80069f8:	b005      	add	sp, #20
 80069fa:	bd30      	pop	{r4, r5, pc}
        i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_2;
 80069fc:	f042 0208 	orr.w	r2, r2, #8
 8006a00:	f88d 200f 	strb.w	r2, [sp, #15]
  if (hdl->i2cHdl == NULL)
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f4      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff fe3d 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d1af      	bne.n	8006976 <STSPIN32G4_setVDSP+0x26>
  if (hdl->i2cHdl == NULL)
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0eb      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
  if (value == NULL)
 8006a1c:	f10d 020f 	add.w	r2, sp, #15
 8006a20:	2108      	movs	r1, #8
 8006a22:	4620      	mov	r0, r4
 8006a24:	f7ff fdaa 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK) // configure nFault signaling
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1a4      	bne.n	8006976 <STSPIN32G4_setVDSP+0x26>
    if (vdsp.useNFAULT)
 8006a2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 8006a30:	f89d 200f 	ldrb.w	r2, [sp, #15]
    if (vdsp.useNFAULT)
 8006a34:	b353      	cbz	r3, 8006a8c <STSPIN32G4_setVDSP+0x13c>
      i2cReg |= STSPIN32G4_I2C_VDS_P_FLT;
 8006a36:	f042 0204 	orr.w	r2, r2, #4
  if (hdl->i2cHdl == NULL)
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	f88d 200f 	strb.w	r2, [sp, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0d7      	beq.n	80069f4 <STSPIN32G4_setVDSP+0xa4>
 8006a44:	2108      	movs	r1, #8
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7ff fe20 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d191      	bne.n	8006976 <STSPIN32G4_setVDSP+0x26>
  if (hdl->i2cHdl == NULL)
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0a6      	beq.n	80069a6 <STSPIN32G4_setVDSP+0x56>
 8006a58:	22dd      	movs	r2, #221	@ 0xdd
 8006a5a:	210b      	movs	r1, #11
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	f7ff fe15 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006a62:	2800      	cmp	r0, #0
 8006a64:	d19f      	bne.n	80069a6 <STSPIN32G4_setVDSP+0x56>
  if (hdl->i2cHdl == NULL)
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d09c      	beq.n	80069a6 <STSPIN32G4_setVDSP+0x56>
  if (value == NULL)
 8006a6c:	aa03      	add	r2, sp, #12
 8006a6e:	2180      	movs	r1, #128	@ 0x80
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff fd83 	bl	800657c <STSPIN32G4_readReg.part.0>
    return status;
 8006a76:	e796      	b.n	80069a6 <STSPIN32G4_setVDSP+0x56>
        i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_3;
 8006a78:	f042 020c 	orr.w	r2, r2, #12
 8006a7c:	f88d 200f 	strb.w	r2, [sp, #15]
        break;
 8006a80:	e7c0      	b.n	8006a04 <STSPIN32G4_setVDSP+0xb4>
        i2cReg |= STSPIN32G4_I2C_VDS_P_DEG_1;
 8006a82:	f042 0204 	orr.w	r2, r2, #4
 8006a86:	f88d 200f 	strb.w	r2, [sp, #15]
        break;
 8006a8a:	e7bb      	b.n	8006a04 <STSPIN32G4_setVDSP+0xb4>
      i2cReg &= ~STSPIN32G4_I2C_VDS_P_FLT;
 8006a8c:	f002 02fb 	and.w	r2, r2, #251	@ 0xfb
 8006a90:	e7d3      	b.n	8006a3a <STSPIN32G4_setVDSP+0xea>
 8006a92:	bf00      	nop

08006a94 <STSPIN32G4_clearFaults>:

STSPIN32G4_StatusTypeDef STSPIN32G4_clearFaults(STSPIN32G4_HandleTypeDef *hdl)
{
  uint8_t i2cReg = 0xff;

  if (hdl == NULL)
 8006a94:	b128      	cbz	r0, 8006aa2 <STSPIN32G4_clearFaults+0xe>
  if (hdl->i2cHdl == NULL)
 8006a96:	6803      	ldr	r3, [r0, #0]
 8006a98:	b11b      	cbz	r3, 8006aa2 <STSPIN32G4_clearFaults+0xe>
 8006a9a:	22ff      	movs	r2, #255	@ 0xff
 8006a9c:	2109      	movs	r1, #9
 8006a9e:	f7ff bdf5 	b.w	800668c <STSPIN32G4_writeReg.part.0>
  {
    return STSPIN32G4_ERROR;
  }

  return STSPIN32G4_writeReg(hdl, STSPIN32G4_I2C_CLEAR, i2cReg);
}
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <STSPIN32G4_reset>:
STSPIN32G4_StatusTypeDef STSPIN32G4_reset(STSPIN32G4_HandleTypeDef *hdl)
{
  STSPIN32G4_StatusTypeDef status;
  uint8_t i2cReg = 0xff;

  if (hdl == NULL)
 8006aa8:	b310      	cbz	r0, 8006af0 <STSPIN32G4_reset+0x48>
{
 8006aaa:	b510      	push	{r4, lr}
  if (hdl->i2cHdl == NULL)
 8006aac:	6803      	ldr	r3, [r0, #0]
{
 8006aae:	b082      	sub	sp, #8
 8006ab0:	4604      	mov	r4, r0
  if (hdl->i2cHdl == NULL)
 8006ab2:	b1d3      	cbz	r3, 8006aea <STSPIN32G4_reset+0x42>
 8006ab4:	222d      	movs	r2, #45	@ 0x2d
 8006ab6:	210b      	movs	r1, #11
 8006ab8:	f7ff fde8 	bl	800668c <STSPIN32G4_writeReg.part.0>
  if (status == STSPIN32G4_OK)
 8006abc:	b9b0      	cbnz	r0, 8006aec <STSPIN32G4_reset+0x44>
  if (hdl->i2cHdl == NULL)
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	b19b      	cbz	r3, 8006aea <STSPIN32G4_reset+0x42>
  if (value == NULL)
 8006ac2:	aa01      	add	r2, sp, #4
 8006ac4:	2180      	movs	r1, #128	@ 0x80
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff fd58 	bl	800657c <STSPIN32G4_readReg.part.0>
  if (status == STSPIN32G4_OK)
 8006acc:	b970      	cbnz	r0, 8006aec <STSPIN32G4_reset+0x44>
    if (statusReg.lock == 1)
 8006ace:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db09      	blt.n	8006aea <STSPIN32G4_reset+0x42>
  if (hdl->i2cHdl == NULL)
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	b13b      	cbz	r3, 8006aea <STSPIN32G4_reset+0x42>
 8006ada:	22ff      	movs	r2, #255	@ 0xff
 8006adc:	210c      	movs	r1, #12
 8006ade:	4620      	mov	r0, r4
  {
    status = STSPIN32G4_writeReg(hdl, STSPIN32G4_I2C_RESET, i2cReg);
  }

  return status;
}
 8006ae0:	b002      	add	sp, #8
 8006ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ae6:	f7ff bdd1 	b.w	800668c <STSPIN32G4_writeReg.part.0>
    return STSPIN32G4_ERROR;
 8006aea:	2001      	movs	r0, #1
}
 8006aec:	b002      	add	sp, #8
 8006aee:	bd10      	pop	{r4, pc}
    return STSPIN32G4_ERROR;
 8006af0:	2001      	movs	r0, #1
}
 8006af2:	4770      	bx	lr

08006af4 <VVBS_Init>:
  * @retval none
  */
__weak void VVBS_Init(VirtualBusVoltageSensor_Handle_t *pHandle)
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8006af4:	8941      	ldrh	r1, [r0, #10]
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8006af6:	2200      	movs	r2, #0
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8006af8:	4613      	mov	r3, r2
 8006afa:	f361 030f 	bfi	r3, r1, #0, #16
 8006afe:	f361 431f 	bfi	r3, r1, #16, #16
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8006b02:	8102      	strh	r2, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8006b04:	6043      	str	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
}
 8006b06:	4770      	bx	lr

08006b08 <memset>:
 8006b08:	4402      	add	r2, r0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d100      	bne.n	8006b12 <memset+0xa>
 8006b10:	4770      	bx	lr
 8006b12:	f803 1b01 	strb.w	r1, [r3], #1
 8006b16:	e7f9      	b.n	8006b0c <memset+0x4>

08006b18 <__libc_init_array>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b50 <__libc_init_array+0x38>)
 8006b1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b54 <__libc_init_array+0x3c>)
 8006b1e:	1b64      	subs	r4, r4, r5
 8006b20:	10a4      	asrs	r4, r4, #2
 8006b22:	2600      	movs	r6, #0
 8006b24:	42a6      	cmp	r6, r4
 8006b26:	d109      	bne.n	8006b3c <__libc_init_array+0x24>
 8006b28:	4d0b      	ldr	r5, [pc, #44]	@ (8006b58 <__libc_init_array+0x40>)
 8006b2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b5c <__libc_init_array+0x44>)
 8006b2c:	f000 f818 	bl	8006b60 <_init>
 8006b30:	1b64      	subs	r4, r4, r5
 8006b32:	10a4      	asrs	r4, r4, #2
 8006b34:	2600      	movs	r6, #0
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	d105      	bne.n	8006b46 <__libc_init_array+0x2e>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b40:	4798      	blx	r3
 8006b42:	3601      	adds	r6, #1
 8006b44:	e7ee      	b.n	8006b24 <__libc_init_array+0xc>
 8006b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b4a:	4798      	blx	r3
 8006b4c:	3601      	adds	r6, #1
 8006b4e:	e7f2      	b.n	8006b36 <__libc_init_array+0x1e>
 8006b50:	08006bec 	.word	0x08006bec
 8006b54:	08006bec 	.word	0x08006bec
 8006b58:	08006bec 	.word	0x08006bec
 8006b5c:	08006bf0 	.word	0x08006bf0

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
